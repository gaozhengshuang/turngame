/*eslint-disable block-scoped-var, no-redeclare, no-control-regex, no-prototype-builtins*/
"use strict";

var $protobuf = require("protobufjs/minimal");

// Common aliases
var $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;

// Exported root namespace
var $root = $protobuf.roots["default"] || ($protobuf.roots["default"] = {});

$root.msg = (function() {

    /**
     * Namespace msg.
     * @exports msg
     * @namespace
     */
    var msg = {};

    msg.AccountInfo = (function() {

        /**
         * Properties of an AccountInfo.
         * @memberof msg
         * @interface IAccountInfo
         * @property {string|null} [account] AccountInfo account
         * @property {string|null} [passwd] AccountInfo passwd
         * @property {number|Long|null} [userid] AccountInfo userid
         */

        /**
         * Constructs a new AccountInfo.
         * @memberof msg
         * @classdesc Represents an AccountInfo.
         * @implements IAccountInfo
         * @constructor
         * @param {msg.IAccountInfo=} [properties] Properties to set
         */
        function AccountInfo(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * AccountInfo account.
         * @member {string} account
         * @memberof msg.AccountInfo
         * @instance
         */
        AccountInfo.prototype.account = "";

        /**
         * AccountInfo passwd.
         * @member {string} passwd
         * @memberof msg.AccountInfo
         * @instance
         */
        AccountInfo.prototype.passwd = "";

        /**
         * AccountInfo userid.
         * @member {number|Long} userid
         * @memberof msg.AccountInfo
         * @instance
         */
        AccountInfo.prototype.userid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * Creates a new AccountInfo instance using the specified properties.
         * @function create
         * @memberof msg.AccountInfo
         * @static
         * @param {msg.IAccountInfo=} [properties] Properties to set
         * @returns {msg.AccountInfo} AccountInfo instance
         */
        AccountInfo.create = function create(properties) {
            return new AccountInfo(properties);
        };

        /**
         * Encodes the specified AccountInfo message. Does not implicitly {@link msg.AccountInfo.verify|verify} messages.
         * @function encode
         * @memberof msg.AccountInfo
         * @static
         * @param {msg.IAccountInfo} message AccountInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        AccountInfo.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.account != null && message.hasOwnProperty("account"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.account);
            if (message.passwd != null && message.hasOwnProperty("passwd"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.passwd);
            if (message.userid != null && message.hasOwnProperty("userid"))
                writer.uint32(/* id 5, wireType 0 =*/40).uint64(message.userid);
            return writer;
        };

        /**
         * Encodes the specified AccountInfo message, length delimited. Does not implicitly {@link msg.AccountInfo.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.AccountInfo
         * @static
         * @param {msg.IAccountInfo} message AccountInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        AccountInfo.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes an AccountInfo message from the specified reader or buffer.
         * @function decode
         * @memberof msg.AccountInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.AccountInfo} AccountInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        AccountInfo.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.AccountInfo();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.account = reader.string();
                    break;
                case 2:
                    message.passwd = reader.string();
                    break;
                case 5:
                    message.userid = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes an AccountInfo message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.AccountInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.AccountInfo} AccountInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        AccountInfo.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies an AccountInfo message.
         * @function verify
         * @memberof msg.AccountInfo
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        AccountInfo.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.account != null && message.hasOwnProperty("account"))
                if (!$util.isString(message.account))
                    return "account: string expected";
            if (message.passwd != null && message.hasOwnProperty("passwd"))
                if (!$util.isString(message.passwd))
                    return "passwd: string expected";
            if (message.userid != null && message.hasOwnProperty("userid"))
                if (!$util.isInteger(message.userid) && !(message.userid && $util.isInteger(message.userid.low) && $util.isInteger(message.userid.high)))
                    return "userid: integer|Long expected";
            return null;
        };

        /**
         * Creates an AccountInfo message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.AccountInfo
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.AccountInfo} AccountInfo
         */
        AccountInfo.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.AccountInfo)
                return object;
            var message = new $root.msg.AccountInfo();
            if (object.account != null)
                message.account = String(object.account);
            if (object.passwd != null)
                message.passwd = String(object.passwd);
            if (object.userid != null)
                if ($util.Long)
                    (message.userid = $util.Long.fromValue(object.userid)).unsigned = true;
                else if (typeof object.userid === "string")
                    message.userid = parseInt(object.userid, 10);
                else if (typeof object.userid === "number")
                    message.userid = object.userid;
                else if (typeof object.userid === "object")
                    message.userid = new $util.LongBits(object.userid.low >>> 0, object.userid.high >>> 0).toNumber(true);
            return message;
        };

        /**
         * Creates a plain object from an AccountInfo message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.AccountInfo
         * @static
         * @param {msg.AccountInfo} message AccountInfo
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        AccountInfo.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.account = "";
                object.passwd = "";
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.userid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.userid = options.longs === String ? "0" : 0;
            }
            if (message.account != null && message.hasOwnProperty("account"))
                object.account = message.account;
            if (message.passwd != null && message.hasOwnProperty("passwd"))
                object.passwd = message.passwd;
            if (message.userid != null && message.hasOwnProperty("userid"))
                if (typeof message.userid === "number")
                    object.userid = options.longs === String ? String(message.userid) : message.userid;
                else
                    object.userid = options.longs === String ? $util.Long.prototype.toString.call(message.userid) : options.longs === Number ? new $util.LongBits(message.userid.low >>> 0, message.userid.high >>> 0).toNumber(true) : message.userid;
            return object;
        };

        /**
         * Converts this AccountInfo to JSON.
         * @function toJSON
         * @memberof msg.AccountInfo
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        AccountInfo.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return AccountInfo;
    })();

    msg.AccountGateInfo = (function() {

        /**
         * Properties of an AccountGateInfo.
         * @memberof msg
         * @interface IAccountGateInfo
         * @property {string|null} [ip] AccountGateInfo ip
         * @property {number|null} [port] AccountGateInfo port
         * @property {string|null} [verifykey] AccountGateInfo verifykey
         */

        /**
         * Constructs a new AccountGateInfo.
         * @memberof msg
         * @classdesc Represents an AccountGateInfo.
         * @implements IAccountGateInfo
         * @constructor
         * @param {msg.IAccountGateInfo=} [properties] Properties to set
         */
        function AccountGateInfo(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * AccountGateInfo ip.
         * @member {string} ip
         * @memberof msg.AccountGateInfo
         * @instance
         */
        AccountGateInfo.prototype.ip = "";

        /**
         * AccountGateInfo port.
         * @member {number} port
         * @memberof msg.AccountGateInfo
         * @instance
         */
        AccountGateInfo.prototype.port = 0;

        /**
         * AccountGateInfo verifykey.
         * @member {string} verifykey
         * @memberof msg.AccountGateInfo
         * @instance
         */
        AccountGateInfo.prototype.verifykey = "";

        /**
         * Creates a new AccountGateInfo instance using the specified properties.
         * @function create
         * @memberof msg.AccountGateInfo
         * @static
         * @param {msg.IAccountGateInfo=} [properties] Properties to set
         * @returns {msg.AccountGateInfo} AccountGateInfo instance
         */
        AccountGateInfo.create = function create(properties) {
            return new AccountGateInfo(properties);
        };

        /**
         * Encodes the specified AccountGateInfo message. Does not implicitly {@link msg.AccountGateInfo.verify|verify} messages.
         * @function encode
         * @memberof msg.AccountGateInfo
         * @static
         * @param {msg.IAccountGateInfo} message AccountGateInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        AccountGateInfo.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.ip != null && message.hasOwnProperty("ip"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.ip);
            if (message.port != null && message.hasOwnProperty("port"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.port);
            if (message.verifykey != null && message.hasOwnProperty("verifykey"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.verifykey);
            return writer;
        };

        /**
         * Encodes the specified AccountGateInfo message, length delimited. Does not implicitly {@link msg.AccountGateInfo.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.AccountGateInfo
         * @static
         * @param {msg.IAccountGateInfo} message AccountGateInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        AccountGateInfo.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes an AccountGateInfo message from the specified reader or buffer.
         * @function decode
         * @memberof msg.AccountGateInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.AccountGateInfo} AccountGateInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        AccountGateInfo.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.AccountGateInfo();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.ip = reader.string();
                    break;
                case 2:
                    message.port = reader.int32();
                    break;
                case 3:
                    message.verifykey = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes an AccountGateInfo message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.AccountGateInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.AccountGateInfo} AccountGateInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        AccountGateInfo.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies an AccountGateInfo message.
         * @function verify
         * @memberof msg.AccountGateInfo
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        AccountGateInfo.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.ip != null && message.hasOwnProperty("ip"))
                if (!$util.isString(message.ip))
                    return "ip: string expected";
            if (message.port != null && message.hasOwnProperty("port"))
                if (!$util.isInteger(message.port))
                    return "port: integer expected";
            if (message.verifykey != null && message.hasOwnProperty("verifykey"))
                if (!$util.isString(message.verifykey))
                    return "verifykey: string expected";
            return null;
        };

        /**
         * Creates an AccountGateInfo message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.AccountGateInfo
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.AccountGateInfo} AccountGateInfo
         */
        AccountGateInfo.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.AccountGateInfo)
                return object;
            var message = new $root.msg.AccountGateInfo();
            if (object.ip != null)
                message.ip = String(object.ip);
            if (object.port != null)
                message.port = object.port | 0;
            if (object.verifykey != null)
                message.verifykey = String(object.verifykey);
            return message;
        };

        /**
         * Creates a plain object from an AccountGateInfo message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.AccountGateInfo
         * @static
         * @param {msg.AccountGateInfo} message AccountGateInfo
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        AccountGateInfo.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.ip = "";
                object.port = 0;
                object.verifykey = "";
            }
            if (message.ip != null && message.hasOwnProperty("ip"))
                object.ip = message.ip;
            if (message.port != null && message.hasOwnProperty("port"))
                object.port = message.port;
            if (message.verifykey != null && message.hasOwnProperty("verifykey"))
                object.verifykey = message.verifykey;
            return object;
        };

        /**
         * Converts this AccountGateInfo to JSON.
         * @function toJSON
         * @memberof msg.AccountGateInfo
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        AccountGateInfo.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return AccountGateInfo;
    })();

    msg.BattleUser = (function() {

        /**
         * Properties of a BattleUser.
         * @memberof msg
         * @interface IBattleUser
         * @property {number|Long|null} [userid] BattleUser userid
         * @property {number|null} [gold] BattleUser gold
         * @property {number|null} [stepindex] BattleUser stepindex
         */

        /**
         * Constructs a new BattleUser.
         * @memberof msg
         * @classdesc Represents a BattleUser.
         * @implements IBattleUser
         * @constructor
         * @param {msg.IBattleUser=} [properties] Properties to set
         */
        function BattleUser(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * BattleUser userid.
         * @member {number|Long} userid
         * @memberof msg.BattleUser
         * @instance
         */
        BattleUser.prototype.userid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * BattleUser gold.
         * @member {number} gold
         * @memberof msg.BattleUser
         * @instance
         */
        BattleUser.prototype.gold = 0;

        /**
         * BattleUser stepindex.
         * @member {number} stepindex
         * @memberof msg.BattleUser
         * @instance
         */
        BattleUser.prototype.stepindex = 0;

        /**
         * Creates a new BattleUser instance using the specified properties.
         * @function create
         * @memberof msg.BattleUser
         * @static
         * @param {msg.IBattleUser=} [properties] Properties to set
         * @returns {msg.BattleUser} BattleUser instance
         */
        BattleUser.create = function create(properties) {
            return new BattleUser(properties);
        };

        /**
         * Encodes the specified BattleUser message. Does not implicitly {@link msg.BattleUser.verify|verify} messages.
         * @function encode
         * @memberof msg.BattleUser
         * @static
         * @param {msg.IBattleUser} message BattleUser message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        BattleUser.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.userid != null && message.hasOwnProperty("userid"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.userid);
            if (message.gold != null && message.hasOwnProperty("gold"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.gold);
            if (message.stepindex != null && message.hasOwnProperty("stepindex"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.stepindex);
            return writer;
        };

        /**
         * Encodes the specified BattleUser message, length delimited. Does not implicitly {@link msg.BattleUser.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.BattleUser
         * @static
         * @param {msg.IBattleUser} message BattleUser message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        BattleUser.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a BattleUser message from the specified reader or buffer.
         * @function decode
         * @memberof msg.BattleUser
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.BattleUser} BattleUser
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        BattleUser.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.BattleUser();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.userid = reader.uint64();
                    break;
                case 2:
                    message.gold = reader.int32();
                    break;
                case 3:
                    message.stepindex = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a BattleUser message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.BattleUser
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.BattleUser} BattleUser
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        BattleUser.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a BattleUser message.
         * @function verify
         * @memberof msg.BattleUser
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        BattleUser.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.userid != null && message.hasOwnProperty("userid"))
                if (!$util.isInteger(message.userid) && !(message.userid && $util.isInteger(message.userid.low) && $util.isInteger(message.userid.high)))
                    return "userid: integer|Long expected";
            if (message.gold != null && message.hasOwnProperty("gold"))
                if (!$util.isInteger(message.gold))
                    return "gold: integer expected";
            if (message.stepindex != null && message.hasOwnProperty("stepindex"))
                if (!$util.isInteger(message.stepindex))
                    return "stepindex: integer expected";
            return null;
        };

        /**
         * Creates a BattleUser message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.BattleUser
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.BattleUser} BattleUser
         */
        BattleUser.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.BattleUser)
                return object;
            var message = new $root.msg.BattleUser();
            if (object.userid != null)
                if ($util.Long)
                    (message.userid = $util.Long.fromValue(object.userid)).unsigned = true;
                else if (typeof object.userid === "string")
                    message.userid = parseInt(object.userid, 10);
                else if (typeof object.userid === "number")
                    message.userid = object.userid;
                else if (typeof object.userid === "object")
                    message.userid = new $util.LongBits(object.userid.low >>> 0, object.userid.high >>> 0).toNumber(true);
            if (object.gold != null)
                message.gold = object.gold | 0;
            if (object.stepindex != null)
                message.stepindex = object.stepindex | 0;
            return message;
        };

        /**
         * Creates a plain object from a BattleUser message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.BattleUser
         * @static
         * @param {msg.BattleUser} message BattleUser
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        BattleUser.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.userid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.userid = options.longs === String ? "0" : 0;
                object.gold = 0;
                object.stepindex = 0;
            }
            if (message.userid != null && message.hasOwnProperty("userid"))
                if (typeof message.userid === "number")
                    object.userid = options.longs === String ? String(message.userid) : message.userid;
                else
                    object.userid = options.longs === String ? $util.Long.prototype.toString.call(message.userid) : options.longs === Number ? new $util.LongBits(message.userid.low >>> 0, message.userid.high >>> 0).toNumber(true) : message.userid;
            if (message.gold != null && message.hasOwnProperty("gold"))
                object.gold = message.gold;
            if (message.stepindex != null && message.hasOwnProperty("stepindex"))
                object.stepindex = message.stepindex;
            return object;
        };

        /**
         * Converts this BattleUser to JSON.
         * @function toJSON
         * @memberof msg.BattleUser
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        BattleUser.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return BattleUser;
    })();

    msg.GridItem = (function() {

        /**
         * Properties of a GridItem.
         * @memberof msg
         * @interface IGridItem
         * @property {number|null} [index] GridItem index
         * @property {number|null} [id] GridItem id
         * @property {number|null} [num] GridItem num
         * @property {number|null} [gridtype] GridItem gridtype
         * @property {boolean|null} [control] GridItem control
         */

        /**
         * Constructs a new GridItem.
         * @memberof msg
         * @classdesc Represents a GridItem.
         * @implements IGridItem
         * @constructor
         * @param {msg.IGridItem=} [properties] Properties to set
         */
        function GridItem(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GridItem index.
         * @member {number} index
         * @memberof msg.GridItem
         * @instance
         */
        GridItem.prototype.index = 0;

        /**
         * GridItem id.
         * @member {number} id
         * @memberof msg.GridItem
         * @instance
         */
        GridItem.prototype.id = 0;

        /**
         * GridItem num.
         * @member {number} num
         * @memberof msg.GridItem
         * @instance
         */
        GridItem.prototype.num = 0;

        /**
         * GridItem gridtype.
         * @member {number} gridtype
         * @memberof msg.GridItem
         * @instance
         */
        GridItem.prototype.gridtype = 0;

        /**
         * GridItem control.
         * @member {boolean} control
         * @memberof msg.GridItem
         * @instance
         */
        GridItem.prototype.control = false;

        /**
         * Creates a new GridItem instance using the specified properties.
         * @function create
         * @memberof msg.GridItem
         * @static
         * @param {msg.IGridItem=} [properties] Properties to set
         * @returns {msg.GridItem} GridItem instance
         */
        GridItem.create = function create(properties) {
            return new GridItem(properties);
        };

        /**
         * Encodes the specified GridItem message. Does not implicitly {@link msg.GridItem.verify|verify} messages.
         * @function encode
         * @memberof msg.GridItem
         * @static
         * @param {msg.IGridItem} message GridItem message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GridItem.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.index != null && message.hasOwnProperty("index"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.index);
            if (message.id != null && message.hasOwnProperty("id"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.id);
            if (message.num != null && message.hasOwnProperty("num"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.num);
            if (message.gridtype != null && message.hasOwnProperty("gridtype"))
                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.gridtype);
            if (message.control != null && message.hasOwnProperty("control"))
                writer.uint32(/* id 5, wireType 0 =*/40).bool(message.control);
            return writer;
        };

        /**
         * Encodes the specified GridItem message, length delimited. Does not implicitly {@link msg.GridItem.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.GridItem
         * @static
         * @param {msg.IGridItem} message GridItem message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GridItem.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GridItem message from the specified reader or buffer.
         * @function decode
         * @memberof msg.GridItem
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.GridItem} GridItem
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GridItem.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.GridItem();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.index = reader.int32();
                    break;
                case 2:
                    message.id = reader.int32();
                    break;
                case 3:
                    message.num = reader.int32();
                    break;
                case 4:
                    message.gridtype = reader.int32();
                    break;
                case 5:
                    message.control = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GridItem message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.GridItem
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.GridItem} GridItem
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GridItem.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GridItem message.
         * @function verify
         * @memberof msg.GridItem
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GridItem.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.index != null && message.hasOwnProperty("index"))
                if (!$util.isInteger(message.index))
                    return "index: integer expected";
            if (message.id != null && message.hasOwnProperty("id"))
                if (!$util.isInteger(message.id))
                    return "id: integer expected";
            if (message.num != null && message.hasOwnProperty("num"))
                if (!$util.isInteger(message.num))
                    return "num: integer expected";
            if (message.gridtype != null && message.hasOwnProperty("gridtype"))
                if (!$util.isInteger(message.gridtype))
                    return "gridtype: integer expected";
            if (message.control != null && message.hasOwnProperty("control"))
                if (typeof message.control !== "boolean")
                    return "control: boolean expected";
            return null;
        };

        /**
         * Creates a GridItem message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.GridItem
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.GridItem} GridItem
         */
        GridItem.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.GridItem)
                return object;
            var message = new $root.msg.GridItem();
            if (object.index != null)
                message.index = object.index | 0;
            if (object.id != null)
                message.id = object.id | 0;
            if (object.num != null)
                message.num = object.num | 0;
            if (object.gridtype != null)
                message.gridtype = object.gridtype | 0;
            if (object.control != null)
                message.control = Boolean(object.control);
            return message;
        };

        /**
         * Creates a plain object from a GridItem message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.GridItem
         * @static
         * @param {msg.GridItem} message GridItem
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GridItem.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.index = 0;
                object.id = 0;
                object.num = 0;
                object.gridtype = 0;
                object.control = false;
            }
            if (message.index != null && message.hasOwnProperty("index"))
                object.index = message.index;
            if (message.id != null && message.hasOwnProperty("id"))
                object.id = message.id;
            if (message.num != null && message.hasOwnProperty("num"))
                object.num = message.num;
            if (message.gridtype != null && message.hasOwnProperty("gridtype"))
                object.gridtype = message.gridtype;
            if (message.control != null && message.hasOwnProperty("control"))
                object.control = message.control;
            return object;
        };

        /**
         * Converts this GridItem to JSON.
         * @function toJSON
         * @memberof msg.GridItem
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GridItem.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GridItem;
    })();

    msg.BT_UploadGameUser = (function() {

        /**
         * Properties of a BT_UploadGameUser.
         * @memberof msg
         * @interface IBT_UploadGameUser
         * @property {number|Long|null} [roomid] BT_UploadGameUser roomid
         * @property {msg.ISerialize|null} [bin] BT_UploadGameUser bin
         */

        /**
         * Constructs a new BT_UploadGameUser.
         * @memberof msg
         * @classdesc Represents a BT_UploadGameUser.
         * @implements IBT_UploadGameUser
         * @constructor
         * @param {msg.IBT_UploadGameUser=} [properties] Properties to set
         */
        function BT_UploadGameUser(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * BT_UploadGameUser roomid.
         * @member {number|Long} roomid
         * @memberof msg.BT_UploadGameUser
         * @instance
         */
        BT_UploadGameUser.prototype.roomid = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * BT_UploadGameUser bin.
         * @member {msg.ISerialize|null|undefined} bin
         * @memberof msg.BT_UploadGameUser
         * @instance
         */
        BT_UploadGameUser.prototype.bin = null;

        /**
         * Creates a new BT_UploadGameUser instance using the specified properties.
         * @function create
         * @memberof msg.BT_UploadGameUser
         * @static
         * @param {msg.IBT_UploadGameUser=} [properties] Properties to set
         * @returns {msg.BT_UploadGameUser} BT_UploadGameUser instance
         */
        BT_UploadGameUser.create = function create(properties) {
            return new BT_UploadGameUser(properties);
        };

        /**
         * Encodes the specified BT_UploadGameUser message. Does not implicitly {@link msg.BT_UploadGameUser.verify|verify} messages.
         * @function encode
         * @memberof msg.BT_UploadGameUser
         * @static
         * @param {msg.IBT_UploadGameUser} message BT_UploadGameUser message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        BT_UploadGameUser.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.roomid != null && message.hasOwnProperty("roomid"))
                writer.uint32(/* id 1, wireType 0 =*/8).int64(message.roomid);
            if (message.bin != null && message.hasOwnProperty("bin"))
                $root.msg.Serialize.encode(message.bin, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified BT_UploadGameUser message, length delimited. Does not implicitly {@link msg.BT_UploadGameUser.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.BT_UploadGameUser
         * @static
         * @param {msg.IBT_UploadGameUser} message BT_UploadGameUser message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        BT_UploadGameUser.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a BT_UploadGameUser message from the specified reader or buffer.
         * @function decode
         * @memberof msg.BT_UploadGameUser
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.BT_UploadGameUser} BT_UploadGameUser
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        BT_UploadGameUser.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.BT_UploadGameUser();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.roomid = reader.int64();
                    break;
                case 2:
                    message.bin = $root.msg.Serialize.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a BT_UploadGameUser message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.BT_UploadGameUser
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.BT_UploadGameUser} BT_UploadGameUser
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        BT_UploadGameUser.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a BT_UploadGameUser message.
         * @function verify
         * @memberof msg.BT_UploadGameUser
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        BT_UploadGameUser.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.roomid != null && message.hasOwnProperty("roomid"))
                if (!$util.isInteger(message.roomid) && !(message.roomid && $util.isInteger(message.roomid.low) && $util.isInteger(message.roomid.high)))
                    return "roomid: integer|Long expected";
            if (message.bin != null && message.hasOwnProperty("bin")) {
                var error = $root.msg.Serialize.verify(message.bin);
                if (error)
                    return "bin." + error;
            }
            return null;
        };

        /**
         * Creates a BT_UploadGameUser message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.BT_UploadGameUser
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.BT_UploadGameUser} BT_UploadGameUser
         */
        BT_UploadGameUser.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.BT_UploadGameUser)
                return object;
            var message = new $root.msg.BT_UploadGameUser();
            if (object.roomid != null)
                if ($util.Long)
                    (message.roomid = $util.Long.fromValue(object.roomid)).unsigned = false;
                else if (typeof object.roomid === "string")
                    message.roomid = parseInt(object.roomid, 10);
                else if (typeof object.roomid === "number")
                    message.roomid = object.roomid;
                else if (typeof object.roomid === "object")
                    message.roomid = new $util.LongBits(object.roomid.low >>> 0, object.roomid.high >>> 0).toNumber();
            if (object.bin != null) {
                if (typeof object.bin !== "object")
                    throw TypeError(".msg.BT_UploadGameUser.bin: object expected");
                message.bin = $root.msg.Serialize.fromObject(object.bin);
            }
            return message;
        };

        /**
         * Creates a plain object from a BT_UploadGameUser message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.BT_UploadGameUser
         * @static
         * @param {msg.BT_UploadGameUser} message BT_UploadGameUser
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        BT_UploadGameUser.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.roomid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.roomid = options.longs === String ? "0" : 0;
                object.bin = null;
            }
            if (message.roomid != null && message.hasOwnProperty("roomid"))
                if (typeof message.roomid === "number")
                    object.roomid = options.longs === String ? String(message.roomid) : message.roomid;
                else
                    object.roomid = options.longs === String ? $util.Long.prototype.toString.call(message.roomid) : options.longs === Number ? new $util.LongBits(message.roomid.low >>> 0, message.roomid.high >>> 0).toNumber() : message.roomid;
            if (message.bin != null && message.hasOwnProperty("bin"))
                object.bin = $root.msg.Serialize.toObject(message.bin, options);
            return object;
        };

        /**
         * Converts this BT_UploadGameUser to JSON.
         * @function toJSON
         * @memberof msg.BT_UploadGameUser
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        BT_UploadGameUser.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return BT_UploadGameUser;
    })();

    msg.BT_ReqEnterRoom = (function() {

        /**
         * Properties of a BT_ReqEnterRoom.
         * @memberof msg
         * @interface IBT_ReqEnterRoom
         * @property {number|Long|null} [roomid] BT_ReqEnterRoom roomid
         * @property {number|Long|null} [userid] BT_ReqEnterRoom userid
         * @property {string|null} [token] BT_ReqEnterRoom token
         */

        /**
         * Constructs a new BT_ReqEnterRoom.
         * @memberof msg
         * @classdesc Represents a BT_ReqEnterRoom.
         * @implements IBT_ReqEnterRoom
         * @constructor
         * @param {msg.IBT_ReqEnterRoom=} [properties] Properties to set
         */
        function BT_ReqEnterRoom(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * BT_ReqEnterRoom roomid.
         * @member {number|Long} roomid
         * @memberof msg.BT_ReqEnterRoom
         * @instance
         */
        BT_ReqEnterRoom.prototype.roomid = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * BT_ReqEnterRoom userid.
         * @member {number|Long} userid
         * @memberof msg.BT_ReqEnterRoom
         * @instance
         */
        BT_ReqEnterRoom.prototype.userid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * BT_ReqEnterRoom token.
         * @member {string} token
         * @memberof msg.BT_ReqEnterRoom
         * @instance
         */
        BT_ReqEnterRoom.prototype.token = "";

        /**
         * Creates a new BT_ReqEnterRoom instance using the specified properties.
         * @function create
         * @memberof msg.BT_ReqEnterRoom
         * @static
         * @param {msg.IBT_ReqEnterRoom=} [properties] Properties to set
         * @returns {msg.BT_ReqEnterRoom} BT_ReqEnterRoom instance
         */
        BT_ReqEnterRoom.create = function create(properties) {
            return new BT_ReqEnterRoom(properties);
        };

        /**
         * Encodes the specified BT_ReqEnterRoom message. Does not implicitly {@link msg.BT_ReqEnterRoom.verify|verify} messages.
         * @function encode
         * @memberof msg.BT_ReqEnterRoom
         * @static
         * @param {msg.IBT_ReqEnterRoom} message BT_ReqEnterRoom message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        BT_ReqEnterRoom.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.roomid != null && message.hasOwnProperty("roomid"))
                writer.uint32(/* id 1, wireType 0 =*/8).int64(message.roomid);
            if (message.userid != null && message.hasOwnProperty("userid"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.userid);
            if (message.token != null && message.hasOwnProperty("token"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.token);
            return writer;
        };

        /**
         * Encodes the specified BT_ReqEnterRoom message, length delimited. Does not implicitly {@link msg.BT_ReqEnterRoom.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.BT_ReqEnterRoom
         * @static
         * @param {msg.IBT_ReqEnterRoom} message BT_ReqEnterRoom message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        BT_ReqEnterRoom.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a BT_ReqEnterRoom message from the specified reader or buffer.
         * @function decode
         * @memberof msg.BT_ReqEnterRoom
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.BT_ReqEnterRoom} BT_ReqEnterRoom
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        BT_ReqEnterRoom.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.BT_ReqEnterRoom();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.roomid = reader.int64();
                    break;
                case 2:
                    message.userid = reader.uint64();
                    break;
                case 3:
                    message.token = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a BT_ReqEnterRoom message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.BT_ReqEnterRoom
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.BT_ReqEnterRoom} BT_ReqEnterRoom
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        BT_ReqEnterRoom.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a BT_ReqEnterRoom message.
         * @function verify
         * @memberof msg.BT_ReqEnterRoom
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        BT_ReqEnterRoom.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.roomid != null && message.hasOwnProperty("roomid"))
                if (!$util.isInteger(message.roomid) && !(message.roomid && $util.isInteger(message.roomid.low) && $util.isInteger(message.roomid.high)))
                    return "roomid: integer|Long expected";
            if (message.userid != null && message.hasOwnProperty("userid"))
                if (!$util.isInteger(message.userid) && !(message.userid && $util.isInteger(message.userid.low) && $util.isInteger(message.userid.high)))
                    return "userid: integer|Long expected";
            if (message.token != null && message.hasOwnProperty("token"))
                if (!$util.isString(message.token))
                    return "token: string expected";
            return null;
        };

        /**
         * Creates a BT_ReqEnterRoom message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.BT_ReqEnterRoom
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.BT_ReqEnterRoom} BT_ReqEnterRoom
         */
        BT_ReqEnterRoom.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.BT_ReqEnterRoom)
                return object;
            var message = new $root.msg.BT_ReqEnterRoom();
            if (object.roomid != null)
                if ($util.Long)
                    (message.roomid = $util.Long.fromValue(object.roomid)).unsigned = false;
                else if (typeof object.roomid === "string")
                    message.roomid = parseInt(object.roomid, 10);
                else if (typeof object.roomid === "number")
                    message.roomid = object.roomid;
                else if (typeof object.roomid === "object")
                    message.roomid = new $util.LongBits(object.roomid.low >>> 0, object.roomid.high >>> 0).toNumber();
            if (object.userid != null)
                if ($util.Long)
                    (message.userid = $util.Long.fromValue(object.userid)).unsigned = true;
                else if (typeof object.userid === "string")
                    message.userid = parseInt(object.userid, 10);
                else if (typeof object.userid === "number")
                    message.userid = object.userid;
                else if (typeof object.userid === "object")
                    message.userid = new $util.LongBits(object.userid.low >>> 0, object.userid.high >>> 0).toNumber(true);
            if (object.token != null)
                message.token = String(object.token);
            return message;
        };

        /**
         * Creates a plain object from a BT_ReqEnterRoom message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.BT_ReqEnterRoom
         * @static
         * @param {msg.BT_ReqEnterRoom} message BT_ReqEnterRoom
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        BT_ReqEnterRoom.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.roomid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.roomid = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.userid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.userid = options.longs === String ? "0" : 0;
                object.token = "";
            }
            if (message.roomid != null && message.hasOwnProperty("roomid"))
                if (typeof message.roomid === "number")
                    object.roomid = options.longs === String ? String(message.roomid) : message.roomid;
                else
                    object.roomid = options.longs === String ? $util.Long.prototype.toString.call(message.roomid) : options.longs === Number ? new $util.LongBits(message.roomid.low >>> 0, message.roomid.high >>> 0).toNumber() : message.roomid;
            if (message.userid != null && message.hasOwnProperty("userid"))
                if (typeof message.userid === "number")
                    object.userid = options.longs === String ? String(message.userid) : message.userid;
                else
                    object.userid = options.longs === String ? $util.Long.prototype.toString.call(message.userid) : options.longs === Number ? new $util.LongBits(message.userid.low >>> 0, message.userid.high >>> 0).toNumber(true) : message.userid;
            if (message.token != null && message.hasOwnProperty("token"))
                object.token = message.token;
            return object;
        };

        /**
         * Converts this BT_ReqEnterRoom to JSON.
         * @function toJSON
         * @memberof msg.BT_ReqEnterRoom
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        BT_ReqEnterRoom.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return BT_ReqEnterRoom;
    })();

    msg.BT_GameInit = (function() {

        /**
         * Properties of a BT_GameInit.
         * @memberof msg
         * @interface IBT_GameInit
         * @property {number|Long|null} [roomid] BT_GameInit roomid
         * @property {number|Long|null} [ownerid] BT_GameInit ownerid
         * @property {number|null} [gamekind] BT_GameInit gamekind
         */

        /**
         * Constructs a new BT_GameInit.
         * @memberof msg
         * @classdesc Represents a BT_GameInit.
         * @implements IBT_GameInit
         * @constructor
         * @param {msg.IBT_GameInit=} [properties] Properties to set
         */
        function BT_GameInit(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * BT_GameInit roomid.
         * @member {number|Long} roomid
         * @memberof msg.BT_GameInit
         * @instance
         */
        BT_GameInit.prototype.roomid = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * BT_GameInit ownerid.
         * @member {number|Long} ownerid
         * @memberof msg.BT_GameInit
         * @instance
         */
        BT_GameInit.prototype.ownerid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * BT_GameInit gamekind.
         * @member {number} gamekind
         * @memberof msg.BT_GameInit
         * @instance
         */
        BT_GameInit.prototype.gamekind = 0;

        /**
         * Creates a new BT_GameInit instance using the specified properties.
         * @function create
         * @memberof msg.BT_GameInit
         * @static
         * @param {msg.IBT_GameInit=} [properties] Properties to set
         * @returns {msg.BT_GameInit} BT_GameInit instance
         */
        BT_GameInit.create = function create(properties) {
            return new BT_GameInit(properties);
        };

        /**
         * Encodes the specified BT_GameInit message. Does not implicitly {@link msg.BT_GameInit.verify|verify} messages.
         * @function encode
         * @memberof msg.BT_GameInit
         * @static
         * @param {msg.IBT_GameInit} message BT_GameInit message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        BT_GameInit.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.roomid != null && message.hasOwnProperty("roomid"))
                writer.uint32(/* id 1, wireType 0 =*/8).int64(message.roomid);
            if (message.ownerid != null && message.hasOwnProperty("ownerid"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.ownerid);
            if (message.gamekind != null && message.hasOwnProperty("gamekind"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.gamekind);
            return writer;
        };

        /**
         * Encodes the specified BT_GameInit message, length delimited. Does not implicitly {@link msg.BT_GameInit.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.BT_GameInit
         * @static
         * @param {msg.IBT_GameInit} message BT_GameInit message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        BT_GameInit.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a BT_GameInit message from the specified reader or buffer.
         * @function decode
         * @memberof msg.BT_GameInit
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.BT_GameInit} BT_GameInit
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        BT_GameInit.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.BT_GameInit();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.roomid = reader.int64();
                    break;
                case 2:
                    message.ownerid = reader.uint64();
                    break;
                case 3:
                    message.gamekind = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a BT_GameInit message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.BT_GameInit
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.BT_GameInit} BT_GameInit
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        BT_GameInit.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a BT_GameInit message.
         * @function verify
         * @memberof msg.BT_GameInit
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        BT_GameInit.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.roomid != null && message.hasOwnProperty("roomid"))
                if (!$util.isInteger(message.roomid) && !(message.roomid && $util.isInteger(message.roomid.low) && $util.isInteger(message.roomid.high)))
                    return "roomid: integer|Long expected";
            if (message.ownerid != null && message.hasOwnProperty("ownerid"))
                if (!$util.isInteger(message.ownerid) && !(message.ownerid && $util.isInteger(message.ownerid.low) && $util.isInteger(message.ownerid.high)))
                    return "ownerid: integer|Long expected";
            if (message.gamekind != null && message.hasOwnProperty("gamekind"))
                if (!$util.isInteger(message.gamekind))
                    return "gamekind: integer expected";
            return null;
        };

        /**
         * Creates a BT_GameInit message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.BT_GameInit
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.BT_GameInit} BT_GameInit
         */
        BT_GameInit.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.BT_GameInit)
                return object;
            var message = new $root.msg.BT_GameInit();
            if (object.roomid != null)
                if ($util.Long)
                    (message.roomid = $util.Long.fromValue(object.roomid)).unsigned = false;
                else if (typeof object.roomid === "string")
                    message.roomid = parseInt(object.roomid, 10);
                else if (typeof object.roomid === "number")
                    message.roomid = object.roomid;
                else if (typeof object.roomid === "object")
                    message.roomid = new $util.LongBits(object.roomid.low >>> 0, object.roomid.high >>> 0).toNumber();
            if (object.ownerid != null)
                if ($util.Long)
                    (message.ownerid = $util.Long.fromValue(object.ownerid)).unsigned = true;
                else if (typeof object.ownerid === "string")
                    message.ownerid = parseInt(object.ownerid, 10);
                else if (typeof object.ownerid === "number")
                    message.ownerid = object.ownerid;
                else if (typeof object.ownerid === "object")
                    message.ownerid = new $util.LongBits(object.ownerid.low >>> 0, object.ownerid.high >>> 0).toNumber(true);
            if (object.gamekind != null)
                message.gamekind = object.gamekind | 0;
            return message;
        };

        /**
         * Creates a plain object from a BT_GameInit message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.BT_GameInit
         * @static
         * @param {msg.BT_GameInit} message BT_GameInit
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        BT_GameInit.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.roomid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.roomid = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.ownerid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.ownerid = options.longs === String ? "0" : 0;
                object.gamekind = 0;
            }
            if (message.roomid != null && message.hasOwnProperty("roomid"))
                if (typeof message.roomid === "number")
                    object.roomid = options.longs === String ? String(message.roomid) : message.roomid;
                else
                    object.roomid = options.longs === String ? $util.Long.prototype.toString.call(message.roomid) : options.longs === Number ? new $util.LongBits(message.roomid.low >>> 0, message.roomid.high >>> 0).toNumber() : message.roomid;
            if (message.ownerid != null && message.hasOwnProperty("ownerid"))
                if (typeof message.ownerid === "number")
                    object.ownerid = options.longs === String ? String(message.ownerid) : message.ownerid;
                else
                    object.ownerid = options.longs === String ? $util.Long.prototype.toString.call(message.ownerid) : options.longs === Number ? new $util.LongBits(message.ownerid.low >>> 0, message.ownerid.high >>> 0).toNumber(true) : message.ownerid;
            if (message.gamekind != null && message.hasOwnProperty("gamekind"))
                object.gamekind = message.gamekind;
            return object;
        };

        /**
         * Converts this BT_GameInit to JSON.
         * @function toJSON
         * @memberof msg.BT_GameInit
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        BT_GameInit.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return BT_GameInit;
    })();

    msg.BT_SendBattleUser = (function() {

        /**
         * Properties of a BT_SendBattleUser.
         * @memberof msg
         * @interface IBT_SendBattleUser
         * @property {number|Long|null} [ownerid] BT_SendBattleUser ownerid
         * @property {number|null} [gold] BT_SendBattleUser gold
         * @property {number|null} [coupon] BT_SendBattleUser coupon
         * @property {number|null} [yuanbao] BT_SendBattleUser yuanbao
         * @property {number|null} [level] BT_SendBattleUser level
         * @property {number|null} [freestep] BT_SendBattleUser freestep
         */

        /**
         * Constructs a new BT_SendBattleUser.
         * @memberof msg
         * @classdesc Represents a BT_SendBattleUser.
         * @implements IBT_SendBattleUser
         * @constructor
         * @param {msg.IBT_SendBattleUser=} [properties] Properties to set
         */
        function BT_SendBattleUser(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * BT_SendBattleUser ownerid.
         * @member {number|Long} ownerid
         * @memberof msg.BT_SendBattleUser
         * @instance
         */
        BT_SendBattleUser.prototype.ownerid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * BT_SendBattleUser gold.
         * @member {number} gold
         * @memberof msg.BT_SendBattleUser
         * @instance
         */
        BT_SendBattleUser.prototype.gold = 0;

        /**
         * BT_SendBattleUser coupon.
         * @member {number} coupon
         * @memberof msg.BT_SendBattleUser
         * @instance
         */
        BT_SendBattleUser.prototype.coupon = 0;

        /**
         * BT_SendBattleUser yuanbao.
         * @member {number} yuanbao
         * @memberof msg.BT_SendBattleUser
         * @instance
         */
        BT_SendBattleUser.prototype.yuanbao = 0;

        /**
         * BT_SendBattleUser level.
         * @member {number} level
         * @memberof msg.BT_SendBattleUser
         * @instance
         */
        BT_SendBattleUser.prototype.level = 0;

        /**
         * BT_SendBattleUser freestep.
         * @member {number} freestep
         * @memberof msg.BT_SendBattleUser
         * @instance
         */
        BT_SendBattleUser.prototype.freestep = 0;

        /**
         * Creates a new BT_SendBattleUser instance using the specified properties.
         * @function create
         * @memberof msg.BT_SendBattleUser
         * @static
         * @param {msg.IBT_SendBattleUser=} [properties] Properties to set
         * @returns {msg.BT_SendBattleUser} BT_SendBattleUser instance
         */
        BT_SendBattleUser.create = function create(properties) {
            return new BT_SendBattleUser(properties);
        };

        /**
         * Encodes the specified BT_SendBattleUser message. Does not implicitly {@link msg.BT_SendBattleUser.verify|verify} messages.
         * @function encode
         * @memberof msg.BT_SendBattleUser
         * @static
         * @param {msg.IBT_SendBattleUser} message BT_SendBattleUser message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        BT_SendBattleUser.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.ownerid != null && message.hasOwnProperty("ownerid"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.ownerid);
            if (message.gold != null && message.hasOwnProperty("gold"))
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.gold);
            if (message.coupon != null && message.hasOwnProperty("coupon"))
                writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.coupon);
            if (message.yuanbao != null && message.hasOwnProperty("yuanbao"))
                writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.yuanbao);
            if (message.level != null && message.hasOwnProperty("level"))
                writer.uint32(/* id 6, wireType 0 =*/48).uint32(message.level);
            if (message.freestep != null && message.hasOwnProperty("freestep"))
                writer.uint32(/* id 7, wireType 0 =*/56).int32(message.freestep);
            return writer;
        };

        /**
         * Encodes the specified BT_SendBattleUser message, length delimited. Does not implicitly {@link msg.BT_SendBattleUser.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.BT_SendBattleUser
         * @static
         * @param {msg.IBT_SendBattleUser} message BT_SendBattleUser message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        BT_SendBattleUser.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a BT_SendBattleUser message from the specified reader or buffer.
         * @function decode
         * @memberof msg.BT_SendBattleUser
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.BT_SendBattleUser} BT_SendBattleUser
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        BT_SendBattleUser.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.BT_SendBattleUser();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 2:
                    message.ownerid = reader.uint64();
                    break;
                case 3:
                    message.gold = reader.uint32();
                    break;
                case 4:
                    message.coupon = reader.uint32();
                    break;
                case 5:
                    message.yuanbao = reader.uint32();
                    break;
                case 6:
                    message.level = reader.uint32();
                    break;
                case 7:
                    message.freestep = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a BT_SendBattleUser message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.BT_SendBattleUser
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.BT_SendBattleUser} BT_SendBattleUser
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        BT_SendBattleUser.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a BT_SendBattleUser message.
         * @function verify
         * @memberof msg.BT_SendBattleUser
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        BT_SendBattleUser.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.ownerid != null && message.hasOwnProperty("ownerid"))
                if (!$util.isInteger(message.ownerid) && !(message.ownerid && $util.isInteger(message.ownerid.low) && $util.isInteger(message.ownerid.high)))
                    return "ownerid: integer|Long expected";
            if (message.gold != null && message.hasOwnProperty("gold"))
                if (!$util.isInteger(message.gold))
                    return "gold: integer expected";
            if (message.coupon != null && message.hasOwnProperty("coupon"))
                if (!$util.isInteger(message.coupon))
                    return "coupon: integer expected";
            if (message.yuanbao != null && message.hasOwnProperty("yuanbao"))
                if (!$util.isInteger(message.yuanbao))
                    return "yuanbao: integer expected";
            if (message.level != null && message.hasOwnProperty("level"))
                if (!$util.isInteger(message.level))
                    return "level: integer expected";
            if (message.freestep != null && message.hasOwnProperty("freestep"))
                if (!$util.isInteger(message.freestep))
                    return "freestep: integer expected";
            return null;
        };

        /**
         * Creates a BT_SendBattleUser message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.BT_SendBattleUser
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.BT_SendBattleUser} BT_SendBattleUser
         */
        BT_SendBattleUser.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.BT_SendBattleUser)
                return object;
            var message = new $root.msg.BT_SendBattleUser();
            if (object.ownerid != null)
                if ($util.Long)
                    (message.ownerid = $util.Long.fromValue(object.ownerid)).unsigned = true;
                else if (typeof object.ownerid === "string")
                    message.ownerid = parseInt(object.ownerid, 10);
                else if (typeof object.ownerid === "number")
                    message.ownerid = object.ownerid;
                else if (typeof object.ownerid === "object")
                    message.ownerid = new $util.LongBits(object.ownerid.low >>> 0, object.ownerid.high >>> 0).toNumber(true);
            if (object.gold != null)
                message.gold = object.gold >>> 0;
            if (object.coupon != null)
                message.coupon = object.coupon >>> 0;
            if (object.yuanbao != null)
                message.yuanbao = object.yuanbao >>> 0;
            if (object.level != null)
                message.level = object.level >>> 0;
            if (object.freestep != null)
                message.freestep = object.freestep | 0;
            return message;
        };

        /**
         * Creates a plain object from a BT_SendBattleUser message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.BT_SendBattleUser
         * @static
         * @param {msg.BT_SendBattleUser} message BT_SendBattleUser
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        BT_SendBattleUser.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.ownerid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.ownerid = options.longs === String ? "0" : 0;
                object.gold = 0;
                object.coupon = 0;
                object.yuanbao = 0;
                object.level = 0;
                object.freestep = 0;
            }
            if (message.ownerid != null && message.hasOwnProperty("ownerid"))
                if (typeof message.ownerid === "number")
                    object.ownerid = options.longs === String ? String(message.ownerid) : message.ownerid;
                else
                    object.ownerid = options.longs === String ? $util.Long.prototype.toString.call(message.ownerid) : options.longs === Number ? new $util.LongBits(message.ownerid.low >>> 0, message.ownerid.high >>> 0).toNumber(true) : message.ownerid;
            if (message.gold != null && message.hasOwnProperty("gold"))
                object.gold = message.gold;
            if (message.coupon != null && message.hasOwnProperty("coupon"))
                object.coupon = message.coupon;
            if (message.yuanbao != null && message.hasOwnProperty("yuanbao"))
                object.yuanbao = message.yuanbao;
            if (message.level != null && message.hasOwnProperty("level"))
                object.level = message.level;
            if (message.freestep != null && message.hasOwnProperty("freestep"))
                object.freestep = message.freestep;
            return object;
        };

        /**
         * Converts this BT_SendBattleUser to JSON.
         * @function toJSON
         * @memberof msg.BT_SendBattleUser
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        BT_SendBattleUser.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return BT_SendBattleUser;
    })();

    msg.BT_GameStart = (function() {

        /**
         * Properties of a BT_GameStart.
         * @memberof msg
         * @interface IBT_GameStart
         * @property {number|Long|null} [roomid] BT_GameStart roomid
         * @property {number|Long|null} [ownerid] BT_GameStart ownerid
         */

        /**
         * Constructs a new BT_GameStart.
         * @memberof msg
         * @classdesc Represents a BT_GameStart.
         * @implements IBT_GameStart
         * @constructor
         * @param {msg.IBT_GameStart=} [properties] Properties to set
         */
        function BT_GameStart(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * BT_GameStart roomid.
         * @member {number|Long} roomid
         * @memberof msg.BT_GameStart
         * @instance
         */
        BT_GameStart.prototype.roomid = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * BT_GameStart ownerid.
         * @member {number|Long} ownerid
         * @memberof msg.BT_GameStart
         * @instance
         */
        BT_GameStart.prototype.ownerid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * Creates a new BT_GameStart instance using the specified properties.
         * @function create
         * @memberof msg.BT_GameStart
         * @static
         * @param {msg.IBT_GameStart=} [properties] Properties to set
         * @returns {msg.BT_GameStart} BT_GameStart instance
         */
        BT_GameStart.create = function create(properties) {
            return new BT_GameStart(properties);
        };

        /**
         * Encodes the specified BT_GameStart message. Does not implicitly {@link msg.BT_GameStart.verify|verify} messages.
         * @function encode
         * @memberof msg.BT_GameStart
         * @static
         * @param {msg.IBT_GameStart} message BT_GameStart message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        BT_GameStart.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.roomid != null && message.hasOwnProperty("roomid"))
                writer.uint32(/* id 1, wireType 0 =*/8).int64(message.roomid);
            if (message.ownerid != null && message.hasOwnProperty("ownerid"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.ownerid);
            return writer;
        };

        /**
         * Encodes the specified BT_GameStart message, length delimited. Does not implicitly {@link msg.BT_GameStart.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.BT_GameStart
         * @static
         * @param {msg.IBT_GameStart} message BT_GameStart message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        BT_GameStart.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a BT_GameStart message from the specified reader or buffer.
         * @function decode
         * @memberof msg.BT_GameStart
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.BT_GameStart} BT_GameStart
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        BT_GameStart.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.BT_GameStart();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.roomid = reader.int64();
                    break;
                case 2:
                    message.ownerid = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a BT_GameStart message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.BT_GameStart
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.BT_GameStart} BT_GameStart
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        BT_GameStart.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a BT_GameStart message.
         * @function verify
         * @memberof msg.BT_GameStart
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        BT_GameStart.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.roomid != null && message.hasOwnProperty("roomid"))
                if (!$util.isInteger(message.roomid) && !(message.roomid && $util.isInteger(message.roomid.low) && $util.isInteger(message.roomid.high)))
                    return "roomid: integer|Long expected";
            if (message.ownerid != null && message.hasOwnProperty("ownerid"))
                if (!$util.isInteger(message.ownerid) && !(message.ownerid && $util.isInteger(message.ownerid.low) && $util.isInteger(message.ownerid.high)))
                    return "ownerid: integer|Long expected";
            return null;
        };

        /**
         * Creates a BT_GameStart message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.BT_GameStart
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.BT_GameStart} BT_GameStart
         */
        BT_GameStart.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.BT_GameStart)
                return object;
            var message = new $root.msg.BT_GameStart();
            if (object.roomid != null)
                if ($util.Long)
                    (message.roomid = $util.Long.fromValue(object.roomid)).unsigned = false;
                else if (typeof object.roomid === "string")
                    message.roomid = parseInt(object.roomid, 10);
                else if (typeof object.roomid === "number")
                    message.roomid = object.roomid;
                else if (typeof object.roomid === "object")
                    message.roomid = new $util.LongBits(object.roomid.low >>> 0, object.roomid.high >>> 0).toNumber();
            if (object.ownerid != null)
                if ($util.Long)
                    (message.ownerid = $util.Long.fromValue(object.ownerid)).unsigned = true;
                else if (typeof object.ownerid === "string")
                    message.ownerid = parseInt(object.ownerid, 10);
                else if (typeof object.ownerid === "number")
                    message.ownerid = object.ownerid;
                else if (typeof object.ownerid === "object")
                    message.ownerid = new $util.LongBits(object.ownerid.low >>> 0, object.ownerid.high >>> 0).toNumber(true);
            return message;
        };

        /**
         * Creates a plain object from a BT_GameStart message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.BT_GameStart
         * @static
         * @param {msg.BT_GameStart} message BT_GameStart
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        BT_GameStart.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.roomid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.roomid = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.ownerid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.ownerid = options.longs === String ? "0" : 0;
            }
            if (message.roomid != null && message.hasOwnProperty("roomid"))
                if (typeof message.roomid === "number")
                    object.roomid = options.longs === String ? String(message.roomid) : message.roomid;
                else
                    object.roomid = options.longs === String ? $util.Long.prototype.toString.call(message.roomid) : options.longs === Number ? new $util.LongBits(message.roomid.low >>> 0, message.roomid.high >>> 0).toNumber() : message.roomid;
            if (message.ownerid != null && message.hasOwnProperty("ownerid"))
                if (typeof message.ownerid === "number")
                    object.ownerid = options.longs === String ? String(message.ownerid) : message.ownerid;
                else
                    object.ownerid = options.longs === String ? $util.Long.prototype.toString.call(message.ownerid) : options.longs === Number ? new $util.LongBits(message.ownerid.low >>> 0, message.ownerid.high >>> 0).toNumber(true) : message.ownerid;
            return object;
        };

        /**
         * Converts this BT_GameStart to JSON.
         * @function toJSON
         * @memberof msg.BT_GameStart
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        BT_GameStart.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return BT_GameStart;
    })();

    msg.BT_GameEnd = (function() {

        /**
         * Properties of a BT_GameEnd.
         * @memberof msg
         * @interface IBT_GameEnd
         * @property {number|Long|null} [roomid] BT_GameEnd roomid
         * @property {number|Long|null} [ownerid] BT_GameEnd ownerid
         * @property {string|null} [reason] BT_GameEnd reason
         * @property {msg.ISerialize|null} [bin] BT_GameEnd bin
         */

        /**
         * Constructs a new BT_GameEnd.
         * @memberof msg
         * @classdesc Represents a BT_GameEnd.
         * @implements IBT_GameEnd
         * @constructor
         * @param {msg.IBT_GameEnd=} [properties] Properties to set
         */
        function BT_GameEnd(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * BT_GameEnd roomid.
         * @member {number|Long} roomid
         * @memberof msg.BT_GameEnd
         * @instance
         */
        BT_GameEnd.prototype.roomid = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * BT_GameEnd ownerid.
         * @member {number|Long} ownerid
         * @memberof msg.BT_GameEnd
         * @instance
         */
        BT_GameEnd.prototype.ownerid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * BT_GameEnd reason.
         * @member {string} reason
         * @memberof msg.BT_GameEnd
         * @instance
         */
        BT_GameEnd.prototype.reason = "";

        /**
         * BT_GameEnd bin.
         * @member {msg.ISerialize|null|undefined} bin
         * @memberof msg.BT_GameEnd
         * @instance
         */
        BT_GameEnd.prototype.bin = null;

        /**
         * Creates a new BT_GameEnd instance using the specified properties.
         * @function create
         * @memberof msg.BT_GameEnd
         * @static
         * @param {msg.IBT_GameEnd=} [properties] Properties to set
         * @returns {msg.BT_GameEnd} BT_GameEnd instance
         */
        BT_GameEnd.create = function create(properties) {
            return new BT_GameEnd(properties);
        };

        /**
         * Encodes the specified BT_GameEnd message. Does not implicitly {@link msg.BT_GameEnd.verify|verify} messages.
         * @function encode
         * @memberof msg.BT_GameEnd
         * @static
         * @param {msg.IBT_GameEnd} message BT_GameEnd message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        BT_GameEnd.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.roomid != null && message.hasOwnProperty("roomid"))
                writer.uint32(/* id 1, wireType 0 =*/8).int64(message.roomid);
            if (message.ownerid != null && message.hasOwnProperty("ownerid"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.ownerid);
            if (message.reason != null && message.hasOwnProperty("reason"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.reason);
            if (message.bin != null && message.hasOwnProperty("bin"))
                $root.msg.Serialize.encode(message.bin, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified BT_GameEnd message, length delimited. Does not implicitly {@link msg.BT_GameEnd.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.BT_GameEnd
         * @static
         * @param {msg.IBT_GameEnd} message BT_GameEnd message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        BT_GameEnd.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a BT_GameEnd message from the specified reader or buffer.
         * @function decode
         * @memberof msg.BT_GameEnd
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.BT_GameEnd} BT_GameEnd
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        BT_GameEnd.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.BT_GameEnd();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.roomid = reader.int64();
                    break;
                case 2:
                    message.ownerid = reader.uint64();
                    break;
                case 3:
                    message.reason = reader.string();
                    break;
                case 4:
                    message.bin = $root.msg.Serialize.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a BT_GameEnd message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.BT_GameEnd
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.BT_GameEnd} BT_GameEnd
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        BT_GameEnd.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a BT_GameEnd message.
         * @function verify
         * @memberof msg.BT_GameEnd
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        BT_GameEnd.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.roomid != null && message.hasOwnProperty("roomid"))
                if (!$util.isInteger(message.roomid) && !(message.roomid && $util.isInteger(message.roomid.low) && $util.isInteger(message.roomid.high)))
                    return "roomid: integer|Long expected";
            if (message.ownerid != null && message.hasOwnProperty("ownerid"))
                if (!$util.isInteger(message.ownerid) && !(message.ownerid && $util.isInteger(message.ownerid.low) && $util.isInteger(message.ownerid.high)))
                    return "ownerid: integer|Long expected";
            if (message.reason != null && message.hasOwnProperty("reason"))
                if (!$util.isString(message.reason))
                    return "reason: string expected";
            if (message.bin != null && message.hasOwnProperty("bin")) {
                var error = $root.msg.Serialize.verify(message.bin);
                if (error)
                    return "bin." + error;
            }
            return null;
        };

        /**
         * Creates a BT_GameEnd message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.BT_GameEnd
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.BT_GameEnd} BT_GameEnd
         */
        BT_GameEnd.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.BT_GameEnd)
                return object;
            var message = new $root.msg.BT_GameEnd();
            if (object.roomid != null)
                if ($util.Long)
                    (message.roomid = $util.Long.fromValue(object.roomid)).unsigned = false;
                else if (typeof object.roomid === "string")
                    message.roomid = parseInt(object.roomid, 10);
                else if (typeof object.roomid === "number")
                    message.roomid = object.roomid;
                else if (typeof object.roomid === "object")
                    message.roomid = new $util.LongBits(object.roomid.low >>> 0, object.roomid.high >>> 0).toNumber();
            if (object.ownerid != null)
                if ($util.Long)
                    (message.ownerid = $util.Long.fromValue(object.ownerid)).unsigned = true;
                else if (typeof object.ownerid === "string")
                    message.ownerid = parseInt(object.ownerid, 10);
                else if (typeof object.ownerid === "number")
                    message.ownerid = object.ownerid;
                else if (typeof object.ownerid === "object")
                    message.ownerid = new $util.LongBits(object.ownerid.low >>> 0, object.ownerid.high >>> 0).toNumber(true);
            if (object.reason != null)
                message.reason = String(object.reason);
            if (object.bin != null) {
                if (typeof object.bin !== "object")
                    throw TypeError(".msg.BT_GameEnd.bin: object expected");
                message.bin = $root.msg.Serialize.fromObject(object.bin);
            }
            return message;
        };

        /**
         * Creates a plain object from a BT_GameEnd message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.BT_GameEnd
         * @static
         * @param {msg.BT_GameEnd} message BT_GameEnd
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        BT_GameEnd.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.roomid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.roomid = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.ownerid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.ownerid = options.longs === String ? "0" : 0;
                object.reason = "";
                object.bin = null;
            }
            if (message.roomid != null && message.hasOwnProperty("roomid"))
                if (typeof message.roomid === "number")
                    object.roomid = options.longs === String ? String(message.roomid) : message.roomid;
                else
                    object.roomid = options.longs === String ? $util.Long.prototype.toString.call(message.roomid) : options.longs === Number ? new $util.LongBits(message.roomid.low >>> 0, message.roomid.high >>> 0).toNumber() : message.roomid;
            if (message.ownerid != null && message.hasOwnProperty("ownerid"))
                if (typeof message.ownerid === "number")
                    object.ownerid = options.longs === String ? String(message.ownerid) : message.ownerid;
                else
                    object.ownerid = options.longs === String ? $util.Long.prototype.toString.call(message.ownerid) : options.longs === Number ? new $util.LongBits(message.ownerid.low >>> 0, message.ownerid.high >>> 0).toNumber(true) : message.ownerid;
            if (message.reason != null && message.hasOwnProperty("reason"))
                object.reason = message.reason;
            if (message.bin != null && message.hasOwnProperty("bin"))
                object.bin = $root.msg.Serialize.toObject(message.bin, options);
            return object;
        };

        /**
         * Converts this BT_GameEnd to JSON.
         * @function toJSON
         * @memberof msg.BT_GameEnd
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        BT_GameEnd.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return BT_GameEnd;
    })();

    msg.BT_GameOver = (function() {

        /**
         * Properties of a BT_GameOver.
         * @memberof msg
         * @interface IBT_GameOver
         * @property {number|Long|null} [roomid] BT_GameOver roomid
         */

        /**
         * Constructs a new BT_GameOver.
         * @memberof msg
         * @classdesc Represents a BT_GameOver.
         * @implements IBT_GameOver
         * @constructor
         * @param {msg.IBT_GameOver=} [properties] Properties to set
         */
        function BT_GameOver(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * BT_GameOver roomid.
         * @member {number|Long} roomid
         * @memberof msg.BT_GameOver
         * @instance
         */
        BT_GameOver.prototype.roomid = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * Creates a new BT_GameOver instance using the specified properties.
         * @function create
         * @memberof msg.BT_GameOver
         * @static
         * @param {msg.IBT_GameOver=} [properties] Properties to set
         * @returns {msg.BT_GameOver} BT_GameOver instance
         */
        BT_GameOver.create = function create(properties) {
            return new BT_GameOver(properties);
        };

        /**
         * Encodes the specified BT_GameOver message. Does not implicitly {@link msg.BT_GameOver.verify|verify} messages.
         * @function encode
         * @memberof msg.BT_GameOver
         * @static
         * @param {msg.IBT_GameOver} message BT_GameOver message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        BT_GameOver.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.roomid != null && message.hasOwnProperty("roomid"))
                writer.uint32(/* id 1, wireType 0 =*/8).int64(message.roomid);
            return writer;
        };

        /**
         * Encodes the specified BT_GameOver message, length delimited. Does not implicitly {@link msg.BT_GameOver.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.BT_GameOver
         * @static
         * @param {msg.IBT_GameOver} message BT_GameOver message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        BT_GameOver.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a BT_GameOver message from the specified reader or buffer.
         * @function decode
         * @memberof msg.BT_GameOver
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.BT_GameOver} BT_GameOver
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        BT_GameOver.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.BT_GameOver();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.roomid = reader.int64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a BT_GameOver message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.BT_GameOver
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.BT_GameOver} BT_GameOver
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        BT_GameOver.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a BT_GameOver message.
         * @function verify
         * @memberof msg.BT_GameOver
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        BT_GameOver.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.roomid != null && message.hasOwnProperty("roomid"))
                if (!$util.isInteger(message.roomid) && !(message.roomid && $util.isInteger(message.roomid.low) && $util.isInteger(message.roomid.high)))
                    return "roomid: integer|Long expected";
            return null;
        };

        /**
         * Creates a BT_GameOver message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.BT_GameOver
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.BT_GameOver} BT_GameOver
         */
        BT_GameOver.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.BT_GameOver)
                return object;
            var message = new $root.msg.BT_GameOver();
            if (object.roomid != null)
                if ($util.Long)
                    (message.roomid = $util.Long.fromValue(object.roomid)).unsigned = false;
                else if (typeof object.roomid === "string")
                    message.roomid = parseInt(object.roomid, 10);
                else if (typeof object.roomid === "number")
                    message.roomid = object.roomid;
                else if (typeof object.roomid === "object")
                    message.roomid = new $util.LongBits(object.roomid.low >>> 0, object.roomid.high >>> 0).toNumber();
            return message;
        };

        /**
         * Creates a plain object from a BT_GameOver message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.BT_GameOver
         * @static
         * @param {msg.BT_GameOver} message BT_GameOver
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        BT_GameOver.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.roomid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.roomid = options.longs === String ? "0" : 0;
            if (message.roomid != null && message.hasOwnProperty("roomid"))
                if (typeof message.roomid === "number")
                    object.roomid = options.longs === String ? String(message.roomid) : message.roomid;
                else
                    object.roomid = options.longs === String ? $util.Long.prototype.toString.call(message.roomid) : options.longs === Number ? new $util.LongBits(message.roomid.low >>> 0, message.roomid.high >>> 0).toNumber() : message.roomid;
            return object;
        };

        /**
         * Converts this BT_GameOver to JSON.
         * @function toJSON
         * @memberof msg.BT_GameOver
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        BT_GameOver.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return BT_GameOver;
    })();

    msg.BT_ReqQuitGameRoom = (function() {

        /**
         * Properties of a BT_ReqQuitGameRoom.
         * @memberof msg
         * @interface IBT_ReqQuitGameRoom
         * @property {number|Long|null} [roomid] BT_ReqQuitGameRoom roomid
         * @property {number|Long|null} [userid] BT_ReqQuitGameRoom userid
         */

        /**
         * Constructs a new BT_ReqQuitGameRoom.
         * @memberof msg
         * @classdesc Represents a BT_ReqQuitGameRoom.
         * @implements IBT_ReqQuitGameRoom
         * @constructor
         * @param {msg.IBT_ReqQuitGameRoom=} [properties] Properties to set
         */
        function BT_ReqQuitGameRoom(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * BT_ReqQuitGameRoom roomid.
         * @member {number|Long} roomid
         * @memberof msg.BT_ReqQuitGameRoom
         * @instance
         */
        BT_ReqQuitGameRoom.prototype.roomid = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * BT_ReqQuitGameRoom userid.
         * @member {number|Long} userid
         * @memberof msg.BT_ReqQuitGameRoom
         * @instance
         */
        BT_ReqQuitGameRoom.prototype.userid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * Creates a new BT_ReqQuitGameRoom instance using the specified properties.
         * @function create
         * @memberof msg.BT_ReqQuitGameRoom
         * @static
         * @param {msg.IBT_ReqQuitGameRoom=} [properties] Properties to set
         * @returns {msg.BT_ReqQuitGameRoom} BT_ReqQuitGameRoom instance
         */
        BT_ReqQuitGameRoom.create = function create(properties) {
            return new BT_ReqQuitGameRoom(properties);
        };

        /**
         * Encodes the specified BT_ReqQuitGameRoom message. Does not implicitly {@link msg.BT_ReqQuitGameRoom.verify|verify} messages.
         * @function encode
         * @memberof msg.BT_ReqQuitGameRoom
         * @static
         * @param {msg.IBT_ReqQuitGameRoom} message BT_ReqQuitGameRoom message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        BT_ReqQuitGameRoom.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.roomid != null && message.hasOwnProperty("roomid"))
                writer.uint32(/* id 1, wireType 0 =*/8).int64(message.roomid);
            if (message.userid != null && message.hasOwnProperty("userid"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.userid);
            return writer;
        };

        /**
         * Encodes the specified BT_ReqQuitGameRoom message, length delimited. Does not implicitly {@link msg.BT_ReqQuitGameRoom.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.BT_ReqQuitGameRoom
         * @static
         * @param {msg.IBT_ReqQuitGameRoom} message BT_ReqQuitGameRoom message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        BT_ReqQuitGameRoom.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a BT_ReqQuitGameRoom message from the specified reader or buffer.
         * @function decode
         * @memberof msg.BT_ReqQuitGameRoom
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.BT_ReqQuitGameRoom} BT_ReqQuitGameRoom
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        BT_ReqQuitGameRoom.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.BT_ReqQuitGameRoom();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.roomid = reader.int64();
                    break;
                case 2:
                    message.userid = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a BT_ReqQuitGameRoom message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.BT_ReqQuitGameRoom
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.BT_ReqQuitGameRoom} BT_ReqQuitGameRoom
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        BT_ReqQuitGameRoom.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a BT_ReqQuitGameRoom message.
         * @function verify
         * @memberof msg.BT_ReqQuitGameRoom
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        BT_ReqQuitGameRoom.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.roomid != null && message.hasOwnProperty("roomid"))
                if (!$util.isInteger(message.roomid) && !(message.roomid && $util.isInteger(message.roomid.low) && $util.isInteger(message.roomid.high)))
                    return "roomid: integer|Long expected";
            if (message.userid != null && message.hasOwnProperty("userid"))
                if (!$util.isInteger(message.userid) && !(message.userid && $util.isInteger(message.userid.low) && $util.isInteger(message.userid.high)))
                    return "userid: integer|Long expected";
            return null;
        };

        /**
         * Creates a BT_ReqQuitGameRoom message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.BT_ReqQuitGameRoom
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.BT_ReqQuitGameRoom} BT_ReqQuitGameRoom
         */
        BT_ReqQuitGameRoom.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.BT_ReqQuitGameRoom)
                return object;
            var message = new $root.msg.BT_ReqQuitGameRoom();
            if (object.roomid != null)
                if ($util.Long)
                    (message.roomid = $util.Long.fromValue(object.roomid)).unsigned = false;
                else if (typeof object.roomid === "string")
                    message.roomid = parseInt(object.roomid, 10);
                else if (typeof object.roomid === "number")
                    message.roomid = object.roomid;
                else if (typeof object.roomid === "object")
                    message.roomid = new $util.LongBits(object.roomid.low >>> 0, object.roomid.high >>> 0).toNumber();
            if (object.userid != null)
                if ($util.Long)
                    (message.userid = $util.Long.fromValue(object.userid)).unsigned = true;
                else if (typeof object.userid === "string")
                    message.userid = parseInt(object.userid, 10);
                else if (typeof object.userid === "number")
                    message.userid = object.userid;
                else if (typeof object.userid === "object")
                    message.userid = new $util.LongBits(object.userid.low >>> 0, object.userid.high >>> 0).toNumber(true);
            return message;
        };

        /**
         * Creates a plain object from a BT_ReqQuitGameRoom message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.BT_ReqQuitGameRoom
         * @static
         * @param {msg.BT_ReqQuitGameRoom} message BT_ReqQuitGameRoom
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        BT_ReqQuitGameRoom.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.roomid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.roomid = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.userid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.userid = options.longs === String ? "0" : 0;
            }
            if (message.roomid != null && message.hasOwnProperty("roomid"))
                if (typeof message.roomid === "number")
                    object.roomid = options.longs === String ? String(message.roomid) : message.roomid;
                else
                    object.roomid = options.longs === String ? $util.Long.prototype.toString.call(message.roomid) : options.longs === Number ? new $util.LongBits(message.roomid.low >>> 0, message.roomid.high >>> 0).toNumber() : message.roomid;
            if (message.userid != null && message.hasOwnProperty("userid"))
                if (typeof message.userid === "number")
                    object.userid = options.longs === String ? String(message.userid) : message.userid;
                else
                    object.userid = options.longs === String ? $util.Long.prototype.toString.call(message.userid) : options.longs === Number ? new $util.LongBits(message.userid.low >>> 0, message.userid.high >>> 0).toNumber(true) : message.userid;
            return object;
        };

        /**
         * Converts this BT_ReqQuitGameRoom to JSON.
         * @function toJSON
         * @memberof msg.BT_ReqQuitGameRoom
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        BT_ReqQuitGameRoom.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return BT_ReqQuitGameRoom;
    })();

    msg.BT_PickItem = (function() {

        /**
         * Properties of a BT_PickItem.
         * @memberof msg
         * @interface IBT_PickItem
         * @property {number|Long|null} [userid] BT_PickItem userid
         * @property {msg.IGridItem|null} [item] BT_PickItem item
         */

        /**
         * Constructs a new BT_PickItem.
         * @memberof msg
         * @classdesc Represents a BT_PickItem.
         * @implements IBT_PickItem
         * @constructor
         * @param {msg.IBT_PickItem=} [properties] Properties to set
         */
        function BT_PickItem(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * BT_PickItem userid.
         * @member {number|Long} userid
         * @memberof msg.BT_PickItem
         * @instance
         */
        BT_PickItem.prototype.userid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * BT_PickItem item.
         * @member {msg.IGridItem|null|undefined} item
         * @memberof msg.BT_PickItem
         * @instance
         */
        BT_PickItem.prototype.item = null;

        /**
         * Creates a new BT_PickItem instance using the specified properties.
         * @function create
         * @memberof msg.BT_PickItem
         * @static
         * @param {msg.IBT_PickItem=} [properties] Properties to set
         * @returns {msg.BT_PickItem} BT_PickItem instance
         */
        BT_PickItem.create = function create(properties) {
            return new BT_PickItem(properties);
        };

        /**
         * Encodes the specified BT_PickItem message. Does not implicitly {@link msg.BT_PickItem.verify|verify} messages.
         * @function encode
         * @memberof msg.BT_PickItem
         * @static
         * @param {msg.IBT_PickItem} message BT_PickItem message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        BT_PickItem.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.userid != null && message.hasOwnProperty("userid"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.userid);
            if (message.item != null && message.hasOwnProperty("item"))
                $root.msg.GridItem.encode(message.item, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified BT_PickItem message, length delimited. Does not implicitly {@link msg.BT_PickItem.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.BT_PickItem
         * @static
         * @param {msg.IBT_PickItem} message BT_PickItem message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        BT_PickItem.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a BT_PickItem message from the specified reader or buffer.
         * @function decode
         * @memberof msg.BT_PickItem
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.BT_PickItem} BT_PickItem
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        BT_PickItem.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.BT_PickItem();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.userid = reader.uint64();
                    break;
                case 2:
                    message.item = $root.msg.GridItem.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a BT_PickItem message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.BT_PickItem
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.BT_PickItem} BT_PickItem
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        BT_PickItem.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a BT_PickItem message.
         * @function verify
         * @memberof msg.BT_PickItem
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        BT_PickItem.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.userid != null && message.hasOwnProperty("userid"))
                if (!$util.isInteger(message.userid) && !(message.userid && $util.isInteger(message.userid.low) && $util.isInteger(message.userid.high)))
                    return "userid: integer|Long expected";
            if (message.item != null && message.hasOwnProperty("item")) {
                var error = $root.msg.GridItem.verify(message.item);
                if (error)
                    return "item." + error;
            }
            return null;
        };

        /**
         * Creates a BT_PickItem message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.BT_PickItem
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.BT_PickItem} BT_PickItem
         */
        BT_PickItem.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.BT_PickItem)
                return object;
            var message = new $root.msg.BT_PickItem();
            if (object.userid != null)
                if ($util.Long)
                    (message.userid = $util.Long.fromValue(object.userid)).unsigned = true;
                else if (typeof object.userid === "string")
                    message.userid = parseInt(object.userid, 10);
                else if (typeof object.userid === "number")
                    message.userid = object.userid;
                else if (typeof object.userid === "object")
                    message.userid = new $util.LongBits(object.userid.low >>> 0, object.userid.high >>> 0).toNumber(true);
            if (object.item != null) {
                if (typeof object.item !== "object")
                    throw TypeError(".msg.BT_PickItem.item: object expected");
                message.item = $root.msg.GridItem.fromObject(object.item);
            }
            return message;
        };

        /**
         * Creates a plain object from a BT_PickItem message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.BT_PickItem
         * @static
         * @param {msg.BT_PickItem} message BT_PickItem
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        BT_PickItem.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.userid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.userid = options.longs === String ? "0" : 0;
                object.item = null;
            }
            if (message.userid != null && message.hasOwnProperty("userid"))
                if (typeof message.userid === "number")
                    object.userid = options.longs === String ? String(message.userid) : message.userid;
                else
                    object.userid = options.longs === String ? $util.Long.prototype.toString.call(message.userid) : options.longs === Number ? new $util.LongBits(message.userid.low >>> 0, message.userid.high >>> 0).toNumber(true) : message.userid;
            if (message.item != null && message.hasOwnProperty("item"))
                object.item = $root.msg.GridItem.toObject(message.item, options);
            return object;
        };

        /**
         * Converts this BT_PickItem to JSON.
         * @function toJSON
         * @memberof msg.BT_PickItem
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        BT_PickItem.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return BT_PickItem;
    })();

    msg.BT_UpdateMoney = (function() {

        /**
         * Properties of a BT_UpdateMoney.
         * @memberof msg
         * @interface IBT_UpdateMoney
         * @property {number|Long|null} [userid] BT_UpdateMoney userid
         * @property {number|Long|null} [roomid] BT_UpdateMoney roomid
         * @property {number|Long|null} [money] BT_UpdateMoney money
         */

        /**
         * Constructs a new BT_UpdateMoney.
         * @memberof msg
         * @classdesc Represents a BT_UpdateMoney.
         * @implements IBT_UpdateMoney
         * @constructor
         * @param {msg.IBT_UpdateMoney=} [properties] Properties to set
         */
        function BT_UpdateMoney(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * BT_UpdateMoney userid.
         * @member {number|Long} userid
         * @memberof msg.BT_UpdateMoney
         * @instance
         */
        BT_UpdateMoney.prototype.userid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * BT_UpdateMoney roomid.
         * @member {number|Long} roomid
         * @memberof msg.BT_UpdateMoney
         * @instance
         */
        BT_UpdateMoney.prototype.roomid = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * BT_UpdateMoney money.
         * @member {number|Long} money
         * @memberof msg.BT_UpdateMoney
         * @instance
         */
        BT_UpdateMoney.prototype.money = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * Creates a new BT_UpdateMoney instance using the specified properties.
         * @function create
         * @memberof msg.BT_UpdateMoney
         * @static
         * @param {msg.IBT_UpdateMoney=} [properties] Properties to set
         * @returns {msg.BT_UpdateMoney} BT_UpdateMoney instance
         */
        BT_UpdateMoney.create = function create(properties) {
            return new BT_UpdateMoney(properties);
        };

        /**
         * Encodes the specified BT_UpdateMoney message. Does not implicitly {@link msg.BT_UpdateMoney.verify|verify} messages.
         * @function encode
         * @memberof msg.BT_UpdateMoney
         * @static
         * @param {msg.IBT_UpdateMoney} message BT_UpdateMoney message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        BT_UpdateMoney.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.userid != null && message.hasOwnProperty("userid"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.userid);
            if (message.roomid != null && message.hasOwnProperty("roomid"))
                writer.uint32(/* id 2, wireType 0 =*/16).int64(message.roomid);
            if (message.money != null && message.hasOwnProperty("money"))
                writer.uint32(/* id 3, wireType 0 =*/24).uint64(message.money);
            return writer;
        };

        /**
         * Encodes the specified BT_UpdateMoney message, length delimited. Does not implicitly {@link msg.BT_UpdateMoney.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.BT_UpdateMoney
         * @static
         * @param {msg.IBT_UpdateMoney} message BT_UpdateMoney message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        BT_UpdateMoney.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a BT_UpdateMoney message from the specified reader or buffer.
         * @function decode
         * @memberof msg.BT_UpdateMoney
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.BT_UpdateMoney} BT_UpdateMoney
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        BT_UpdateMoney.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.BT_UpdateMoney();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.userid = reader.uint64();
                    break;
                case 2:
                    message.roomid = reader.int64();
                    break;
                case 3:
                    message.money = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a BT_UpdateMoney message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.BT_UpdateMoney
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.BT_UpdateMoney} BT_UpdateMoney
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        BT_UpdateMoney.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a BT_UpdateMoney message.
         * @function verify
         * @memberof msg.BT_UpdateMoney
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        BT_UpdateMoney.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.userid != null && message.hasOwnProperty("userid"))
                if (!$util.isInteger(message.userid) && !(message.userid && $util.isInteger(message.userid.low) && $util.isInteger(message.userid.high)))
                    return "userid: integer|Long expected";
            if (message.roomid != null && message.hasOwnProperty("roomid"))
                if (!$util.isInteger(message.roomid) && !(message.roomid && $util.isInteger(message.roomid.low) && $util.isInteger(message.roomid.high)))
                    return "roomid: integer|Long expected";
            if (message.money != null && message.hasOwnProperty("money"))
                if (!$util.isInteger(message.money) && !(message.money && $util.isInteger(message.money.low) && $util.isInteger(message.money.high)))
                    return "money: integer|Long expected";
            return null;
        };

        /**
         * Creates a BT_UpdateMoney message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.BT_UpdateMoney
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.BT_UpdateMoney} BT_UpdateMoney
         */
        BT_UpdateMoney.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.BT_UpdateMoney)
                return object;
            var message = new $root.msg.BT_UpdateMoney();
            if (object.userid != null)
                if ($util.Long)
                    (message.userid = $util.Long.fromValue(object.userid)).unsigned = true;
                else if (typeof object.userid === "string")
                    message.userid = parseInt(object.userid, 10);
                else if (typeof object.userid === "number")
                    message.userid = object.userid;
                else if (typeof object.userid === "object")
                    message.userid = new $util.LongBits(object.userid.low >>> 0, object.userid.high >>> 0).toNumber(true);
            if (object.roomid != null)
                if ($util.Long)
                    (message.roomid = $util.Long.fromValue(object.roomid)).unsigned = false;
                else if (typeof object.roomid === "string")
                    message.roomid = parseInt(object.roomid, 10);
                else if (typeof object.roomid === "number")
                    message.roomid = object.roomid;
                else if (typeof object.roomid === "object")
                    message.roomid = new $util.LongBits(object.roomid.low >>> 0, object.roomid.high >>> 0).toNumber();
            if (object.money != null)
                if ($util.Long)
                    (message.money = $util.Long.fromValue(object.money)).unsigned = true;
                else if (typeof object.money === "string")
                    message.money = parseInt(object.money, 10);
                else if (typeof object.money === "number")
                    message.money = object.money;
                else if (typeof object.money === "object")
                    message.money = new $util.LongBits(object.money.low >>> 0, object.money.high >>> 0).toNumber(true);
            return message;
        };

        /**
         * Creates a plain object from a BT_UpdateMoney message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.BT_UpdateMoney
         * @static
         * @param {msg.BT_UpdateMoney} message BT_UpdateMoney
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        BT_UpdateMoney.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.userid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.userid = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.roomid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.roomid = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.money = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.money = options.longs === String ? "0" : 0;
            }
            if (message.userid != null && message.hasOwnProperty("userid"))
                if (typeof message.userid === "number")
                    object.userid = options.longs === String ? String(message.userid) : message.userid;
                else
                    object.userid = options.longs === String ? $util.Long.prototype.toString.call(message.userid) : options.longs === Number ? new $util.LongBits(message.userid.low >>> 0, message.userid.high >>> 0).toNumber(true) : message.userid;
            if (message.roomid != null && message.hasOwnProperty("roomid"))
                if (typeof message.roomid === "number")
                    object.roomid = options.longs === String ? String(message.roomid) : message.roomid;
                else
                    object.roomid = options.longs === String ? $util.Long.prototype.toString.call(message.roomid) : options.longs === Number ? new $util.LongBits(message.roomid.low >>> 0, message.roomid.high >>> 0).toNumber() : message.roomid;
            if (message.money != null && message.hasOwnProperty("money"))
                if (typeof message.money === "number")
                    object.money = options.longs === String ? String(message.money) : message.money;
                else
                    object.money = options.longs === String ? $util.Long.prototype.toString.call(message.money) : options.longs === Number ? new $util.LongBits(message.money.low >>> 0, message.money.high >>> 0).toNumber(true) : message.money;
            return object;
        };

        /**
         * Converts this BT_UpdateMoney to JSON.
         * @function toJSON
         * @memberof msg.BT_UpdateMoney
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        BT_UpdateMoney.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return BT_UpdateMoney;
    })();

    msg.EntityBase = (function() {

        /**
         * Properties of an EntityBase.
         * @memberof msg
         * @interface IEntityBase
         * @property {number|Long|null} [id] EntityBase id
         * @property {string|null} [name] EntityBase name
         * @property {string|null} [face] EntityBase face
         * @property {number|null} [sex] EntityBase sex
         * @property {string|null} [account] EntityBase account
         */

        /**
         * Constructs a new EntityBase.
         * @memberof msg
         * @classdesc Represents an EntityBase.
         * @implements IEntityBase
         * @constructor
         * @param {msg.IEntityBase=} [properties] Properties to set
         */
        function EntityBase(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * EntityBase id.
         * @member {number|Long} id
         * @memberof msg.EntityBase
         * @instance
         */
        EntityBase.prototype.id = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * EntityBase name.
         * @member {string} name
         * @memberof msg.EntityBase
         * @instance
         */
        EntityBase.prototype.name = "";

        /**
         * EntityBase face.
         * @member {string} face
         * @memberof msg.EntityBase
         * @instance
         */
        EntityBase.prototype.face = "";

        /**
         * EntityBase sex.
         * @member {number} sex
         * @memberof msg.EntityBase
         * @instance
         */
        EntityBase.prototype.sex = 0;

        /**
         * EntityBase account.
         * @member {string} account
         * @memberof msg.EntityBase
         * @instance
         */
        EntityBase.prototype.account = "";

        /**
         * Creates a new EntityBase instance using the specified properties.
         * @function create
         * @memberof msg.EntityBase
         * @static
         * @param {msg.IEntityBase=} [properties] Properties to set
         * @returns {msg.EntityBase} EntityBase instance
         */
        EntityBase.create = function create(properties) {
            return new EntityBase(properties);
        };

        /**
         * Encodes the specified EntityBase message. Does not implicitly {@link msg.EntityBase.verify|verify} messages.
         * @function encode
         * @memberof msg.EntityBase
         * @static
         * @param {msg.IEntityBase} message EntityBase message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        EntityBase.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.id != null && message.hasOwnProperty("id"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.id);
            if (message.name != null && message.hasOwnProperty("name"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.name);
            if (message.face != null && message.hasOwnProperty("face"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.face);
            if (message.sex != null && message.hasOwnProperty("sex"))
                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.sex);
            if (message.account != null && message.hasOwnProperty("account"))
                writer.uint32(/* id 5, wireType 2 =*/42).string(message.account);
            return writer;
        };

        /**
         * Encodes the specified EntityBase message, length delimited. Does not implicitly {@link msg.EntityBase.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.EntityBase
         * @static
         * @param {msg.IEntityBase} message EntityBase message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        EntityBase.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes an EntityBase message from the specified reader or buffer.
         * @function decode
         * @memberof msg.EntityBase
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.EntityBase} EntityBase
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        EntityBase.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.EntityBase();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.id = reader.uint64();
                    break;
                case 2:
                    message.name = reader.string();
                    break;
                case 3:
                    message.face = reader.string();
                    break;
                case 4:
                    message.sex = reader.int32();
                    break;
                case 5:
                    message.account = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes an EntityBase message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.EntityBase
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.EntityBase} EntityBase
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        EntityBase.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies an EntityBase message.
         * @function verify
         * @memberof msg.EntityBase
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        EntityBase.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.id != null && message.hasOwnProperty("id"))
                if (!$util.isInteger(message.id) && !(message.id && $util.isInteger(message.id.low) && $util.isInteger(message.id.high)))
                    return "id: integer|Long expected";
            if (message.name != null && message.hasOwnProperty("name"))
                if (!$util.isString(message.name))
                    return "name: string expected";
            if (message.face != null && message.hasOwnProperty("face"))
                if (!$util.isString(message.face))
                    return "face: string expected";
            if (message.sex != null && message.hasOwnProperty("sex"))
                if (!$util.isInteger(message.sex))
                    return "sex: integer expected";
            if (message.account != null && message.hasOwnProperty("account"))
                if (!$util.isString(message.account))
                    return "account: string expected";
            return null;
        };

        /**
         * Creates an EntityBase message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.EntityBase
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.EntityBase} EntityBase
         */
        EntityBase.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.EntityBase)
                return object;
            var message = new $root.msg.EntityBase();
            if (object.id != null)
                if ($util.Long)
                    (message.id = $util.Long.fromValue(object.id)).unsigned = true;
                else if (typeof object.id === "string")
                    message.id = parseInt(object.id, 10);
                else if (typeof object.id === "number")
                    message.id = object.id;
                else if (typeof object.id === "object")
                    message.id = new $util.LongBits(object.id.low >>> 0, object.id.high >>> 0).toNumber(true);
            if (object.name != null)
                message.name = String(object.name);
            if (object.face != null)
                message.face = String(object.face);
            if (object.sex != null)
                message.sex = object.sex | 0;
            if (object.account != null)
                message.account = String(object.account);
            return message;
        };

        /**
         * Creates a plain object from an EntityBase message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.EntityBase
         * @static
         * @param {msg.EntityBase} message EntityBase
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        EntityBase.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.id = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.id = options.longs === String ? "0" : 0;
                object.name = "";
                object.face = "";
                object.sex = 0;
                object.account = "";
            }
            if (message.id != null && message.hasOwnProperty("id"))
                if (typeof message.id === "number")
                    object.id = options.longs === String ? String(message.id) : message.id;
                else
                    object.id = options.longs === String ? $util.Long.prototype.toString.call(message.id) : options.longs === Number ? new $util.LongBits(message.id.low >>> 0, message.id.high >>> 0).toNumber(true) : message.id;
            if (message.name != null && message.hasOwnProperty("name"))
                object.name = message.name;
            if (message.face != null && message.hasOwnProperty("face"))
                object.face = message.face;
            if (message.sex != null && message.hasOwnProperty("sex"))
                object.sex = message.sex;
            if (message.account != null && message.hasOwnProperty("account"))
                object.account = message.account;
            return object;
        };

        /**
         * Converts this EntityBase to JSON.
         * @function toJSON
         * @memberof msg.EntityBase
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        EntityBase.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return EntityBase;
    })();

    msg.SimpleCounter = (function() {

        /**
         * Properties of a SimpleCounter.
         * @memberof msg
         * @interface ISimpleCounter
         * @property {number|null} [freestep] SimpleCounter freestep
         * @property {number|Long|null} [givestep] SimpleCounter givestep
         * @property {number|Long|null} [diamondRoomCost] SimpleCounter diamondRoomCost
         * @property {number|Long|null} [diamondRoomIncome] SimpleCounter diamondRoomIncome
         * @property {number|Long|null} [diamondRoomStep] SimpleCounter diamondRoomStep
         */

        /**
         * Constructs a new SimpleCounter.
         * @memberof msg
         * @classdesc Represents a SimpleCounter.
         * @implements ISimpleCounter
         * @constructor
         * @param {msg.ISimpleCounter=} [properties] Properties to set
         */
        function SimpleCounter(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * SimpleCounter freestep.
         * @member {number} freestep
         * @memberof msg.SimpleCounter
         * @instance
         */
        SimpleCounter.prototype.freestep = 0;

        /**
         * SimpleCounter givestep.
         * @member {number|Long} givestep
         * @memberof msg.SimpleCounter
         * @instance
         */
        SimpleCounter.prototype.givestep = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * SimpleCounter diamondRoomCost.
         * @member {number|Long} diamondRoomCost
         * @memberof msg.SimpleCounter
         * @instance
         */
        SimpleCounter.prototype.diamondRoomCost = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * SimpleCounter diamondRoomIncome.
         * @member {number|Long} diamondRoomIncome
         * @memberof msg.SimpleCounter
         * @instance
         */
        SimpleCounter.prototype.diamondRoomIncome = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * SimpleCounter diamondRoomStep.
         * @member {number|Long} diamondRoomStep
         * @memberof msg.SimpleCounter
         * @instance
         */
        SimpleCounter.prototype.diamondRoomStep = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * Creates a new SimpleCounter instance using the specified properties.
         * @function create
         * @memberof msg.SimpleCounter
         * @static
         * @param {msg.ISimpleCounter=} [properties] Properties to set
         * @returns {msg.SimpleCounter} SimpleCounter instance
         */
        SimpleCounter.create = function create(properties) {
            return new SimpleCounter(properties);
        };

        /**
         * Encodes the specified SimpleCounter message. Does not implicitly {@link msg.SimpleCounter.verify|verify} messages.
         * @function encode
         * @memberof msg.SimpleCounter
         * @static
         * @param {msg.ISimpleCounter} message SimpleCounter message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        SimpleCounter.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.freestep != null && message.hasOwnProperty("freestep"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.freestep);
            if (message.givestep != null && message.hasOwnProperty("givestep"))
                writer.uint32(/* id 2, wireType 0 =*/16).int64(message.givestep);
            if (message.diamondRoomCost != null && message.hasOwnProperty("diamondRoomCost"))
                writer.uint32(/* id 3, wireType 0 =*/24).int64(message.diamondRoomCost);
            if (message.diamondRoomIncome != null && message.hasOwnProperty("diamondRoomIncome"))
                writer.uint32(/* id 4, wireType 0 =*/32).int64(message.diamondRoomIncome);
            if (message.diamondRoomStep != null && message.hasOwnProperty("diamondRoomStep"))
                writer.uint32(/* id 5, wireType 0 =*/40).int64(message.diamondRoomStep);
            return writer;
        };

        /**
         * Encodes the specified SimpleCounter message, length delimited. Does not implicitly {@link msg.SimpleCounter.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.SimpleCounter
         * @static
         * @param {msg.ISimpleCounter} message SimpleCounter message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        SimpleCounter.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a SimpleCounter message from the specified reader or buffer.
         * @function decode
         * @memberof msg.SimpleCounter
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.SimpleCounter} SimpleCounter
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        SimpleCounter.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.SimpleCounter();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.freestep = reader.int32();
                    break;
                case 2:
                    message.givestep = reader.int64();
                    break;
                case 3:
                    message.diamondRoomCost = reader.int64();
                    break;
                case 4:
                    message.diamondRoomIncome = reader.int64();
                    break;
                case 5:
                    message.diamondRoomStep = reader.int64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a SimpleCounter message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.SimpleCounter
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.SimpleCounter} SimpleCounter
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        SimpleCounter.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a SimpleCounter message.
         * @function verify
         * @memberof msg.SimpleCounter
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        SimpleCounter.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.freestep != null && message.hasOwnProperty("freestep"))
                if (!$util.isInteger(message.freestep))
                    return "freestep: integer expected";
            if (message.givestep != null && message.hasOwnProperty("givestep"))
                if (!$util.isInteger(message.givestep) && !(message.givestep && $util.isInteger(message.givestep.low) && $util.isInteger(message.givestep.high)))
                    return "givestep: integer|Long expected";
            if (message.diamondRoomCost != null && message.hasOwnProperty("diamondRoomCost"))
                if (!$util.isInteger(message.diamondRoomCost) && !(message.diamondRoomCost && $util.isInteger(message.diamondRoomCost.low) && $util.isInteger(message.diamondRoomCost.high)))
                    return "diamondRoomCost: integer|Long expected";
            if (message.diamondRoomIncome != null && message.hasOwnProperty("diamondRoomIncome"))
                if (!$util.isInteger(message.diamondRoomIncome) && !(message.diamondRoomIncome && $util.isInteger(message.diamondRoomIncome.low) && $util.isInteger(message.diamondRoomIncome.high)))
                    return "diamondRoomIncome: integer|Long expected";
            if (message.diamondRoomStep != null && message.hasOwnProperty("diamondRoomStep"))
                if (!$util.isInteger(message.diamondRoomStep) && !(message.diamondRoomStep && $util.isInteger(message.diamondRoomStep.low) && $util.isInteger(message.diamondRoomStep.high)))
                    return "diamondRoomStep: integer|Long expected";
            return null;
        };

        /**
         * Creates a SimpleCounter message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.SimpleCounter
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.SimpleCounter} SimpleCounter
         */
        SimpleCounter.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.SimpleCounter)
                return object;
            var message = new $root.msg.SimpleCounter();
            if (object.freestep != null)
                message.freestep = object.freestep | 0;
            if (object.givestep != null)
                if ($util.Long)
                    (message.givestep = $util.Long.fromValue(object.givestep)).unsigned = false;
                else if (typeof object.givestep === "string")
                    message.givestep = parseInt(object.givestep, 10);
                else if (typeof object.givestep === "number")
                    message.givestep = object.givestep;
                else if (typeof object.givestep === "object")
                    message.givestep = new $util.LongBits(object.givestep.low >>> 0, object.givestep.high >>> 0).toNumber();
            if (object.diamondRoomCost != null)
                if ($util.Long)
                    (message.diamondRoomCost = $util.Long.fromValue(object.diamondRoomCost)).unsigned = false;
                else if (typeof object.diamondRoomCost === "string")
                    message.diamondRoomCost = parseInt(object.diamondRoomCost, 10);
                else if (typeof object.diamondRoomCost === "number")
                    message.diamondRoomCost = object.diamondRoomCost;
                else if (typeof object.diamondRoomCost === "object")
                    message.diamondRoomCost = new $util.LongBits(object.diamondRoomCost.low >>> 0, object.diamondRoomCost.high >>> 0).toNumber();
            if (object.diamondRoomIncome != null)
                if ($util.Long)
                    (message.diamondRoomIncome = $util.Long.fromValue(object.diamondRoomIncome)).unsigned = false;
                else if (typeof object.diamondRoomIncome === "string")
                    message.diamondRoomIncome = parseInt(object.diamondRoomIncome, 10);
                else if (typeof object.diamondRoomIncome === "number")
                    message.diamondRoomIncome = object.diamondRoomIncome;
                else if (typeof object.diamondRoomIncome === "object")
                    message.diamondRoomIncome = new $util.LongBits(object.diamondRoomIncome.low >>> 0, object.diamondRoomIncome.high >>> 0).toNumber();
            if (object.diamondRoomStep != null)
                if ($util.Long)
                    (message.diamondRoomStep = $util.Long.fromValue(object.diamondRoomStep)).unsigned = false;
                else if (typeof object.diamondRoomStep === "string")
                    message.diamondRoomStep = parseInt(object.diamondRoomStep, 10);
                else if (typeof object.diamondRoomStep === "number")
                    message.diamondRoomStep = object.diamondRoomStep;
                else if (typeof object.diamondRoomStep === "object")
                    message.diamondRoomStep = new $util.LongBits(object.diamondRoomStep.low >>> 0, object.diamondRoomStep.high >>> 0).toNumber();
            return message;
        };

        /**
         * Creates a plain object from a SimpleCounter message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.SimpleCounter
         * @static
         * @param {msg.SimpleCounter} message SimpleCounter
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        SimpleCounter.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.freestep = 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.givestep = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.givestep = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.diamondRoomCost = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.diamondRoomCost = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.diamondRoomIncome = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.diamondRoomIncome = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.diamondRoomStep = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.diamondRoomStep = options.longs === String ? "0" : 0;
            }
            if (message.freestep != null && message.hasOwnProperty("freestep"))
                object.freestep = message.freestep;
            if (message.givestep != null && message.hasOwnProperty("givestep"))
                if (typeof message.givestep === "number")
                    object.givestep = options.longs === String ? String(message.givestep) : message.givestep;
                else
                    object.givestep = options.longs === String ? $util.Long.prototype.toString.call(message.givestep) : options.longs === Number ? new $util.LongBits(message.givestep.low >>> 0, message.givestep.high >>> 0).toNumber() : message.givestep;
            if (message.diamondRoomCost != null && message.hasOwnProperty("diamondRoomCost"))
                if (typeof message.diamondRoomCost === "number")
                    object.diamondRoomCost = options.longs === String ? String(message.diamondRoomCost) : message.diamondRoomCost;
                else
                    object.diamondRoomCost = options.longs === String ? $util.Long.prototype.toString.call(message.diamondRoomCost) : options.longs === Number ? new $util.LongBits(message.diamondRoomCost.low >>> 0, message.diamondRoomCost.high >>> 0).toNumber() : message.diamondRoomCost;
            if (message.diamondRoomIncome != null && message.hasOwnProperty("diamondRoomIncome"))
                if (typeof message.diamondRoomIncome === "number")
                    object.diamondRoomIncome = options.longs === String ? String(message.diamondRoomIncome) : message.diamondRoomIncome;
                else
                    object.diamondRoomIncome = options.longs === String ? $util.Long.prototype.toString.call(message.diamondRoomIncome) : options.longs === Number ? new $util.LongBits(message.diamondRoomIncome.low >>> 0, message.diamondRoomIncome.high >>> 0).toNumber() : message.diamondRoomIncome;
            if (message.diamondRoomStep != null && message.hasOwnProperty("diamondRoomStep"))
                if (typeof message.diamondRoomStep === "number")
                    object.diamondRoomStep = options.longs === String ? String(message.diamondRoomStep) : message.diamondRoomStep;
                else
                    object.diamondRoomStep = options.longs === String ? $util.Long.prototype.toString.call(message.diamondRoomStep) : options.longs === Number ? new $util.LongBits(message.diamondRoomStep.low >>> 0, message.diamondRoomStep.high >>> 0).toNumber() : message.diamondRoomStep;
            return object;
        };

        /**
         * Converts this SimpleCounter to JSON.
         * @function toJSON
         * @memberof msg.SimpleCounter
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        SimpleCounter.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return SimpleCounter;
    })();

    msg.FreePresentMoney = (function() {

        /**
         * Properties of a FreePresentMoney.
         * @memberof msg
         * @interface IFreePresentMoney
         * @property {number|null} [count] FreePresentMoney count
         * @property {number|Long|null} [tmrecord] FreePresentMoney tmrecord
         */

        /**
         * Constructs a new FreePresentMoney.
         * @memberof msg
         * @classdesc Represents a FreePresentMoney.
         * @implements IFreePresentMoney
         * @constructor
         * @param {msg.IFreePresentMoney=} [properties] Properties to set
         */
        function FreePresentMoney(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * FreePresentMoney count.
         * @member {number} count
         * @memberof msg.FreePresentMoney
         * @instance
         */
        FreePresentMoney.prototype.count = 0;

        /**
         * FreePresentMoney tmrecord.
         * @member {number|Long} tmrecord
         * @memberof msg.FreePresentMoney
         * @instance
         */
        FreePresentMoney.prototype.tmrecord = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * Creates a new FreePresentMoney instance using the specified properties.
         * @function create
         * @memberof msg.FreePresentMoney
         * @static
         * @param {msg.IFreePresentMoney=} [properties] Properties to set
         * @returns {msg.FreePresentMoney} FreePresentMoney instance
         */
        FreePresentMoney.create = function create(properties) {
            return new FreePresentMoney(properties);
        };

        /**
         * Encodes the specified FreePresentMoney message. Does not implicitly {@link msg.FreePresentMoney.verify|verify} messages.
         * @function encode
         * @memberof msg.FreePresentMoney
         * @static
         * @param {msg.IFreePresentMoney} message FreePresentMoney message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        FreePresentMoney.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.count != null && message.hasOwnProperty("count"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.count);
            if (message.tmrecord != null && message.hasOwnProperty("tmrecord"))
                writer.uint32(/* id 2, wireType 0 =*/16).int64(message.tmrecord);
            return writer;
        };

        /**
         * Encodes the specified FreePresentMoney message, length delimited. Does not implicitly {@link msg.FreePresentMoney.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.FreePresentMoney
         * @static
         * @param {msg.IFreePresentMoney} message FreePresentMoney message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        FreePresentMoney.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a FreePresentMoney message from the specified reader or buffer.
         * @function decode
         * @memberof msg.FreePresentMoney
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.FreePresentMoney} FreePresentMoney
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        FreePresentMoney.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.FreePresentMoney();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.count = reader.int32();
                    break;
                case 2:
                    message.tmrecord = reader.int64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a FreePresentMoney message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.FreePresentMoney
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.FreePresentMoney} FreePresentMoney
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        FreePresentMoney.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a FreePresentMoney message.
         * @function verify
         * @memberof msg.FreePresentMoney
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        FreePresentMoney.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.count != null && message.hasOwnProperty("count"))
                if (!$util.isInteger(message.count))
                    return "count: integer expected";
            if (message.tmrecord != null && message.hasOwnProperty("tmrecord"))
                if (!$util.isInteger(message.tmrecord) && !(message.tmrecord && $util.isInteger(message.tmrecord.low) && $util.isInteger(message.tmrecord.high)))
                    return "tmrecord: integer|Long expected";
            return null;
        };

        /**
         * Creates a FreePresentMoney message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.FreePresentMoney
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.FreePresentMoney} FreePresentMoney
         */
        FreePresentMoney.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.FreePresentMoney)
                return object;
            var message = new $root.msg.FreePresentMoney();
            if (object.count != null)
                message.count = object.count | 0;
            if (object.tmrecord != null)
                if ($util.Long)
                    (message.tmrecord = $util.Long.fromValue(object.tmrecord)).unsigned = false;
                else if (typeof object.tmrecord === "string")
                    message.tmrecord = parseInt(object.tmrecord, 10);
                else if (typeof object.tmrecord === "number")
                    message.tmrecord = object.tmrecord;
                else if (typeof object.tmrecord === "object")
                    message.tmrecord = new $util.LongBits(object.tmrecord.low >>> 0, object.tmrecord.high >>> 0).toNumber();
            return message;
        };

        /**
         * Creates a plain object from a FreePresentMoney message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.FreePresentMoney
         * @static
         * @param {msg.FreePresentMoney} message FreePresentMoney
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        FreePresentMoney.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.count = 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.tmrecord = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.tmrecord = options.longs === String ? "0" : 0;
            }
            if (message.count != null && message.hasOwnProperty("count"))
                object.count = message.count;
            if (message.tmrecord != null && message.hasOwnProperty("tmrecord"))
                if (typeof message.tmrecord === "number")
                    object.tmrecord = options.longs === String ? String(message.tmrecord) : message.tmrecord;
                else
                    object.tmrecord = options.longs === String ? $util.Long.prototype.toString.call(message.tmrecord) : options.longs === Number ? new $util.LongBits(message.tmrecord.low >>> 0, message.tmrecord.high >>> 0).toNumber() : message.tmrecord;
            return object;
        };

        /**
         * Converts this FreePresentMoney to JSON.
         * @function toJSON
         * @memberof msg.FreePresentMoney
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        FreePresentMoney.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return FreePresentMoney;
    })();

    msg.UserWechat = (function() {

        /**
         * Properties of a UserWechat.
         * @memberof msg
         * @interface IUserWechat
         * @property {string|null} [openid] UserWechat openid
         */

        /**
         * Constructs a new UserWechat.
         * @memberof msg
         * @classdesc Represents a UserWechat.
         * @implements IUserWechat
         * @constructor
         * @param {msg.IUserWechat=} [properties] Properties to set
         */
        function UserWechat(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * UserWechat openid.
         * @member {string} openid
         * @memberof msg.UserWechat
         * @instance
         */
        UserWechat.prototype.openid = "";

        /**
         * Creates a new UserWechat instance using the specified properties.
         * @function create
         * @memberof msg.UserWechat
         * @static
         * @param {msg.IUserWechat=} [properties] Properties to set
         * @returns {msg.UserWechat} UserWechat instance
         */
        UserWechat.create = function create(properties) {
            return new UserWechat(properties);
        };

        /**
         * Encodes the specified UserWechat message. Does not implicitly {@link msg.UserWechat.verify|verify} messages.
         * @function encode
         * @memberof msg.UserWechat
         * @static
         * @param {msg.IUserWechat} message UserWechat message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        UserWechat.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.openid != null && message.hasOwnProperty("openid"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.openid);
            return writer;
        };

        /**
         * Encodes the specified UserWechat message, length delimited. Does not implicitly {@link msg.UserWechat.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.UserWechat
         * @static
         * @param {msg.IUserWechat} message UserWechat message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        UserWechat.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a UserWechat message from the specified reader or buffer.
         * @function decode
         * @memberof msg.UserWechat
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.UserWechat} UserWechat
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        UserWechat.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.UserWechat();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.openid = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a UserWechat message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.UserWechat
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.UserWechat} UserWechat
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        UserWechat.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a UserWechat message.
         * @function verify
         * @memberof msg.UserWechat
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        UserWechat.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.openid != null && message.hasOwnProperty("openid"))
                if (!$util.isString(message.openid))
                    return "openid: string expected";
            return null;
        };

        /**
         * Creates a UserWechat message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.UserWechat
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.UserWechat} UserWechat
         */
        UserWechat.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.UserWechat)
                return object;
            var message = new $root.msg.UserWechat();
            if (object.openid != null)
                message.openid = String(object.openid);
            return message;
        };

        /**
         * Creates a plain object from a UserWechat message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.UserWechat
         * @static
         * @param {msg.UserWechat} message UserWechat
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        UserWechat.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.openid = "";
            if (message.openid != null && message.hasOwnProperty("openid"))
                object.openid = message.openid;
            return object;
        };

        /**
         * Converts this UserWechat to JSON.
         * @function toJSON
         * @memberof msg.UserWechat
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        UserWechat.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return UserWechat;
    })();

    msg.UserTask = (function() {

        /**
         * Properties of a UserTask.
         * @memberof msg
         * @interface IUserTask
         * @property {Array.<msg.ITaskData>|null} [tasks] UserTask tasks
         */

        /**
         * Constructs a new UserTask.
         * @memberof msg
         * @classdesc Represents a UserTask.
         * @implements IUserTask
         * @constructor
         * @param {msg.IUserTask=} [properties] Properties to set
         */
        function UserTask(properties) {
            this.tasks = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * UserTask tasks.
         * @member {Array.<msg.ITaskData>} tasks
         * @memberof msg.UserTask
         * @instance
         */
        UserTask.prototype.tasks = $util.emptyArray;

        /**
         * Creates a new UserTask instance using the specified properties.
         * @function create
         * @memberof msg.UserTask
         * @static
         * @param {msg.IUserTask=} [properties] Properties to set
         * @returns {msg.UserTask} UserTask instance
         */
        UserTask.create = function create(properties) {
            return new UserTask(properties);
        };

        /**
         * Encodes the specified UserTask message. Does not implicitly {@link msg.UserTask.verify|verify} messages.
         * @function encode
         * @memberof msg.UserTask
         * @static
         * @param {msg.IUserTask} message UserTask message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        UserTask.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.tasks != null && message.tasks.length)
                for (var i = 0; i < message.tasks.length; ++i)
                    $root.msg.TaskData.encode(message.tasks[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified UserTask message, length delimited. Does not implicitly {@link msg.UserTask.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.UserTask
         * @static
         * @param {msg.IUserTask} message UserTask message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        UserTask.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a UserTask message from the specified reader or buffer.
         * @function decode
         * @memberof msg.UserTask
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.UserTask} UserTask
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        UserTask.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.UserTask();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.tasks && message.tasks.length))
                        message.tasks = [];
                    message.tasks.push($root.msg.TaskData.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a UserTask message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.UserTask
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.UserTask} UserTask
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        UserTask.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a UserTask message.
         * @function verify
         * @memberof msg.UserTask
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        UserTask.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.tasks != null && message.hasOwnProperty("tasks")) {
                if (!Array.isArray(message.tasks))
                    return "tasks: array expected";
                for (var i = 0; i < message.tasks.length; ++i) {
                    var error = $root.msg.TaskData.verify(message.tasks[i]);
                    if (error)
                        return "tasks." + error;
                }
            }
            return null;
        };

        /**
         * Creates a UserTask message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.UserTask
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.UserTask} UserTask
         */
        UserTask.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.UserTask)
                return object;
            var message = new $root.msg.UserTask();
            if (object.tasks) {
                if (!Array.isArray(object.tasks))
                    throw TypeError(".msg.UserTask.tasks: array expected");
                message.tasks = [];
                for (var i = 0; i < object.tasks.length; ++i) {
                    if (typeof object.tasks[i] !== "object")
                        throw TypeError(".msg.UserTask.tasks: object expected");
                    message.tasks[i] = $root.msg.TaskData.fromObject(object.tasks[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a UserTask message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.UserTask
         * @static
         * @param {msg.UserTask} message UserTask
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        UserTask.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.tasks = [];
            if (message.tasks && message.tasks.length) {
                object.tasks = [];
                for (var j = 0; j < message.tasks.length; ++j)
                    object.tasks[j] = $root.msg.TaskData.toObject(message.tasks[j], options);
            }
            return object;
        };

        /**
         * Converts this UserTask to JSON.
         * @function toJSON
         * @memberof msg.UserTask
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        UserTask.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return UserTask;
    })();

    msg.TaskData = (function() {

        /**
         * Properties of a TaskData.
         * @memberof msg
         * @interface ITaskData
         * @property {number|null} [id] TaskData id
         * @property {number|null} [progress] TaskData progress
         * @property {number|null} [completed] TaskData completed
         */

        /**
         * Constructs a new TaskData.
         * @memberof msg
         * @classdesc Represents a TaskData.
         * @implements ITaskData
         * @constructor
         * @param {msg.ITaskData=} [properties] Properties to set
         */
        function TaskData(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * TaskData id.
         * @member {number} id
         * @memberof msg.TaskData
         * @instance
         */
        TaskData.prototype.id = 0;

        /**
         * TaskData progress.
         * @member {number} progress
         * @memberof msg.TaskData
         * @instance
         */
        TaskData.prototype.progress = 0;

        /**
         * TaskData completed.
         * @member {number} completed
         * @memberof msg.TaskData
         * @instance
         */
        TaskData.prototype.completed = 0;

        /**
         * Creates a new TaskData instance using the specified properties.
         * @function create
         * @memberof msg.TaskData
         * @static
         * @param {msg.ITaskData=} [properties] Properties to set
         * @returns {msg.TaskData} TaskData instance
         */
        TaskData.create = function create(properties) {
            return new TaskData(properties);
        };

        /**
         * Encodes the specified TaskData message. Does not implicitly {@link msg.TaskData.verify|verify} messages.
         * @function encode
         * @memberof msg.TaskData
         * @static
         * @param {msg.ITaskData} message TaskData message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        TaskData.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.id != null && message.hasOwnProperty("id"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
            if (message.progress != null && message.hasOwnProperty("progress"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.progress);
            if (message.completed != null && message.hasOwnProperty("completed"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.completed);
            return writer;
        };

        /**
         * Encodes the specified TaskData message, length delimited. Does not implicitly {@link msg.TaskData.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.TaskData
         * @static
         * @param {msg.ITaskData} message TaskData message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        TaskData.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a TaskData message from the specified reader or buffer.
         * @function decode
         * @memberof msg.TaskData
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.TaskData} TaskData
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        TaskData.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.TaskData();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.id = reader.int32();
                    break;
                case 2:
                    message.progress = reader.int32();
                    break;
                case 3:
                    message.completed = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a TaskData message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.TaskData
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.TaskData} TaskData
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        TaskData.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a TaskData message.
         * @function verify
         * @memberof msg.TaskData
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        TaskData.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.id != null && message.hasOwnProperty("id"))
                if (!$util.isInteger(message.id))
                    return "id: integer expected";
            if (message.progress != null && message.hasOwnProperty("progress"))
                if (!$util.isInteger(message.progress))
                    return "progress: integer expected";
            if (message.completed != null && message.hasOwnProperty("completed"))
                if (!$util.isInteger(message.completed))
                    return "completed: integer expected";
            return null;
        };

        /**
         * Creates a TaskData message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.TaskData
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.TaskData} TaskData
         */
        TaskData.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.TaskData)
                return object;
            var message = new $root.msg.TaskData();
            if (object.id != null)
                message.id = object.id | 0;
            if (object.progress != null)
                message.progress = object.progress | 0;
            if (object.completed != null)
                message.completed = object.completed | 0;
            return message;
        };

        /**
         * Creates a plain object from a TaskData message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.TaskData
         * @static
         * @param {msg.TaskData} message TaskData
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        TaskData.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.id = 0;
                object.progress = 0;
                object.completed = 0;
            }
            if (message.id != null && message.hasOwnProperty("id"))
                object.id = message.id;
            if (message.progress != null && message.hasOwnProperty("progress"))
                object.progress = message.progress;
            if (message.completed != null && message.hasOwnProperty("completed"))
                object.completed = message.completed;
            return object;
        };

        /**
         * Converts this TaskData to JSON.
         * @function toJSON
         * @memberof msg.TaskData
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        TaskData.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return TaskData;
    })();

    msg.UserBase = (function() {

        /**
         * Properties of a UserBase.
         * @memberof msg
         * @interface IUserBase
         * @property {number|null} [level] UserBase level
         * @property {number|null} [exp] UserBase exp
         * @property {number|null} [money] UserBase money
         * @property {number|null} [coupon] UserBase coupon
         * @property {number|null} [yuanbao] UserBase yuanbao
         * @property {number|Long|null} [tmlogin] UserBase tmlogin
         * @property {number|Long|null} [tmlogout] UserBase tmlogout
         * @property {number|null} [continuelogin] UserBase continuelogin
         * @property {number|null} [nocountlogin] UserBase nocountlogin
         * @property {number|null} [signreward] UserBase signreward
         * @property {number|null} [signtime] UserBase signtime
         * @property {Array.<msg.IUserAddress>|null} [addrlist] UserBase addrlist
         * @property {msg.ISimpleCounter|null} [scounter] UserBase scounter
         * @property {msg.IUserWechat|null} [wechat] UserBase wechat
         * @property {string|null} [invitationcode] UserBase invitationcode
         * @property {msg.IFreePresentMoney|null} [freepresent] UserBase freepresent
         * @property {msg.IUserTask|null} [task] UserBase task
         */

        /**
         * Constructs a new UserBase.
         * @memberof msg
         * @classdesc Represents a UserBase.
         * @implements IUserBase
         * @constructor
         * @param {msg.IUserBase=} [properties] Properties to set
         */
        function UserBase(properties) {
            this.addrlist = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * UserBase level.
         * @member {number} level
         * @memberof msg.UserBase
         * @instance
         */
        UserBase.prototype.level = 0;

        /**
         * UserBase exp.
         * @member {number} exp
         * @memberof msg.UserBase
         * @instance
         */
        UserBase.prototype.exp = 0;

        /**
         * UserBase money.
         * @member {number} money
         * @memberof msg.UserBase
         * @instance
         */
        UserBase.prototype.money = 0;

        /**
         * UserBase coupon.
         * @member {number} coupon
         * @memberof msg.UserBase
         * @instance
         */
        UserBase.prototype.coupon = 0;

        /**
         * UserBase yuanbao.
         * @member {number} yuanbao
         * @memberof msg.UserBase
         * @instance
         */
        UserBase.prototype.yuanbao = 0;

        /**
         * UserBase tmlogin.
         * @member {number|Long} tmlogin
         * @memberof msg.UserBase
         * @instance
         */
        UserBase.prototype.tmlogin = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * UserBase tmlogout.
         * @member {number|Long} tmlogout
         * @memberof msg.UserBase
         * @instance
         */
        UserBase.prototype.tmlogout = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * UserBase continuelogin.
         * @member {number} continuelogin
         * @memberof msg.UserBase
         * @instance
         */
        UserBase.prototype.continuelogin = 0;

        /**
         * UserBase nocountlogin.
         * @member {number} nocountlogin
         * @memberof msg.UserBase
         * @instance
         */
        UserBase.prototype.nocountlogin = 0;

        /**
         * UserBase signreward.
         * @member {number} signreward
         * @memberof msg.UserBase
         * @instance
         */
        UserBase.prototype.signreward = 0;

        /**
         * UserBase signtime.
         * @member {number} signtime
         * @memberof msg.UserBase
         * @instance
         */
        UserBase.prototype.signtime = 0;

        /**
         * UserBase addrlist.
         * @member {Array.<msg.IUserAddress>} addrlist
         * @memberof msg.UserBase
         * @instance
         */
        UserBase.prototype.addrlist = $util.emptyArray;

        /**
         * UserBase scounter.
         * @member {msg.ISimpleCounter|null|undefined} scounter
         * @memberof msg.UserBase
         * @instance
         */
        UserBase.prototype.scounter = null;

        /**
         * UserBase wechat.
         * @member {msg.IUserWechat|null|undefined} wechat
         * @memberof msg.UserBase
         * @instance
         */
        UserBase.prototype.wechat = null;

        /**
         * UserBase invitationcode.
         * @member {string} invitationcode
         * @memberof msg.UserBase
         * @instance
         */
        UserBase.prototype.invitationcode = "";

        /**
         * UserBase freepresent.
         * @member {msg.IFreePresentMoney|null|undefined} freepresent
         * @memberof msg.UserBase
         * @instance
         */
        UserBase.prototype.freepresent = null;

        /**
         * UserBase task.
         * @member {msg.IUserTask|null|undefined} task
         * @memberof msg.UserBase
         * @instance
         */
        UserBase.prototype.task = null;

        /**
         * Creates a new UserBase instance using the specified properties.
         * @function create
         * @memberof msg.UserBase
         * @static
         * @param {msg.IUserBase=} [properties] Properties to set
         * @returns {msg.UserBase} UserBase instance
         */
        UserBase.create = function create(properties) {
            return new UserBase(properties);
        };

        /**
         * Encodes the specified UserBase message. Does not implicitly {@link msg.UserBase.verify|verify} messages.
         * @function encode
         * @memberof msg.UserBase
         * @static
         * @param {msg.IUserBase} message UserBase message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        UserBase.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.level != null && message.hasOwnProperty("level"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.level);
            if (message.exp != null && message.hasOwnProperty("exp"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.exp);
            if (message.money != null && message.hasOwnProperty("money"))
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.money);
            if (message.coupon != null && message.hasOwnProperty("coupon"))
                writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.coupon);
            if (message.yuanbao != null && message.hasOwnProperty("yuanbao"))
                writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.yuanbao);
            if (message.tmlogin != null && message.hasOwnProperty("tmlogin"))
                writer.uint32(/* id 6, wireType 0 =*/48).int64(message.tmlogin);
            if (message.tmlogout != null && message.hasOwnProperty("tmlogout"))
                writer.uint32(/* id 7, wireType 0 =*/56).int64(message.tmlogout);
            if (message.continuelogin != null && message.hasOwnProperty("continuelogin"))
                writer.uint32(/* id 8, wireType 0 =*/64).uint32(message.continuelogin);
            if (message.nocountlogin != null && message.hasOwnProperty("nocountlogin"))
                writer.uint32(/* id 9, wireType 0 =*/72).uint32(message.nocountlogin);
            if (message.signreward != null && message.hasOwnProperty("signreward"))
                writer.uint32(/* id 10, wireType 0 =*/80).uint32(message.signreward);
            if (message.signtime != null && message.hasOwnProperty("signtime"))
                writer.uint32(/* id 11, wireType 0 =*/88).uint32(message.signtime);
            if (message.addrlist != null && message.addrlist.length)
                for (var i = 0; i < message.addrlist.length; ++i)
                    $root.msg.UserAddress.encode(message.addrlist[i], writer.uint32(/* id 12, wireType 2 =*/98).fork()).ldelim();
            if (message.scounter != null && message.hasOwnProperty("scounter"))
                $root.msg.SimpleCounter.encode(message.scounter, writer.uint32(/* id 13, wireType 2 =*/106).fork()).ldelim();
            if (message.wechat != null && message.hasOwnProperty("wechat"))
                $root.msg.UserWechat.encode(message.wechat, writer.uint32(/* id 14, wireType 2 =*/114).fork()).ldelim();
            if (message.invitationcode != null && message.hasOwnProperty("invitationcode"))
                writer.uint32(/* id 15, wireType 2 =*/122).string(message.invitationcode);
            if (message.freepresent != null && message.hasOwnProperty("freepresent"))
                $root.msg.FreePresentMoney.encode(message.freepresent, writer.uint32(/* id 16, wireType 2 =*/130).fork()).ldelim();
            if (message.task != null && message.hasOwnProperty("task"))
                $root.msg.UserTask.encode(message.task, writer.uint32(/* id 17, wireType 2 =*/138).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified UserBase message, length delimited. Does not implicitly {@link msg.UserBase.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.UserBase
         * @static
         * @param {msg.IUserBase} message UserBase message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        UserBase.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a UserBase message from the specified reader or buffer.
         * @function decode
         * @memberof msg.UserBase
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.UserBase} UserBase
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        UserBase.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.UserBase();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.level = reader.uint32();
                    break;
                case 2:
                    message.exp = reader.uint32();
                    break;
                case 3:
                    message.money = reader.uint32();
                    break;
                case 4:
                    message.coupon = reader.uint32();
                    break;
                case 5:
                    message.yuanbao = reader.uint32();
                    break;
                case 6:
                    message.tmlogin = reader.int64();
                    break;
                case 7:
                    message.tmlogout = reader.int64();
                    break;
                case 8:
                    message.continuelogin = reader.uint32();
                    break;
                case 9:
                    message.nocountlogin = reader.uint32();
                    break;
                case 10:
                    message.signreward = reader.uint32();
                    break;
                case 11:
                    message.signtime = reader.uint32();
                    break;
                case 12:
                    if (!(message.addrlist && message.addrlist.length))
                        message.addrlist = [];
                    message.addrlist.push($root.msg.UserAddress.decode(reader, reader.uint32()));
                    break;
                case 13:
                    message.scounter = $root.msg.SimpleCounter.decode(reader, reader.uint32());
                    break;
                case 14:
                    message.wechat = $root.msg.UserWechat.decode(reader, reader.uint32());
                    break;
                case 15:
                    message.invitationcode = reader.string();
                    break;
                case 16:
                    message.freepresent = $root.msg.FreePresentMoney.decode(reader, reader.uint32());
                    break;
                case 17:
                    message.task = $root.msg.UserTask.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a UserBase message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.UserBase
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.UserBase} UserBase
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        UserBase.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a UserBase message.
         * @function verify
         * @memberof msg.UserBase
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        UserBase.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.level != null && message.hasOwnProperty("level"))
                if (!$util.isInteger(message.level))
                    return "level: integer expected";
            if (message.exp != null && message.hasOwnProperty("exp"))
                if (!$util.isInteger(message.exp))
                    return "exp: integer expected";
            if (message.money != null && message.hasOwnProperty("money"))
                if (!$util.isInteger(message.money))
                    return "money: integer expected";
            if (message.coupon != null && message.hasOwnProperty("coupon"))
                if (!$util.isInteger(message.coupon))
                    return "coupon: integer expected";
            if (message.yuanbao != null && message.hasOwnProperty("yuanbao"))
                if (!$util.isInteger(message.yuanbao))
                    return "yuanbao: integer expected";
            if (message.tmlogin != null && message.hasOwnProperty("tmlogin"))
                if (!$util.isInteger(message.tmlogin) && !(message.tmlogin && $util.isInteger(message.tmlogin.low) && $util.isInteger(message.tmlogin.high)))
                    return "tmlogin: integer|Long expected";
            if (message.tmlogout != null && message.hasOwnProperty("tmlogout"))
                if (!$util.isInteger(message.tmlogout) && !(message.tmlogout && $util.isInteger(message.tmlogout.low) && $util.isInteger(message.tmlogout.high)))
                    return "tmlogout: integer|Long expected";
            if (message.continuelogin != null && message.hasOwnProperty("continuelogin"))
                if (!$util.isInteger(message.continuelogin))
                    return "continuelogin: integer expected";
            if (message.nocountlogin != null && message.hasOwnProperty("nocountlogin"))
                if (!$util.isInteger(message.nocountlogin))
                    return "nocountlogin: integer expected";
            if (message.signreward != null && message.hasOwnProperty("signreward"))
                if (!$util.isInteger(message.signreward))
                    return "signreward: integer expected";
            if (message.signtime != null && message.hasOwnProperty("signtime"))
                if (!$util.isInteger(message.signtime))
                    return "signtime: integer expected";
            if (message.addrlist != null && message.hasOwnProperty("addrlist")) {
                if (!Array.isArray(message.addrlist))
                    return "addrlist: array expected";
                for (var i = 0; i < message.addrlist.length; ++i) {
                    var error = $root.msg.UserAddress.verify(message.addrlist[i]);
                    if (error)
                        return "addrlist." + error;
                }
            }
            if (message.scounter != null && message.hasOwnProperty("scounter")) {
                var error = $root.msg.SimpleCounter.verify(message.scounter);
                if (error)
                    return "scounter." + error;
            }
            if (message.wechat != null && message.hasOwnProperty("wechat")) {
                var error = $root.msg.UserWechat.verify(message.wechat);
                if (error)
                    return "wechat." + error;
            }
            if (message.invitationcode != null && message.hasOwnProperty("invitationcode"))
                if (!$util.isString(message.invitationcode))
                    return "invitationcode: string expected";
            if (message.freepresent != null && message.hasOwnProperty("freepresent")) {
                var error = $root.msg.FreePresentMoney.verify(message.freepresent);
                if (error)
                    return "freepresent." + error;
            }
            if (message.task != null && message.hasOwnProperty("task")) {
                var error = $root.msg.UserTask.verify(message.task);
                if (error)
                    return "task." + error;
            }
            return null;
        };

        /**
         * Creates a UserBase message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.UserBase
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.UserBase} UserBase
         */
        UserBase.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.UserBase)
                return object;
            var message = new $root.msg.UserBase();
            if (object.level != null)
                message.level = object.level >>> 0;
            if (object.exp != null)
                message.exp = object.exp >>> 0;
            if (object.money != null)
                message.money = object.money >>> 0;
            if (object.coupon != null)
                message.coupon = object.coupon >>> 0;
            if (object.yuanbao != null)
                message.yuanbao = object.yuanbao >>> 0;
            if (object.tmlogin != null)
                if ($util.Long)
                    (message.tmlogin = $util.Long.fromValue(object.tmlogin)).unsigned = false;
                else if (typeof object.tmlogin === "string")
                    message.tmlogin = parseInt(object.tmlogin, 10);
                else if (typeof object.tmlogin === "number")
                    message.tmlogin = object.tmlogin;
                else if (typeof object.tmlogin === "object")
                    message.tmlogin = new $util.LongBits(object.tmlogin.low >>> 0, object.tmlogin.high >>> 0).toNumber();
            if (object.tmlogout != null)
                if ($util.Long)
                    (message.tmlogout = $util.Long.fromValue(object.tmlogout)).unsigned = false;
                else if (typeof object.tmlogout === "string")
                    message.tmlogout = parseInt(object.tmlogout, 10);
                else if (typeof object.tmlogout === "number")
                    message.tmlogout = object.tmlogout;
                else if (typeof object.tmlogout === "object")
                    message.tmlogout = new $util.LongBits(object.tmlogout.low >>> 0, object.tmlogout.high >>> 0).toNumber();
            if (object.continuelogin != null)
                message.continuelogin = object.continuelogin >>> 0;
            if (object.nocountlogin != null)
                message.nocountlogin = object.nocountlogin >>> 0;
            if (object.signreward != null)
                message.signreward = object.signreward >>> 0;
            if (object.signtime != null)
                message.signtime = object.signtime >>> 0;
            if (object.addrlist) {
                if (!Array.isArray(object.addrlist))
                    throw TypeError(".msg.UserBase.addrlist: array expected");
                message.addrlist = [];
                for (var i = 0; i < object.addrlist.length; ++i) {
                    if (typeof object.addrlist[i] !== "object")
                        throw TypeError(".msg.UserBase.addrlist: object expected");
                    message.addrlist[i] = $root.msg.UserAddress.fromObject(object.addrlist[i]);
                }
            }
            if (object.scounter != null) {
                if (typeof object.scounter !== "object")
                    throw TypeError(".msg.UserBase.scounter: object expected");
                message.scounter = $root.msg.SimpleCounter.fromObject(object.scounter);
            }
            if (object.wechat != null) {
                if (typeof object.wechat !== "object")
                    throw TypeError(".msg.UserBase.wechat: object expected");
                message.wechat = $root.msg.UserWechat.fromObject(object.wechat);
            }
            if (object.invitationcode != null)
                message.invitationcode = String(object.invitationcode);
            if (object.freepresent != null) {
                if (typeof object.freepresent !== "object")
                    throw TypeError(".msg.UserBase.freepresent: object expected");
                message.freepresent = $root.msg.FreePresentMoney.fromObject(object.freepresent);
            }
            if (object.task != null) {
                if (typeof object.task !== "object")
                    throw TypeError(".msg.UserBase.task: object expected");
                message.task = $root.msg.UserTask.fromObject(object.task);
            }
            return message;
        };

        /**
         * Creates a plain object from a UserBase message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.UserBase
         * @static
         * @param {msg.UserBase} message UserBase
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        UserBase.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.addrlist = [];
            if (options.defaults) {
                object.level = 0;
                object.exp = 0;
                object.money = 0;
                object.coupon = 0;
                object.yuanbao = 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.tmlogin = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.tmlogin = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.tmlogout = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.tmlogout = options.longs === String ? "0" : 0;
                object.continuelogin = 0;
                object.nocountlogin = 0;
                object.signreward = 0;
                object.signtime = 0;
                object.scounter = null;
                object.wechat = null;
                object.invitationcode = "";
                object.freepresent = null;
                object.task = null;
            }
            if (message.level != null && message.hasOwnProperty("level"))
                object.level = message.level;
            if (message.exp != null && message.hasOwnProperty("exp"))
                object.exp = message.exp;
            if (message.money != null && message.hasOwnProperty("money"))
                object.money = message.money;
            if (message.coupon != null && message.hasOwnProperty("coupon"))
                object.coupon = message.coupon;
            if (message.yuanbao != null && message.hasOwnProperty("yuanbao"))
                object.yuanbao = message.yuanbao;
            if (message.tmlogin != null && message.hasOwnProperty("tmlogin"))
                if (typeof message.tmlogin === "number")
                    object.tmlogin = options.longs === String ? String(message.tmlogin) : message.tmlogin;
                else
                    object.tmlogin = options.longs === String ? $util.Long.prototype.toString.call(message.tmlogin) : options.longs === Number ? new $util.LongBits(message.tmlogin.low >>> 0, message.tmlogin.high >>> 0).toNumber() : message.tmlogin;
            if (message.tmlogout != null && message.hasOwnProperty("tmlogout"))
                if (typeof message.tmlogout === "number")
                    object.tmlogout = options.longs === String ? String(message.tmlogout) : message.tmlogout;
                else
                    object.tmlogout = options.longs === String ? $util.Long.prototype.toString.call(message.tmlogout) : options.longs === Number ? new $util.LongBits(message.tmlogout.low >>> 0, message.tmlogout.high >>> 0).toNumber() : message.tmlogout;
            if (message.continuelogin != null && message.hasOwnProperty("continuelogin"))
                object.continuelogin = message.continuelogin;
            if (message.nocountlogin != null && message.hasOwnProperty("nocountlogin"))
                object.nocountlogin = message.nocountlogin;
            if (message.signreward != null && message.hasOwnProperty("signreward"))
                object.signreward = message.signreward;
            if (message.signtime != null && message.hasOwnProperty("signtime"))
                object.signtime = message.signtime;
            if (message.addrlist && message.addrlist.length) {
                object.addrlist = [];
                for (var j = 0; j < message.addrlist.length; ++j)
                    object.addrlist[j] = $root.msg.UserAddress.toObject(message.addrlist[j], options);
            }
            if (message.scounter != null && message.hasOwnProperty("scounter"))
                object.scounter = $root.msg.SimpleCounter.toObject(message.scounter, options);
            if (message.wechat != null && message.hasOwnProperty("wechat"))
                object.wechat = $root.msg.UserWechat.toObject(message.wechat, options);
            if (message.invitationcode != null && message.hasOwnProperty("invitationcode"))
                object.invitationcode = message.invitationcode;
            if (message.freepresent != null && message.hasOwnProperty("freepresent"))
                object.freepresent = $root.msg.FreePresentMoney.toObject(message.freepresent, options);
            if (message.task != null && message.hasOwnProperty("task"))
                object.task = $root.msg.UserTask.toObject(message.task, options);
            return object;
        };

        /**
         * Converts this UserBase to JSON.
         * @function toJSON
         * @memberof msg.UserBase
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        UserBase.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return UserBase;
    })();

    msg.UserAddress = (function() {

        /**
         * Properties of a UserAddress.
         * @memberof msg
         * @interface IUserAddress
         * @property {string|null} [receiver] UserAddress receiver
         * @property {string|null} [phone] UserAddress phone
         * @property {string|null} [address] UserAddress address
         */

        /**
         * Constructs a new UserAddress.
         * @memberof msg
         * @classdesc Represents a UserAddress.
         * @implements IUserAddress
         * @constructor
         * @param {msg.IUserAddress=} [properties] Properties to set
         */
        function UserAddress(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * UserAddress receiver.
         * @member {string} receiver
         * @memberof msg.UserAddress
         * @instance
         */
        UserAddress.prototype.receiver = "";

        /**
         * UserAddress phone.
         * @member {string} phone
         * @memberof msg.UserAddress
         * @instance
         */
        UserAddress.prototype.phone = "";

        /**
         * UserAddress address.
         * @member {string} address
         * @memberof msg.UserAddress
         * @instance
         */
        UserAddress.prototype.address = "";

        /**
         * Creates a new UserAddress instance using the specified properties.
         * @function create
         * @memberof msg.UserAddress
         * @static
         * @param {msg.IUserAddress=} [properties] Properties to set
         * @returns {msg.UserAddress} UserAddress instance
         */
        UserAddress.create = function create(properties) {
            return new UserAddress(properties);
        };

        /**
         * Encodes the specified UserAddress message. Does not implicitly {@link msg.UserAddress.verify|verify} messages.
         * @function encode
         * @memberof msg.UserAddress
         * @static
         * @param {msg.IUserAddress} message UserAddress message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        UserAddress.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.receiver != null && message.hasOwnProperty("receiver"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.receiver);
            if (message.phone != null && message.hasOwnProperty("phone"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.phone);
            if (message.address != null && message.hasOwnProperty("address"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.address);
            return writer;
        };

        /**
         * Encodes the specified UserAddress message, length delimited. Does not implicitly {@link msg.UserAddress.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.UserAddress
         * @static
         * @param {msg.IUserAddress} message UserAddress message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        UserAddress.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a UserAddress message from the specified reader or buffer.
         * @function decode
         * @memberof msg.UserAddress
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.UserAddress} UserAddress
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        UserAddress.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.UserAddress();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.receiver = reader.string();
                    break;
                case 2:
                    message.phone = reader.string();
                    break;
                case 3:
                    message.address = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a UserAddress message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.UserAddress
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.UserAddress} UserAddress
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        UserAddress.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a UserAddress message.
         * @function verify
         * @memberof msg.UserAddress
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        UserAddress.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.receiver != null && message.hasOwnProperty("receiver"))
                if (!$util.isString(message.receiver))
                    return "receiver: string expected";
            if (message.phone != null && message.hasOwnProperty("phone"))
                if (!$util.isString(message.phone))
                    return "phone: string expected";
            if (message.address != null && message.hasOwnProperty("address"))
                if (!$util.isString(message.address))
                    return "address: string expected";
            return null;
        };

        /**
         * Creates a UserAddress message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.UserAddress
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.UserAddress} UserAddress
         */
        UserAddress.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.UserAddress)
                return object;
            var message = new $root.msg.UserAddress();
            if (object.receiver != null)
                message.receiver = String(object.receiver);
            if (object.phone != null)
                message.phone = String(object.phone);
            if (object.address != null)
                message.address = String(object.address);
            return message;
        };

        /**
         * Creates a plain object from a UserAddress message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.UserAddress
         * @static
         * @param {msg.UserAddress} message UserAddress
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        UserAddress.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.receiver = "";
                object.phone = "";
                object.address = "";
            }
            if (message.receiver != null && message.hasOwnProperty("receiver"))
                object.receiver = message.receiver;
            if (message.phone != null && message.hasOwnProperty("phone"))
                object.phone = message.phone;
            if (message.address != null && message.hasOwnProperty("address"))
                object.address = message.address;
            return object;
        };

        /**
         * Converts this UserAddress to JSON.
         * @function toJSON
         * @memberof msg.UserAddress
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        UserAddress.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return UserAddress;
    })();

    /**
     * ItemPos enum.
     * @name msg.ItemPos
     * @enum {string}
     * @property {number} Bag=0 Bag value
     * @property {number} Storage=1 Storage value
     */
    msg.ItemPos = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[0] = "Bag"] = 0;
        values[valuesById[1] = "Storage"] = 1;
        return values;
    })();

    msg.ItemData = (function() {

        /**
         * Properties of an ItemData.
         * @memberof msg
         * @interface IItemData
         * @property {number|null} [id] ItemData id
         * @property {number|null} [num] ItemData num
         * @property {number|null} [pos] ItemData pos
         */

        /**
         * Constructs a new ItemData.
         * @memberof msg
         * @classdesc Represents an ItemData.
         * @implements IItemData
         * @constructor
         * @param {msg.IItemData=} [properties] Properties to set
         */
        function ItemData(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ItemData id.
         * @member {number} id
         * @memberof msg.ItemData
         * @instance
         */
        ItemData.prototype.id = 0;

        /**
         * ItemData num.
         * @member {number} num
         * @memberof msg.ItemData
         * @instance
         */
        ItemData.prototype.num = 0;

        /**
         * ItemData pos.
         * @member {number} pos
         * @memberof msg.ItemData
         * @instance
         */
        ItemData.prototype.pos = 0;

        /**
         * Creates a new ItemData instance using the specified properties.
         * @function create
         * @memberof msg.ItemData
         * @static
         * @param {msg.IItemData=} [properties] Properties to set
         * @returns {msg.ItemData} ItemData instance
         */
        ItemData.create = function create(properties) {
            return new ItemData(properties);
        };

        /**
         * Encodes the specified ItemData message. Does not implicitly {@link msg.ItemData.verify|verify} messages.
         * @function encode
         * @memberof msg.ItemData
         * @static
         * @param {msg.IItemData} message ItemData message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ItemData.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.id != null && message.hasOwnProperty("id"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.id);
            if (message.num != null && message.hasOwnProperty("num"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.num);
            if (message.pos != null && message.hasOwnProperty("pos"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.pos);
            return writer;
        };

        /**
         * Encodes the specified ItemData message, length delimited. Does not implicitly {@link msg.ItemData.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.ItemData
         * @static
         * @param {msg.IItemData} message ItemData message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ItemData.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes an ItemData message from the specified reader or buffer.
         * @function decode
         * @memberof msg.ItemData
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.ItemData} ItemData
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ItemData.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.ItemData();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.id = reader.uint32();
                    break;
                case 2:
                    message.num = reader.uint32();
                    break;
                case 3:
                    message.pos = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes an ItemData message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.ItemData
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.ItemData} ItemData
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ItemData.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies an ItemData message.
         * @function verify
         * @memberof msg.ItemData
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ItemData.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.id != null && message.hasOwnProperty("id"))
                if (!$util.isInteger(message.id))
                    return "id: integer expected";
            if (message.num != null && message.hasOwnProperty("num"))
                if (!$util.isInteger(message.num))
                    return "num: integer expected";
            if (message.pos != null && message.hasOwnProperty("pos"))
                if (!$util.isInteger(message.pos))
                    return "pos: integer expected";
            return null;
        };

        /**
         * Creates an ItemData message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.ItemData
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.ItemData} ItemData
         */
        ItemData.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.ItemData)
                return object;
            var message = new $root.msg.ItemData();
            if (object.id != null)
                message.id = object.id >>> 0;
            if (object.num != null)
                message.num = object.num >>> 0;
            if (object.pos != null)
                message.pos = object.pos | 0;
            return message;
        };

        /**
         * Creates a plain object from an ItemData message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.ItemData
         * @static
         * @param {msg.ItemData} message ItemData
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ItemData.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.id = 0;
                object.num = 0;
                object.pos = 0;
            }
            if (message.id != null && message.hasOwnProperty("id"))
                object.id = message.id;
            if (message.num != null && message.hasOwnProperty("num"))
                object.num = message.num;
            if (message.pos != null && message.hasOwnProperty("pos"))
                object.pos = message.pos;
            return object;
        };

        /**
         * Converts this ItemData to JSON.
         * @function toJSON
         * @memberof msg.ItemData
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ItemData.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return ItemData;
    })();

    msg.ItemBin = (function() {

        /**
         * Properties of an ItemBin.
         * @memberof msg
         * @interface IItemBin
         * @property {Array.<msg.IItemData>|null} [items] ItemBin items
         */

        /**
         * Constructs a new ItemBin.
         * @memberof msg
         * @classdesc Represents an ItemBin.
         * @implements IItemBin
         * @constructor
         * @param {msg.IItemBin=} [properties] Properties to set
         */
        function ItemBin(properties) {
            this.items = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ItemBin items.
         * @member {Array.<msg.IItemData>} items
         * @memberof msg.ItemBin
         * @instance
         */
        ItemBin.prototype.items = $util.emptyArray;

        /**
         * Creates a new ItemBin instance using the specified properties.
         * @function create
         * @memberof msg.ItemBin
         * @static
         * @param {msg.IItemBin=} [properties] Properties to set
         * @returns {msg.ItemBin} ItemBin instance
         */
        ItemBin.create = function create(properties) {
            return new ItemBin(properties);
        };

        /**
         * Encodes the specified ItemBin message. Does not implicitly {@link msg.ItemBin.verify|verify} messages.
         * @function encode
         * @memberof msg.ItemBin
         * @static
         * @param {msg.IItemBin} message ItemBin message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ItemBin.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.items != null && message.items.length)
                for (var i = 0; i < message.items.length; ++i)
                    $root.msg.ItemData.encode(message.items[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified ItemBin message, length delimited. Does not implicitly {@link msg.ItemBin.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.ItemBin
         * @static
         * @param {msg.IItemBin} message ItemBin message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ItemBin.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes an ItemBin message from the specified reader or buffer.
         * @function decode
         * @memberof msg.ItemBin
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.ItemBin} ItemBin
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ItemBin.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.ItemBin();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.items && message.items.length))
                        message.items = [];
                    message.items.push($root.msg.ItemData.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes an ItemBin message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.ItemBin
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.ItemBin} ItemBin
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ItemBin.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies an ItemBin message.
         * @function verify
         * @memberof msg.ItemBin
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ItemBin.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.items != null && message.hasOwnProperty("items")) {
                if (!Array.isArray(message.items))
                    return "items: array expected";
                for (var i = 0; i < message.items.length; ++i) {
                    var error = $root.msg.ItemData.verify(message.items[i]);
                    if (error)
                        return "items." + error;
                }
            }
            return null;
        };

        /**
         * Creates an ItemBin message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.ItemBin
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.ItemBin} ItemBin
         */
        ItemBin.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.ItemBin)
                return object;
            var message = new $root.msg.ItemBin();
            if (object.items) {
                if (!Array.isArray(object.items))
                    throw TypeError(".msg.ItemBin.items: array expected");
                message.items = [];
                for (var i = 0; i < object.items.length; ++i) {
                    if (typeof object.items[i] !== "object")
                        throw TypeError(".msg.ItemBin.items: object expected");
                    message.items[i] = $root.msg.ItemData.fromObject(object.items[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from an ItemBin message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.ItemBin
         * @static
         * @param {msg.ItemBin} message ItemBin
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ItemBin.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.items = [];
            if (message.items && message.items.length) {
                object.items = [];
                for (var j = 0; j < message.items.length; ++j)
                    object.items[j] = $root.msg.ItemData.toObject(message.items[j], options);
            }
            return object;
        };

        /**
         * Converts this ItemBin to JSON.
         * @function toJSON
         * @memberof msg.ItemBin
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ItemBin.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return ItemBin;
    })();

    msg.Serialize = (function() {

        /**
         * Properties of a Serialize.
         * @memberof msg
         * @interface ISerialize
         * @property {msg.IEntityBase|null} [entity] Serialize entity
         * @property {msg.IUserBase|null} [base] Serialize base
         * @property {msg.IItemBin|null} [item] Serialize item
         */

        /**
         * Constructs a new Serialize.
         * @memberof msg
         * @classdesc Represents a Serialize.
         * @implements ISerialize
         * @constructor
         * @param {msg.ISerialize=} [properties] Properties to set
         */
        function Serialize(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Serialize entity.
         * @member {msg.IEntityBase|null|undefined} entity
         * @memberof msg.Serialize
         * @instance
         */
        Serialize.prototype.entity = null;

        /**
         * Serialize base.
         * @member {msg.IUserBase|null|undefined} base
         * @memberof msg.Serialize
         * @instance
         */
        Serialize.prototype.base = null;

        /**
         * Serialize item.
         * @member {msg.IItemBin|null|undefined} item
         * @memberof msg.Serialize
         * @instance
         */
        Serialize.prototype.item = null;

        /**
         * Creates a new Serialize instance using the specified properties.
         * @function create
         * @memberof msg.Serialize
         * @static
         * @param {msg.ISerialize=} [properties] Properties to set
         * @returns {msg.Serialize} Serialize instance
         */
        Serialize.create = function create(properties) {
            return new Serialize(properties);
        };

        /**
         * Encodes the specified Serialize message. Does not implicitly {@link msg.Serialize.verify|verify} messages.
         * @function encode
         * @memberof msg.Serialize
         * @static
         * @param {msg.ISerialize} message Serialize message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Serialize.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.entity != null && message.hasOwnProperty("entity"))
                $root.msg.EntityBase.encode(message.entity, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.base != null && message.hasOwnProperty("base"))
                $root.msg.UserBase.encode(message.base, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.item != null && message.hasOwnProperty("item"))
                $root.msg.ItemBin.encode(message.item, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified Serialize message, length delimited. Does not implicitly {@link msg.Serialize.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.Serialize
         * @static
         * @param {msg.ISerialize} message Serialize message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Serialize.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a Serialize message from the specified reader or buffer.
         * @function decode
         * @memberof msg.Serialize
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.Serialize} Serialize
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Serialize.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.Serialize();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.entity = $root.msg.EntityBase.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.base = $root.msg.UserBase.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.item = $root.msg.ItemBin.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a Serialize message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.Serialize
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.Serialize} Serialize
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Serialize.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a Serialize message.
         * @function verify
         * @memberof msg.Serialize
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Serialize.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.entity != null && message.hasOwnProperty("entity")) {
                var error = $root.msg.EntityBase.verify(message.entity);
                if (error)
                    return "entity." + error;
            }
            if (message.base != null && message.hasOwnProperty("base")) {
                var error = $root.msg.UserBase.verify(message.base);
                if (error)
                    return "base." + error;
            }
            if (message.item != null && message.hasOwnProperty("item")) {
                var error = $root.msg.ItemBin.verify(message.item);
                if (error)
                    return "item." + error;
            }
            return null;
        };

        /**
         * Creates a Serialize message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.Serialize
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.Serialize} Serialize
         */
        Serialize.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.Serialize)
                return object;
            var message = new $root.msg.Serialize();
            if (object.entity != null) {
                if (typeof object.entity !== "object")
                    throw TypeError(".msg.Serialize.entity: object expected");
                message.entity = $root.msg.EntityBase.fromObject(object.entity);
            }
            if (object.base != null) {
                if (typeof object.base !== "object")
                    throw TypeError(".msg.Serialize.base: object expected");
                message.base = $root.msg.UserBase.fromObject(object.base);
            }
            if (object.item != null) {
                if (typeof object.item !== "object")
                    throw TypeError(".msg.Serialize.item: object expected");
                message.item = $root.msg.ItemBin.fromObject(object.item);
            }
            return message;
        };

        /**
         * Creates a plain object from a Serialize message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.Serialize
         * @static
         * @param {msg.Serialize} message Serialize
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        Serialize.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.entity = null;
                object.base = null;
                object.item = null;
            }
            if (message.entity != null && message.hasOwnProperty("entity"))
                object.entity = $root.msg.EntityBase.toObject(message.entity, options);
            if (message.base != null && message.hasOwnProperty("base"))
                object.base = $root.msg.UserBase.toObject(message.base, options);
            if (message.item != null && message.hasOwnProperty("item"))
                object.item = $root.msg.ItemBin.toObject(message.item, options);
            return object;
        };

        /**
         * Converts this Serialize to JSON.
         * @function toJSON
         * @memberof msg.Serialize
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        Serialize.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return Serialize;
    })();

    msg.C2GW_ReqLogin = (function() {

        /**
         * Properties of a C2GW_ReqLogin.
         * @memberof msg
         * @interface IC2GW_ReqLogin
         * @property {string|null} [account] C2GW_ReqLogin account
         * @property {string|null} [verifykey] C2GW_ReqLogin verifykey
         * @property {string|null} [token] C2GW_ReqLogin token
         * @property {string|null} [face] C2GW_ReqLogin face
         */

        /**
         * Constructs a new C2GW_ReqLogin.
         * @memberof msg
         * @classdesc Represents a C2GW_ReqLogin.
         * @implements IC2GW_ReqLogin
         * @constructor
         * @param {msg.IC2GW_ReqLogin=} [properties] Properties to set
         */
        function C2GW_ReqLogin(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * C2GW_ReqLogin account.
         * @member {string} account
         * @memberof msg.C2GW_ReqLogin
         * @instance
         */
        C2GW_ReqLogin.prototype.account = "";

        /**
         * C2GW_ReqLogin verifykey.
         * @member {string} verifykey
         * @memberof msg.C2GW_ReqLogin
         * @instance
         */
        C2GW_ReqLogin.prototype.verifykey = "";

        /**
         * C2GW_ReqLogin token.
         * @member {string} token
         * @memberof msg.C2GW_ReqLogin
         * @instance
         */
        C2GW_ReqLogin.prototype.token = "";

        /**
         * C2GW_ReqLogin face.
         * @member {string} face
         * @memberof msg.C2GW_ReqLogin
         * @instance
         */
        C2GW_ReqLogin.prototype.face = "";

        /**
         * Creates a new C2GW_ReqLogin instance using the specified properties.
         * @function create
         * @memberof msg.C2GW_ReqLogin
         * @static
         * @param {msg.IC2GW_ReqLogin=} [properties] Properties to set
         * @returns {msg.C2GW_ReqLogin} C2GW_ReqLogin instance
         */
        C2GW_ReqLogin.create = function create(properties) {
            return new C2GW_ReqLogin(properties);
        };

        /**
         * Encodes the specified C2GW_ReqLogin message. Does not implicitly {@link msg.C2GW_ReqLogin.verify|verify} messages.
         * @function encode
         * @memberof msg.C2GW_ReqLogin
         * @static
         * @param {msg.IC2GW_ReqLogin} message C2GW_ReqLogin message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_ReqLogin.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.account != null && message.hasOwnProperty("account"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.account);
            if (message.verifykey != null && message.hasOwnProperty("verifykey"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.verifykey);
            if (message.token != null && message.hasOwnProperty("token"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.token);
            if (message.face != null && message.hasOwnProperty("face"))
                writer.uint32(/* id 4, wireType 2 =*/34).string(message.face);
            return writer;
        };

        /**
         * Encodes the specified C2GW_ReqLogin message, length delimited. Does not implicitly {@link msg.C2GW_ReqLogin.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.C2GW_ReqLogin
         * @static
         * @param {msg.IC2GW_ReqLogin} message C2GW_ReqLogin message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_ReqLogin.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a C2GW_ReqLogin message from the specified reader or buffer.
         * @function decode
         * @memberof msg.C2GW_ReqLogin
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.C2GW_ReqLogin} C2GW_ReqLogin
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_ReqLogin.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.C2GW_ReqLogin();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.account = reader.string();
                    break;
                case 2:
                    message.verifykey = reader.string();
                    break;
                case 3:
                    message.token = reader.string();
                    break;
                case 4:
                    message.face = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a C2GW_ReqLogin message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.C2GW_ReqLogin
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.C2GW_ReqLogin} C2GW_ReqLogin
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_ReqLogin.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a C2GW_ReqLogin message.
         * @function verify
         * @memberof msg.C2GW_ReqLogin
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        C2GW_ReqLogin.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.account != null && message.hasOwnProperty("account"))
                if (!$util.isString(message.account))
                    return "account: string expected";
            if (message.verifykey != null && message.hasOwnProperty("verifykey"))
                if (!$util.isString(message.verifykey))
                    return "verifykey: string expected";
            if (message.token != null && message.hasOwnProperty("token"))
                if (!$util.isString(message.token))
                    return "token: string expected";
            if (message.face != null && message.hasOwnProperty("face"))
                if (!$util.isString(message.face))
                    return "face: string expected";
            return null;
        };

        /**
         * Creates a C2GW_ReqLogin message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.C2GW_ReqLogin
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.C2GW_ReqLogin} C2GW_ReqLogin
         */
        C2GW_ReqLogin.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.C2GW_ReqLogin)
                return object;
            var message = new $root.msg.C2GW_ReqLogin();
            if (object.account != null)
                message.account = String(object.account);
            if (object.verifykey != null)
                message.verifykey = String(object.verifykey);
            if (object.token != null)
                message.token = String(object.token);
            if (object.face != null)
                message.face = String(object.face);
            return message;
        };

        /**
         * Creates a plain object from a C2GW_ReqLogin message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.C2GW_ReqLogin
         * @static
         * @param {msg.C2GW_ReqLogin} message C2GW_ReqLogin
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        C2GW_ReqLogin.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.account = "";
                object.verifykey = "";
                object.token = "";
                object.face = "";
            }
            if (message.account != null && message.hasOwnProperty("account"))
                object.account = message.account;
            if (message.verifykey != null && message.hasOwnProperty("verifykey"))
                object.verifykey = message.verifykey;
            if (message.token != null && message.hasOwnProperty("token"))
                object.token = message.token;
            if (message.face != null && message.hasOwnProperty("face"))
                object.face = message.face;
            return object;
        };

        /**
         * Converts this C2GW_ReqLogin to JSON.
         * @function toJSON
         * @memberof msg.C2GW_ReqLogin
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        C2GW_ReqLogin.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return C2GW_ReqLogin;
    })();

    msg.GW2C_RetLogin = (function() {

        /**
         * Properties of a GW2C_RetLogin.
         * @memberof msg
         * @interface IGW2C_RetLogin
         * @property {string|null} [errcode] GW2C_RetLogin errcode
         */

        /**
         * Constructs a new GW2C_RetLogin.
         * @memberof msg
         * @classdesc Represents a GW2C_RetLogin.
         * @implements IGW2C_RetLogin
         * @constructor
         * @param {msg.IGW2C_RetLogin=} [properties] Properties to set
         */
        function GW2C_RetLogin(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GW2C_RetLogin errcode.
         * @member {string} errcode
         * @memberof msg.GW2C_RetLogin
         * @instance
         */
        GW2C_RetLogin.prototype.errcode = "";

        /**
         * Creates a new GW2C_RetLogin instance using the specified properties.
         * @function create
         * @memberof msg.GW2C_RetLogin
         * @static
         * @param {msg.IGW2C_RetLogin=} [properties] Properties to set
         * @returns {msg.GW2C_RetLogin} GW2C_RetLogin instance
         */
        GW2C_RetLogin.create = function create(properties) {
            return new GW2C_RetLogin(properties);
        };

        /**
         * Encodes the specified GW2C_RetLogin message. Does not implicitly {@link msg.GW2C_RetLogin.verify|verify} messages.
         * @function encode
         * @memberof msg.GW2C_RetLogin
         * @static
         * @param {msg.IGW2C_RetLogin} message GW2C_RetLogin message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_RetLogin.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.errcode != null && message.hasOwnProperty("errcode"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.errcode);
            return writer;
        };

        /**
         * Encodes the specified GW2C_RetLogin message, length delimited. Does not implicitly {@link msg.GW2C_RetLogin.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.GW2C_RetLogin
         * @static
         * @param {msg.IGW2C_RetLogin} message GW2C_RetLogin message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_RetLogin.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GW2C_RetLogin message from the specified reader or buffer.
         * @function decode
         * @memberof msg.GW2C_RetLogin
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.GW2C_RetLogin} GW2C_RetLogin
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_RetLogin.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.GW2C_RetLogin();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.errcode = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GW2C_RetLogin message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.GW2C_RetLogin
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.GW2C_RetLogin} GW2C_RetLogin
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_RetLogin.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GW2C_RetLogin message.
         * @function verify
         * @memberof msg.GW2C_RetLogin
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GW2C_RetLogin.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.errcode != null && message.hasOwnProperty("errcode"))
                if (!$util.isString(message.errcode))
                    return "errcode: string expected";
            return null;
        };

        /**
         * Creates a GW2C_RetLogin message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.GW2C_RetLogin
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.GW2C_RetLogin} GW2C_RetLogin
         */
        GW2C_RetLogin.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.GW2C_RetLogin)
                return object;
            var message = new $root.msg.GW2C_RetLogin();
            if (object.errcode != null)
                message.errcode = String(object.errcode);
            return message;
        };

        /**
         * Creates a plain object from a GW2C_RetLogin message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.GW2C_RetLogin
         * @static
         * @param {msg.GW2C_RetLogin} message GW2C_RetLogin
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GW2C_RetLogin.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.errcode = "";
            if (message.errcode != null && message.hasOwnProperty("errcode"))
                object.errcode = message.errcode;
            return object;
        };

        /**
         * Converts this GW2C_RetLogin to JSON.
         * @function toJSON
         * @memberof msg.GW2C_RetLogin
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GW2C_RetLogin.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GW2C_RetLogin;
    })();

    msg.GW2C_SendUserInfo = (function() {

        /**
         * Properties of a GW2C_SendUserInfo.
         * @memberof msg
         * @interface IGW2C_SendUserInfo
         * @property {msg.IEntityBase|null} [entity] GW2C_SendUserInfo entity
         * @property {msg.IUserBase|null} [base] GW2C_SendUserInfo base
         * @property {msg.IItemBin|null} [item] GW2C_SendUserInfo item
         */

        /**
         * Constructs a new GW2C_SendUserInfo.
         * @memberof msg
         * @classdesc Represents a GW2C_SendUserInfo.
         * @implements IGW2C_SendUserInfo
         * @constructor
         * @param {msg.IGW2C_SendUserInfo=} [properties] Properties to set
         */
        function GW2C_SendUserInfo(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GW2C_SendUserInfo entity.
         * @member {msg.IEntityBase|null|undefined} entity
         * @memberof msg.GW2C_SendUserInfo
         * @instance
         */
        GW2C_SendUserInfo.prototype.entity = null;

        /**
         * GW2C_SendUserInfo base.
         * @member {msg.IUserBase|null|undefined} base
         * @memberof msg.GW2C_SendUserInfo
         * @instance
         */
        GW2C_SendUserInfo.prototype.base = null;

        /**
         * GW2C_SendUserInfo item.
         * @member {msg.IItemBin|null|undefined} item
         * @memberof msg.GW2C_SendUserInfo
         * @instance
         */
        GW2C_SendUserInfo.prototype.item = null;

        /**
         * Creates a new GW2C_SendUserInfo instance using the specified properties.
         * @function create
         * @memberof msg.GW2C_SendUserInfo
         * @static
         * @param {msg.IGW2C_SendUserInfo=} [properties] Properties to set
         * @returns {msg.GW2C_SendUserInfo} GW2C_SendUserInfo instance
         */
        GW2C_SendUserInfo.create = function create(properties) {
            return new GW2C_SendUserInfo(properties);
        };

        /**
         * Encodes the specified GW2C_SendUserInfo message. Does not implicitly {@link msg.GW2C_SendUserInfo.verify|verify} messages.
         * @function encode
         * @memberof msg.GW2C_SendUserInfo
         * @static
         * @param {msg.IGW2C_SendUserInfo} message GW2C_SendUserInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_SendUserInfo.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.entity != null && message.hasOwnProperty("entity"))
                $root.msg.EntityBase.encode(message.entity, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.base != null && message.hasOwnProperty("base"))
                $root.msg.UserBase.encode(message.base, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.item != null && message.hasOwnProperty("item"))
                $root.msg.ItemBin.encode(message.item, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified GW2C_SendUserInfo message, length delimited. Does not implicitly {@link msg.GW2C_SendUserInfo.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.GW2C_SendUserInfo
         * @static
         * @param {msg.IGW2C_SendUserInfo} message GW2C_SendUserInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_SendUserInfo.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GW2C_SendUserInfo message from the specified reader or buffer.
         * @function decode
         * @memberof msg.GW2C_SendUserInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.GW2C_SendUserInfo} GW2C_SendUserInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_SendUserInfo.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.GW2C_SendUserInfo();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.entity = $root.msg.EntityBase.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.base = $root.msg.UserBase.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.item = $root.msg.ItemBin.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GW2C_SendUserInfo message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.GW2C_SendUserInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.GW2C_SendUserInfo} GW2C_SendUserInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_SendUserInfo.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GW2C_SendUserInfo message.
         * @function verify
         * @memberof msg.GW2C_SendUserInfo
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GW2C_SendUserInfo.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.entity != null && message.hasOwnProperty("entity")) {
                var error = $root.msg.EntityBase.verify(message.entity);
                if (error)
                    return "entity." + error;
            }
            if (message.base != null && message.hasOwnProperty("base")) {
                var error = $root.msg.UserBase.verify(message.base);
                if (error)
                    return "base." + error;
            }
            if (message.item != null && message.hasOwnProperty("item")) {
                var error = $root.msg.ItemBin.verify(message.item);
                if (error)
                    return "item." + error;
            }
            return null;
        };

        /**
         * Creates a GW2C_SendUserInfo message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.GW2C_SendUserInfo
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.GW2C_SendUserInfo} GW2C_SendUserInfo
         */
        GW2C_SendUserInfo.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.GW2C_SendUserInfo)
                return object;
            var message = new $root.msg.GW2C_SendUserInfo();
            if (object.entity != null) {
                if (typeof object.entity !== "object")
                    throw TypeError(".msg.GW2C_SendUserInfo.entity: object expected");
                message.entity = $root.msg.EntityBase.fromObject(object.entity);
            }
            if (object.base != null) {
                if (typeof object.base !== "object")
                    throw TypeError(".msg.GW2C_SendUserInfo.base: object expected");
                message.base = $root.msg.UserBase.fromObject(object.base);
            }
            if (object.item != null) {
                if (typeof object.item !== "object")
                    throw TypeError(".msg.GW2C_SendUserInfo.item: object expected");
                message.item = $root.msg.ItemBin.fromObject(object.item);
            }
            return message;
        };

        /**
         * Creates a plain object from a GW2C_SendUserInfo message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.GW2C_SendUserInfo
         * @static
         * @param {msg.GW2C_SendUserInfo} message GW2C_SendUserInfo
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GW2C_SendUserInfo.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.entity = null;
                object.base = null;
                object.item = null;
            }
            if (message.entity != null && message.hasOwnProperty("entity"))
                object.entity = $root.msg.EntityBase.toObject(message.entity, options);
            if (message.base != null && message.hasOwnProperty("base"))
                object.base = $root.msg.UserBase.toObject(message.base, options);
            if (message.item != null && message.hasOwnProperty("item"))
                object.item = $root.msg.ItemBin.toObject(message.item, options);
            return object;
        };

        /**
         * Converts this GW2C_SendUserInfo to JSON.
         * @function toJSON
         * @memberof msg.GW2C_SendUserInfo
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GW2C_SendUserInfo.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GW2C_SendUserInfo;
    })();

    msg.GW2C_SendUserPlatformMoney = (function() {

        /**
         * Properties of a GW2C_SendUserPlatformMoney.
         * @memberof msg
         * @interface IGW2C_SendUserPlatformMoney
         * @property {number|null} [coins] GW2C_SendUserPlatformMoney coins
         */

        /**
         * Constructs a new GW2C_SendUserPlatformMoney.
         * @memberof msg
         * @classdesc Represents a GW2C_SendUserPlatformMoney.
         * @implements IGW2C_SendUserPlatformMoney
         * @constructor
         * @param {msg.IGW2C_SendUserPlatformMoney=} [properties] Properties to set
         */
        function GW2C_SendUserPlatformMoney(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GW2C_SendUserPlatformMoney coins.
         * @member {number} coins
         * @memberof msg.GW2C_SendUserPlatformMoney
         * @instance
         */
        GW2C_SendUserPlatformMoney.prototype.coins = 0;

        /**
         * Creates a new GW2C_SendUserPlatformMoney instance using the specified properties.
         * @function create
         * @memberof msg.GW2C_SendUserPlatformMoney
         * @static
         * @param {msg.IGW2C_SendUserPlatformMoney=} [properties] Properties to set
         * @returns {msg.GW2C_SendUserPlatformMoney} GW2C_SendUserPlatformMoney instance
         */
        GW2C_SendUserPlatformMoney.create = function create(properties) {
            return new GW2C_SendUserPlatformMoney(properties);
        };

        /**
         * Encodes the specified GW2C_SendUserPlatformMoney message. Does not implicitly {@link msg.GW2C_SendUserPlatformMoney.verify|verify} messages.
         * @function encode
         * @memberof msg.GW2C_SendUserPlatformMoney
         * @static
         * @param {msg.IGW2C_SendUserPlatformMoney} message GW2C_SendUserPlatformMoney message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_SendUserPlatformMoney.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.coins != null && message.hasOwnProperty("coins"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.coins);
            return writer;
        };

        /**
         * Encodes the specified GW2C_SendUserPlatformMoney message, length delimited. Does not implicitly {@link msg.GW2C_SendUserPlatformMoney.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.GW2C_SendUserPlatformMoney
         * @static
         * @param {msg.IGW2C_SendUserPlatformMoney} message GW2C_SendUserPlatformMoney message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_SendUserPlatformMoney.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GW2C_SendUserPlatformMoney message from the specified reader or buffer.
         * @function decode
         * @memberof msg.GW2C_SendUserPlatformMoney
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.GW2C_SendUserPlatformMoney} GW2C_SendUserPlatformMoney
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_SendUserPlatformMoney.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.GW2C_SendUserPlatformMoney();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.coins = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GW2C_SendUserPlatformMoney message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.GW2C_SendUserPlatformMoney
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.GW2C_SendUserPlatformMoney} GW2C_SendUserPlatformMoney
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_SendUserPlatformMoney.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GW2C_SendUserPlatformMoney message.
         * @function verify
         * @memberof msg.GW2C_SendUserPlatformMoney
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GW2C_SendUserPlatformMoney.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.coins != null && message.hasOwnProperty("coins"))
                if (!$util.isInteger(message.coins))
                    return "coins: integer expected";
            return null;
        };

        /**
         * Creates a GW2C_SendUserPlatformMoney message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.GW2C_SendUserPlatformMoney
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.GW2C_SendUserPlatformMoney} GW2C_SendUserPlatformMoney
         */
        GW2C_SendUserPlatformMoney.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.GW2C_SendUserPlatformMoney)
                return object;
            var message = new $root.msg.GW2C_SendUserPlatformMoney();
            if (object.coins != null)
                message.coins = object.coins | 0;
            return message;
        };

        /**
         * Creates a plain object from a GW2C_SendUserPlatformMoney message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.GW2C_SendUserPlatformMoney
         * @static
         * @param {msg.GW2C_SendUserPlatformMoney} message GW2C_SendUserPlatformMoney
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GW2C_SendUserPlatformMoney.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.coins = 0;
            if (message.coins != null && message.hasOwnProperty("coins"))
                object.coins = message.coins;
            return object;
        };

        /**
         * Converts this GW2C_SendUserPlatformMoney to JSON.
         * @function toJSON
         * @memberof msg.GW2C_SendUserPlatformMoney
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GW2C_SendUserPlatformMoney.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GW2C_SendUserPlatformMoney;
    })();

    msg.C2GW_HeartBeat = (function() {

        /**
         * Properties of a C2GW_HeartBeat.
         * @memberof msg
         * @interface IC2GW_HeartBeat
         * @property {number|Long|null} [uid] C2GW_HeartBeat uid
         * @property {number|Long|null} [time] C2GW_HeartBeat time
         * @property {Array.<string>|null} [test] C2GW_HeartBeat test
         */

        /**
         * Constructs a new C2GW_HeartBeat.
         * @memberof msg
         * @classdesc Represents a C2GW_HeartBeat.
         * @implements IC2GW_HeartBeat
         * @constructor
         * @param {msg.IC2GW_HeartBeat=} [properties] Properties to set
         */
        function C2GW_HeartBeat(properties) {
            this.test = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * C2GW_HeartBeat uid.
         * @member {number|Long} uid
         * @memberof msg.C2GW_HeartBeat
         * @instance
         */
        C2GW_HeartBeat.prototype.uid = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * C2GW_HeartBeat time.
         * @member {number|Long} time
         * @memberof msg.C2GW_HeartBeat
         * @instance
         */
        C2GW_HeartBeat.prototype.time = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * C2GW_HeartBeat test.
         * @member {Array.<string>} test
         * @memberof msg.C2GW_HeartBeat
         * @instance
         */
        C2GW_HeartBeat.prototype.test = $util.emptyArray;

        /**
         * Creates a new C2GW_HeartBeat instance using the specified properties.
         * @function create
         * @memberof msg.C2GW_HeartBeat
         * @static
         * @param {msg.IC2GW_HeartBeat=} [properties] Properties to set
         * @returns {msg.C2GW_HeartBeat} C2GW_HeartBeat instance
         */
        C2GW_HeartBeat.create = function create(properties) {
            return new C2GW_HeartBeat(properties);
        };

        /**
         * Encodes the specified C2GW_HeartBeat message. Does not implicitly {@link msg.C2GW_HeartBeat.verify|verify} messages.
         * @function encode
         * @memberof msg.C2GW_HeartBeat
         * @static
         * @param {msg.IC2GW_HeartBeat} message C2GW_HeartBeat message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_HeartBeat.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.uid != null && message.hasOwnProperty("uid"))
                writer.uint32(/* id 1, wireType 0 =*/8).int64(message.uid);
            if (message.time != null && message.hasOwnProperty("time"))
                writer.uint32(/* id 2, wireType 0 =*/16).int64(message.time);
            if (message.test != null && message.test.length)
                for (var i = 0; i < message.test.length; ++i)
                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.test[i]);
            return writer;
        };

        /**
         * Encodes the specified C2GW_HeartBeat message, length delimited. Does not implicitly {@link msg.C2GW_HeartBeat.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.C2GW_HeartBeat
         * @static
         * @param {msg.IC2GW_HeartBeat} message C2GW_HeartBeat message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_HeartBeat.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a C2GW_HeartBeat message from the specified reader or buffer.
         * @function decode
         * @memberof msg.C2GW_HeartBeat
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.C2GW_HeartBeat} C2GW_HeartBeat
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_HeartBeat.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.C2GW_HeartBeat();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.uid = reader.int64();
                    break;
                case 2:
                    message.time = reader.int64();
                    break;
                case 3:
                    if (!(message.test && message.test.length))
                        message.test = [];
                    message.test.push(reader.string());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a C2GW_HeartBeat message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.C2GW_HeartBeat
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.C2GW_HeartBeat} C2GW_HeartBeat
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_HeartBeat.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a C2GW_HeartBeat message.
         * @function verify
         * @memberof msg.C2GW_HeartBeat
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        C2GW_HeartBeat.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.uid != null && message.hasOwnProperty("uid"))
                if (!$util.isInteger(message.uid) && !(message.uid && $util.isInteger(message.uid.low) && $util.isInteger(message.uid.high)))
                    return "uid: integer|Long expected";
            if (message.time != null && message.hasOwnProperty("time"))
                if (!$util.isInteger(message.time) && !(message.time && $util.isInteger(message.time.low) && $util.isInteger(message.time.high)))
                    return "time: integer|Long expected";
            if (message.test != null && message.hasOwnProperty("test")) {
                if (!Array.isArray(message.test))
                    return "test: array expected";
                for (var i = 0; i < message.test.length; ++i)
                    if (!$util.isString(message.test[i]))
                        return "test: string[] expected";
            }
            return null;
        };

        /**
         * Creates a C2GW_HeartBeat message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.C2GW_HeartBeat
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.C2GW_HeartBeat} C2GW_HeartBeat
         */
        C2GW_HeartBeat.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.C2GW_HeartBeat)
                return object;
            var message = new $root.msg.C2GW_HeartBeat();
            if (object.uid != null)
                if ($util.Long)
                    (message.uid = $util.Long.fromValue(object.uid)).unsigned = false;
                else if (typeof object.uid === "string")
                    message.uid = parseInt(object.uid, 10);
                else if (typeof object.uid === "number")
                    message.uid = object.uid;
                else if (typeof object.uid === "object")
                    message.uid = new $util.LongBits(object.uid.low >>> 0, object.uid.high >>> 0).toNumber();
            if (object.time != null)
                if ($util.Long)
                    (message.time = $util.Long.fromValue(object.time)).unsigned = false;
                else if (typeof object.time === "string")
                    message.time = parseInt(object.time, 10);
                else if (typeof object.time === "number")
                    message.time = object.time;
                else if (typeof object.time === "object")
                    message.time = new $util.LongBits(object.time.low >>> 0, object.time.high >>> 0).toNumber();
            if (object.test) {
                if (!Array.isArray(object.test))
                    throw TypeError(".msg.C2GW_HeartBeat.test: array expected");
                message.test = [];
                for (var i = 0; i < object.test.length; ++i)
                    message.test[i] = String(object.test[i]);
            }
            return message;
        };

        /**
         * Creates a plain object from a C2GW_HeartBeat message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.C2GW_HeartBeat
         * @static
         * @param {msg.C2GW_HeartBeat} message C2GW_HeartBeat
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        C2GW_HeartBeat.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.test = [];
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.uid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.uid = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.time = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.time = options.longs === String ? "0" : 0;
            }
            if (message.uid != null && message.hasOwnProperty("uid"))
                if (typeof message.uid === "number")
                    object.uid = options.longs === String ? String(message.uid) : message.uid;
                else
                    object.uid = options.longs === String ? $util.Long.prototype.toString.call(message.uid) : options.longs === Number ? new $util.LongBits(message.uid.low >>> 0, message.uid.high >>> 0).toNumber() : message.uid;
            if (message.time != null && message.hasOwnProperty("time"))
                if (typeof message.time === "number")
                    object.time = options.longs === String ? String(message.time) : message.time;
                else
                    object.time = options.longs === String ? $util.Long.prototype.toString.call(message.time) : options.longs === Number ? new $util.LongBits(message.time.low >>> 0, message.time.high >>> 0).toNumber() : message.time;
            if (message.test && message.test.length) {
                object.test = [];
                for (var j = 0; j < message.test.length; ++j)
                    object.test[j] = message.test[j];
            }
            return object;
        };

        /**
         * Converts this C2GW_HeartBeat to JSON.
         * @function toJSON
         * @memberof msg.C2GW_HeartBeat
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        C2GW_HeartBeat.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return C2GW_HeartBeat;
    })();

    msg.GW2C_HeartBeat = (function() {

        /**
         * Properties of a GW2C_HeartBeat.
         * @memberof msg
         * @interface IGW2C_HeartBeat
         * @property {number|Long|null} [uid] GW2C_HeartBeat uid
         * @property {number|Long|null} [time] GW2C_HeartBeat time
         * @property {Array.<string>|null} [test] GW2C_HeartBeat test
         */

        /**
         * Constructs a new GW2C_HeartBeat.
         * @memberof msg
         * @classdesc Represents a GW2C_HeartBeat.
         * @implements IGW2C_HeartBeat
         * @constructor
         * @param {msg.IGW2C_HeartBeat=} [properties] Properties to set
         */
        function GW2C_HeartBeat(properties) {
            this.test = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GW2C_HeartBeat uid.
         * @member {number|Long} uid
         * @memberof msg.GW2C_HeartBeat
         * @instance
         */
        GW2C_HeartBeat.prototype.uid = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * GW2C_HeartBeat time.
         * @member {number|Long} time
         * @memberof msg.GW2C_HeartBeat
         * @instance
         */
        GW2C_HeartBeat.prototype.time = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * GW2C_HeartBeat test.
         * @member {Array.<string>} test
         * @memberof msg.GW2C_HeartBeat
         * @instance
         */
        GW2C_HeartBeat.prototype.test = $util.emptyArray;

        /**
         * Creates a new GW2C_HeartBeat instance using the specified properties.
         * @function create
         * @memberof msg.GW2C_HeartBeat
         * @static
         * @param {msg.IGW2C_HeartBeat=} [properties] Properties to set
         * @returns {msg.GW2C_HeartBeat} GW2C_HeartBeat instance
         */
        GW2C_HeartBeat.create = function create(properties) {
            return new GW2C_HeartBeat(properties);
        };

        /**
         * Encodes the specified GW2C_HeartBeat message. Does not implicitly {@link msg.GW2C_HeartBeat.verify|verify} messages.
         * @function encode
         * @memberof msg.GW2C_HeartBeat
         * @static
         * @param {msg.IGW2C_HeartBeat} message GW2C_HeartBeat message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_HeartBeat.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.uid != null && message.hasOwnProperty("uid"))
                writer.uint32(/* id 1, wireType 0 =*/8).int64(message.uid);
            if (message.time != null && message.hasOwnProperty("time"))
                writer.uint32(/* id 2, wireType 0 =*/16).int64(message.time);
            if (message.test != null && message.test.length)
                for (var i = 0; i < message.test.length; ++i)
                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.test[i]);
            return writer;
        };

        /**
         * Encodes the specified GW2C_HeartBeat message, length delimited. Does not implicitly {@link msg.GW2C_HeartBeat.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.GW2C_HeartBeat
         * @static
         * @param {msg.IGW2C_HeartBeat} message GW2C_HeartBeat message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_HeartBeat.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GW2C_HeartBeat message from the specified reader or buffer.
         * @function decode
         * @memberof msg.GW2C_HeartBeat
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.GW2C_HeartBeat} GW2C_HeartBeat
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_HeartBeat.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.GW2C_HeartBeat();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.uid = reader.int64();
                    break;
                case 2:
                    message.time = reader.int64();
                    break;
                case 3:
                    if (!(message.test && message.test.length))
                        message.test = [];
                    message.test.push(reader.string());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GW2C_HeartBeat message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.GW2C_HeartBeat
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.GW2C_HeartBeat} GW2C_HeartBeat
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_HeartBeat.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GW2C_HeartBeat message.
         * @function verify
         * @memberof msg.GW2C_HeartBeat
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GW2C_HeartBeat.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.uid != null && message.hasOwnProperty("uid"))
                if (!$util.isInteger(message.uid) && !(message.uid && $util.isInteger(message.uid.low) && $util.isInteger(message.uid.high)))
                    return "uid: integer|Long expected";
            if (message.time != null && message.hasOwnProperty("time"))
                if (!$util.isInteger(message.time) && !(message.time && $util.isInteger(message.time.low) && $util.isInteger(message.time.high)))
                    return "time: integer|Long expected";
            if (message.test != null && message.hasOwnProperty("test")) {
                if (!Array.isArray(message.test))
                    return "test: array expected";
                for (var i = 0; i < message.test.length; ++i)
                    if (!$util.isString(message.test[i]))
                        return "test: string[] expected";
            }
            return null;
        };

        /**
         * Creates a GW2C_HeartBeat message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.GW2C_HeartBeat
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.GW2C_HeartBeat} GW2C_HeartBeat
         */
        GW2C_HeartBeat.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.GW2C_HeartBeat)
                return object;
            var message = new $root.msg.GW2C_HeartBeat();
            if (object.uid != null)
                if ($util.Long)
                    (message.uid = $util.Long.fromValue(object.uid)).unsigned = false;
                else if (typeof object.uid === "string")
                    message.uid = parseInt(object.uid, 10);
                else if (typeof object.uid === "number")
                    message.uid = object.uid;
                else if (typeof object.uid === "object")
                    message.uid = new $util.LongBits(object.uid.low >>> 0, object.uid.high >>> 0).toNumber();
            if (object.time != null)
                if ($util.Long)
                    (message.time = $util.Long.fromValue(object.time)).unsigned = false;
                else if (typeof object.time === "string")
                    message.time = parseInt(object.time, 10);
                else if (typeof object.time === "number")
                    message.time = object.time;
                else if (typeof object.time === "object")
                    message.time = new $util.LongBits(object.time.low >>> 0, object.time.high >>> 0).toNumber();
            if (object.test) {
                if (!Array.isArray(object.test))
                    throw TypeError(".msg.GW2C_HeartBeat.test: array expected");
                message.test = [];
                for (var i = 0; i < object.test.length; ++i)
                    message.test[i] = String(object.test[i]);
            }
            return message;
        };

        /**
         * Creates a plain object from a GW2C_HeartBeat message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.GW2C_HeartBeat
         * @static
         * @param {msg.GW2C_HeartBeat} message GW2C_HeartBeat
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GW2C_HeartBeat.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.test = [];
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.uid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.uid = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.time = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.time = options.longs === String ? "0" : 0;
            }
            if (message.uid != null && message.hasOwnProperty("uid"))
                if (typeof message.uid === "number")
                    object.uid = options.longs === String ? String(message.uid) : message.uid;
                else
                    object.uid = options.longs === String ? $util.Long.prototype.toString.call(message.uid) : options.longs === Number ? new $util.LongBits(message.uid.low >>> 0, message.uid.high >>> 0).toNumber() : message.uid;
            if (message.time != null && message.hasOwnProperty("time"))
                if (typeof message.time === "number")
                    object.time = options.longs === String ? String(message.time) : message.time;
                else
                    object.time = options.longs === String ? $util.Long.prototype.toString.call(message.time) : options.longs === Number ? new $util.LongBits(message.time.low >>> 0, message.time.high >>> 0).toNumber() : message.time;
            if (message.test && message.test.length) {
                object.test = [];
                for (var j = 0; j < message.test.length; ++j)
                    object.test[j] = message.test[j];
            }
            return object;
        };

        /**
         * Converts this GW2C_HeartBeat to JSON.
         * @function toJSON
         * @memberof msg.GW2C_HeartBeat
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GW2C_HeartBeat.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GW2C_HeartBeat;
    })();

    msg.C2GW_ReqStartGame = (function() {

        /**
         * Properties of a C2GW_ReqStartGame.
         * @memberof msg
         * @interface IC2GW_ReqStartGame
         * @property {number|null} [gamekind] C2GW_ReqStartGame gamekind
         */

        /**
         * Constructs a new C2GW_ReqStartGame.
         * @memberof msg
         * @classdesc Represents a C2GW_ReqStartGame.
         * @implements IC2GW_ReqStartGame
         * @constructor
         * @param {msg.IC2GW_ReqStartGame=} [properties] Properties to set
         */
        function C2GW_ReqStartGame(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * C2GW_ReqStartGame gamekind.
         * @member {number} gamekind
         * @memberof msg.C2GW_ReqStartGame
         * @instance
         */
        C2GW_ReqStartGame.prototype.gamekind = 0;

        /**
         * Creates a new C2GW_ReqStartGame instance using the specified properties.
         * @function create
         * @memberof msg.C2GW_ReqStartGame
         * @static
         * @param {msg.IC2GW_ReqStartGame=} [properties] Properties to set
         * @returns {msg.C2GW_ReqStartGame} C2GW_ReqStartGame instance
         */
        C2GW_ReqStartGame.create = function create(properties) {
            return new C2GW_ReqStartGame(properties);
        };

        /**
         * Encodes the specified C2GW_ReqStartGame message. Does not implicitly {@link msg.C2GW_ReqStartGame.verify|verify} messages.
         * @function encode
         * @memberof msg.C2GW_ReqStartGame
         * @static
         * @param {msg.IC2GW_ReqStartGame} message C2GW_ReqStartGame message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_ReqStartGame.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.gamekind != null && message.hasOwnProperty("gamekind"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.gamekind);
            return writer;
        };

        /**
         * Encodes the specified C2GW_ReqStartGame message, length delimited. Does not implicitly {@link msg.C2GW_ReqStartGame.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.C2GW_ReqStartGame
         * @static
         * @param {msg.IC2GW_ReqStartGame} message C2GW_ReqStartGame message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_ReqStartGame.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a C2GW_ReqStartGame message from the specified reader or buffer.
         * @function decode
         * @memberof msg.C2GW_ReqStartGame
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.C2GW_ReqStartGame} C2GW_ReqStartGame
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_ReqStartGame.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.C2GW_ReqStartGame();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.gamekind = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a C2GW_ReqStartGame message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.C2GW_ReqStartGame
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.C2GW_ReqStartGame} C2GW_ReqStartGame
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_ReqStartGame.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a C2GW_ReqStartGame message.
         * @function verify
         * @memberof msg.C2GW_ReqStartGame
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        C2GW_ReqStartGame.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.gamekind != null && message.hasOwnProperty("gamekind"))
                if (!$util.isInteger(message.gamekind))
                    return "gamekind: integer expected";
            return null;
        };

        /**
         * Creates a C2GW_ReqStartGame message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.C2GW_ReqStartGame
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.C2GW_ReqStartGame} C2GW_ReqStartGame
         */
        C2GW_ReqStartGame.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.C2GW_ReqStartGame)
                return object;
            var message = new $root.msg.C2GW_ReqStartGame();
            if (object.gamekind != null)
                message.gamekind = object.gamekind | 0;
            return message;
        };

        /**
         * Creates a plain object from a C2GW_ReqStartGame message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.C2GW_ReqStartGame
         * @static
         * @param {msg.C2GW_ReqStartGame} message C2GW_ReqStartGame
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        C2GW_ReqStartGame.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.gamekind = 0;
            if (message.gamekind != null && message.hasOwnProperty("gamekind"))
                object.gamekind = message.gamekind;
            return object;
        };

        /**
         * Converts this C2GW_ReqStartGame to JSON.
         * @function toJSON
         * @memberof msg.C2GW_ReqStartGame
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        C2GW_ReqStartGame.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return C2GW_ReqStartGame;
    })();

    msg.GW2C_RetStartGame = (function() {

        /**
         * Properties of a GW2C_RetStartGame.
         * @memberof msg
         * @interface IGW2C_RetStartGame
         * @property {string|null} [errcode] GW2C_RetStartGame errcode
         * @property {number|Long|null} [roomid] GW2C_RetStartGame roomid
         */

        /**
         * Constructs a new GW2C_RetStartGame.
         * @memberof msg
         * @classdesc Represents a GW2C_RetStartGame.
         * @implements IGW2C_RetStartGame
         * @constructor
         * @param {msg.IGW2C_RetStartGame=} [properties] Properties to set
         */
        function GW2C_RetStartGame(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GW2C_RetStartGame errcode.
         * @member {string} errcode
         * @memberof msg.GW2C_RetStartGame
         * @instance
         */
        GW2C_RetStartGame.prototype.errcode = "";

        /**
         * GW2C_RetStartGame roomid.
         * @member {number|Long} roomid
         * @memberof msg.GW2C_RetStartGame
         * @instance
         */
        GW2C_RetStartGame.prototype.roomid = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * Creates a new GW2C_RetStartGame instance using the specified properties.
         * @function create
         * @memberof msg.GW2C_RetStartGame
         * @static
         * @param {msg.IGW2C_RetStartGame=} [properties] Properties to set
         * @returns {msg.GW2C_RetStartGame} GW2C_RetStartGame instance
         */
        GW2C_RetStartGame.create = function create(properties) {
            return new GW2C_RetStartGame(properties);
        };

        /**
         * Encodes the specified GW2C_RetStartGame message. Does not implicitly {@link msg.GW2C_RetStartGame.verify|verify} messages.
         * @function encode
         * @memberof msg.GW2C_RetStartGame
         * @static
         * @param {msg.IGW2C_RetStartGame} message GW2C_RetStartGame message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_RetStartGame.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.errcode != null && message.hasOwnProperty("errcode"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.errcode);
            if (message.roomid != null && message.hasOwnProperty("roomid"))
                writer.uint32(/* id 2, wireType 0 =*/16).int64(message.roomid);
            return writer;
        };

        /**
         * Encodes the specified GW2C_RetStartGame message, length delimited. Does not implicitly {@link msg.GW2C_RetStartGame.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.GW2C_RetStartGame
         * @static
         * @param {msg.IGW2C_RetStartGame} message GW2C_RetStartGame message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_RetStartGame.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GW2C_RetStartGame message from the specified reader or buffer.
         * @function decode
         * @memberof msg.GW2C_RetStartGame
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.GW2C_RetStartGame} GW2C_RetStartGame
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_RetStartGame.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.GW2C_RetStartGame();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.errcode = reader.string();
                    break;
                case 2:
                    message.roomid = reader.int64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GW2C_RetStartGame message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.GW2C_RetStartGame
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.GW2C_RetStartGame} GW2C_RetStartGame
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_RetStartGame.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GW2C_RetStartGame message.
         * @function verify
         * @memberof msg.GW2C_RetStartGame
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GW2C_RetStartGame.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.errcode != null && message.hasOwnProperty("errcode"))
                if (!$util.isString(message.errcode))
                    return "errcode: string expected";
            if (message.roomid != null && message.hasOwnProperty("roomid"))
                if (!$util.isInteger(message.roomid) && !(message.roomid && $util.isInteger(message.roomid.low) && $util.isInteger(message.roomid.high)))
                    return "roomid: integer|Long expected";
            return null;
        };

        /**
         * Creates a GW2C_RetStartGame message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.GW2C_RetStartGame
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.GW2C_RetStartGame} GW2C_RetStartGame
         */
        GW2C_RetStartGame.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.GW2C_RetStartGame)
                return object;
            var message = new $root.msg.GW2C_RetStartGame();
            if (object.errcode != null)
                message.errcode = String(object.errcode);
            if (object.roomid != null)
                if ($util.Long)
                    (message.roomid = $util.Long.fromValue(object.roomid)).unsigned = false;
                else if (typeof object.roomid === "string")
                    message.roomid = parseInt(object.roomid, 10);
                else if (typeof object.roomid === "number")
                    message.roomid = object.roomid;
                else if (typeof object.roomid === "object")
                    message.roomid = new $util.LongBits(object.roomid.low >>> 0, object.roomid.high >>> 0).toNumber();
            return message;
        };

        /**
         * Creates a plain object from a GW2C_RetStartGame message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.GW2C_RetStartGame
         * @static
         * @param {msg.GW2C_RetStartGame} message GW2C_RetStartGame
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GW2C_RetStartGame.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.errcode = "";
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.roomid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.roomid = options.longs === String ? "0" : 0;
            }
            if (message.errcode != null && message.hasOwnProperty("errcode"))
                object.errcode = message.errcode;
            if (message.roomid != null && message.hasOwnProperty("roomid"))
                if (typeof message.roomid === "number")
                    object.roomid = options.longs === String ? String(message.roomid) : message.roomid;
                else
                    object.roomid = options.longs === String ? $util.Long.prototype.toString.call(message.roomid) : options.longs === Number ? new $util.LongBits(message.roomid.low >>> 0, message.roomid.high >>> 0).toNumber() : message.roomid;
            return object;
        };

        /**
         * Converts this GW2C_RetStartGame to JSON.
         * @function toJSON
         * @memberof msg.GW2C_RetStartGame
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GW2C_RetStartGame.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GW2C_RetStartGame;
    })();

    msg.GW2C_Ret7DayReward = (function() {

        /**
         * Properties of a GW2C_Ret7DayReward.
         * @memberof msg
         * @interface IGW2C_Ret7DayReward
         * @property {number|null} [day] GW2C_Ret7DayReward day
         */

        /**
         * Constructs a new GW2C_Ret7DayReward.
         * @memberof msg
         * @classdesc Represents a GW2C_Ret7DayReward.
         * @implements IGW2C_Ret7DayReward
         * @constructor
         * @param {msg.IGW2C_Ret7DayReward=} [properties] Properties to set
         */
        function GW2C_Ret7DayReward(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GW2C_Ret7DayReward day.
         * @member {number} day
         * @memberof msg.GW2C_Ret7DayReward
         * @instance
         */
        GW2C_Ret7DayReward.prototype.day = 0;

        /**
         * Creates a new GW2C_Ret7DayReward instance using the specified properties.
         * @function create
         * @memberof msg.GW2C_Ret7DayReward
         * @static
         * @param {msg.IGW2C_Ret7DayReward=} [properties] Properties to set
         * @returns {msg.GW2C_Ret7DayReward} GW2C_Ret7DayReward instance
         */
        GW2C_Ret7DayReward.create = function create(properties) {
            return new GW2C_Ret7DayReward(properties);
        };

        /**
         * Encodes the specified GW2C_Ret7DayReward message. Does not implicitly {@link msg.GW2C_Ret7DayReward.verify|verify} messages.
         * @function encode
         * @memberof msg.GW2C_Ret7DayReward
         * @static
         * @param {msg.IGW2C_Ret7DayReward} message GW2C_Ret7DayReward message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_Ret7DayReward.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.day != null && message.hasOwnProperty("day"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.day);
            return writer;
        };

        /**
         * Encodes the specified GW2C_Ret7DayReward message, length delimited. Does not implicitly {@link msg.GW2C_Ret7DayReward.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.GW2C_Ret7DayReward
         * @static
         * @param {msg.IGW2C_Ret7DayReward} message GW2C_Ret7DayReward message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_Ret7DayReward.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GW2C_Ret7DayReward message from the specified reader or buffer.
         * @function decode
         * @memberof msg.GW2C_Ret7DayReward
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.GW2C_Ret7DayReward} GW2C_Ret7DayReward
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_Ret7DayReward.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.GW2C_Ret7DayReward();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.day = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GW2C_Ret7DayReward message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.GW2C_Ret7DayReward
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.GW2C_Ret7DayReward} GW2C_Ret7DayReward
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_Ret7DayReward.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GW2C_Ret7DayReward message.
         * @function verify
         * @memberof msg.GW2C_Ret7DayReward
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GW2C_Ret7DayReward.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.day != null && message.hasOwnProperty("day"))
                if (!$util.isInteger(message.day))
                    return "day: integer expected";
            return null;
        };

        /**
         * Creates a GW2C_Ret7DayReward message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.GW2C_Ret7DayReward
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.GW2C_Ret7DayReward} GW2C_Ret7DayReward
         */
        GW2C_Ret7DayReward.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.GW2C_Ret7DayReward)
                return object;
            var message = new $root.msg.GW2C_Ret7DayReward();
            if (object.day != null)
                message.day = object.day >>> 0;
            return message;
        };

        /**
         * Creates a plain object from a GW2C_Ret7DayReward message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.GW2C_Ret7DayReward
         * @static
         * @param {msg.GW2C_Ret7DayReward} message GW2C_Ret7DayReward
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GW2C_Ret7DayReward.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.day = 0;
            if (message.day != null && message.hasOwnProperty("day"))
                object.day = message.day;
            return object;
        };

        /**
         * Converts this GW2C_Ret7DayReward to JSON.
         * @function toJSON
         * @memberof msg.GW2C_Ret7DayReward
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GW2C_Ret7DayReward.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GW2C_Ret7DayReward;
    })();

    msg.C2GW_Get7DayReward = (function() {

        /**
         * Properties of a C2GW_Get7DayReward.
         * @memberof msg
         * @interface IC2GW_Get7DayReward
         */

        /**
         * Constructs a new C2GW_Get7DayReward.
         * @memberof msg
         * @classdesc Represents a C2GW_Get7DayReward.
         * @implements IC2GW_Get7DayReward
         * @constructor
         * @param {msg.IC2GW_Get7DayReward=} [properties] Properties to set
         */
        function C2GW_Get7DayReward(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Creates a new C2GW_Get7DayReward instance using the specified properties.
         * @function create
         * @memberof msg.C2GW_Get7DayReward
         * @static
         * @param {msg.IC2GW_Get7DayReward=} [properties] Properties to set
         * @returns {msg.C2GW_Get7DayReward} C2GW_Get7DayReward instance
         */
        C2GW_Get7DayReward.create = function create(properties) {
            return new C2GW_Get7DayReward(properties);
        };

        /**
         * Encodes the specified C2GW_Get7DayReward message. Does not implicitly {@link msg.C2GW_Get7DayReward.verify|verify} messages.
         * @function encode
         * @memberof msg.C2GW_Get7DayReward
         * @static
         * @param {msg.IC2GW_Get7DayReward} message C2GW_Get7DayReward message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_Get7DayReward.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };

        /**
         * Encodes the specified C2GW_Get7DayReward message, length delimited. Does not implicitly {@link msg.C2GW_Get7DayReward.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.C2GW_Get7DayReward
         * @static
         * @param {msg.IC2GW_Get7DayReward} message C2GW_Get7DayReward message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_Get7DayReward.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a C2GW_Get7DayReward message from the specified reader or buffer.
         * @function decode
         * @memberof msg.C2GW_Get7DayReward
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.C2GW_Get7DayReward} C2GW_Get7DayReward
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_Get7DayReward.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.C2GW_Get7DayReward();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a C2GW_Get7DayReward message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.C2GW_Get7DayReward
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.C2GW_Get7DayReward} C2GW_Get7DayReward
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_Get7DayReward.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a C2GW_Get7DayReward message.
         * @function verify
         * @memberof msg.C2GW_Get7DayReward
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        C2GW_Get7DayReward.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            return null;
        };

        /**
         * Creates a C2GW_Get7DayReward message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.C2GW_Get7DayReward
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.C2GW_Get7DayReward} C2GW_Get7DayReward
         */
        C2GW_Get7DayReward.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.C2GW_Get7DayReward)
                return object;
            return new $root.msg.C2GW_Get7DayReward();
        };

        /**
         * Creates a plain object from a C2GW_Get7DayReward message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.C2GW_Get7DayReward
         * @static
         * @param {msg.C2GW_Get7DayReward} message C2GW_Get7DayReward
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        C2GW_Get7DayReward.toObject = function toObject() {
            return {};
        };

        /**
         * Converts this C2GW_Get7DayReward to JSON.
         * @function toJSON
         * @memberof msg.C2GW_Get7DayReward
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        C2GW_Get7DayReward.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return C2GW_Get7DayReward;
    })();

    msg.C2GW_SendWechatAuthCode = (function() {

        /**
         * Properties of a C2GW_SendWechatAuthCode.
         * @memberof msg
         * @interface IC2GW_SendWechatAuthCode
         * @property {string|null} [code] C2GW_SendWechatAuthCode code
         */

        /**
         * Constructs a new C2GW_SendWechatAuthCode.
         * @memberof msg
         * @classdesc Represents a C2GW_SendWechatAuthCode.
         * @implements IC2GW_SendWechatAuthCode
         * @constructor
         * @param {msg.IC2GW_SendWechatAuthCode=} [properties] Properties to set
         */
        function C2GW_SendWechatAuthCode(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * C2GW_SendWechatAuthCode code.
         * @member {string} code
         * @memberof msg.C2GW_SendWechatAuthCode
         * @instance
         */
        C2GW_SendWechatAuthCode.prototype.code = "";

        /**
         * Creates a new C2GW_SendWechatAuthCode instance using the specified properties.
         * @function create
         * @memberof msg.C2GW_SendWechatAuthCode
         * @static
         * @param {msg.IC2GW_SendWechatAuthCode=} [properties] Properties to set
         * @returns {msg.C2GW_SendWechatAuthCode} C2GW_SendWechatAuthCode instance
         */
        C2GW_SendWechatAuthCode.create = function create(properties) {
            return new C2GW_SendWechatAuthCode(properties);
        };

        /**
         * Encodes the specified C2GW_SendWechatAuthCode message. Does not implicitly {@link msg.C2GW_SendWechatAuthCode.verify|verify} messages.
         * @function encode
         * @memberof msg.C2GW_SendWechatAuthCode
         * @static
         * @param {msg.IC2GW_SendWechatAuthCode} message C2GW_SendWechatAuthCode message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_SendWechatAuthCode.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.code != null && message.hasOwnProperty("code"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.code);
            return writer;
        };

        /**
         * Encodes the specified C2GW_SendWechatAuthCode message, length delimited. Does not implicitly {@link msg.C2GW_SendWechatAuthCode.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.C2GW_SendWechatAuthCode
         * @static
         * @param {msg.IC2GW_SendWechatAuthCode} message C2GW_SendWechatAuthCode message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_SendWechatAuthCode.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a C2GW_SendWechatAuthCode message from the specified reader or buffer.
         * @function decode
         * @memberof msg.C2GW_SendWechatAuthCode
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.C2GW_SendWechatAuthCode} C2GW_SendWechatAuthCode
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_SendWechatAuthCode.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.C2GW_SendWechatAuthCode();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.code = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a C2GW_SendWechatAuthCode message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.C2GW_SendWechatAuthCode
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.C2GW_SendWechatAuthCode} C2GW_SendWechatAuthCode
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_SendWechatAuthCode.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a C2GW_SendWechatAuthCode message.
         * @function verify
         * @memberof msg.C2GW_SendWechatAuthCode
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        C2GW_SendWechatAuthCode.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.code != null && message.hasOwnProperty("code"))
                if (!$util.isString(message.code))
                    return "code: string expected";
            return null;
        };

        /**
         * Creates a C2GW_SendWechatAuthCode message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.C2GW_SendWechatAuthCode
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.C2GW_SendWechatAuthCode} C2GW_SendWechatAuthCode
         */
        C2GW_SendWechatAuthCode.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.C2GW_SendWechatAuthCode)
                return object;
            var message = new $root.msg.C2GW_SendWechatAuthCode();
            if (object.code != null)
                message.code = String(object.code);
            return message;
        };

        /**
         * Creates a plain object from a C2GW_SendWechatAuthCode message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.C2GW_SendWechatAuthCode
         * @static
         * @param {msg.C2GW_SendWechatAuthCode} message C2GW_SendWechatAuthCode
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        C2GW_SendWechatAuthCode.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.code = "";
            if (message.code != null && message.hasOwnProperty("code"))
                object.code = message.code;
            return object;
        };

        /**
         * Converts this C2GW_SendWechatAuthCode to JSON.
         * @function toJSON
         * @memberof msg.C2GW_SendWechatAuthCode
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        C2GW_SendWechatAuthCode.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return C2GW_SendWechatAuthCode;
    })();

    msg.C2L_ReqLogin = (function() {

        /**
         * Properties of a C2L_ReqLogin.
         * @memberof msg
         * @interface IC2L_ReqLogin
         * @property {string|null} [account] C2L_ReqLogin account
         * @property {string|null} [passwd] C2L_ReqLogin passwd
         */

        /**
         * Constructs a new C2L_ReqLogin.
         * @memberof msg
         * @classdesc Represents a C2L_ReqLogin.
         * @implements IC2L_ReqLogin
         * @constructor
         * @param {msg.IC2L_ReqLogin=} [properties] Properties to set
         */
        function C2L_ReqLogin(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * C2L_ReqLogin account.
         * @member {string} account
         * @memberof msg.C2L_ReqLogin
         * @instance
         */
        C2L_ReqLogin.prototype.account = "";

        /**
         * C2L_ReqLogin passwd.
         * @member {string} passwd
         * @memberof msg.C2L_ReqLogin
         * @instance
         */
        C2L_ReqLogin.prototype.passwd = "";

        /**
         * Creates a new C2L_ReqLogin instance using the specified properties.
         * @function create
         * @memberof msg.C2L_ReqLogin
         * @static
         * @param {msg.IC2L_ReqLogin=} [properties] Properties to set
         * @returns {msg.C2L_ReqLogin} C2L_ReqLogin instance
         */
        C2L_ReqLogin.create = function create(properties) {
            return new C2L_ReqLogin(properties);
        };

        /**
         * Encodes the specified C2L_ReqLogin message. Does not implicitly {@link msg.C2L_ReqLogin.verify|verify} messages.
         * @function encode
         * @memberof msg.C2L_ReqLogin
         * @static
         * @param {msg.IC2L_ReqLogin} message C2L_ReqLogin message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2L_ReqLogin.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.account != null && message.hasOwnProperty("account"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.account);
            if (message.passwd != null && message.hasOwnProperty("passwd"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.passwd);
            return writer;
        };

        /**
         * Encodes the specified C2L_ReqLogin message, length delimited. Does not implicitly {@link msg.C2L_ReqLogin.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.C2L_ReqLogin
         * @static
         * @param {msg.IC2L_ReqLogin} message C2L_ReqLogin message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2L_ReqLogin.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a C2L_ReqLogin message from the specified reader or buffer.
         * @function decode
         * @memberof msg.C2L_ReqLogin
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.C2L_ReqLogin} C2L_ReqLogin
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2L_ReqLogin.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.C2L_ReqLogin();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.account = reader.string();
                    break;
                case 2:
                    message.passwd = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a C2L_ReqLogin message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.C2L_ReqLogin
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.C2L_ReqLogin} C2L_ReqLogin
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2L_ReqLogin.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a C2L_ReqLogin message.
         * @function verify
         * @memberof msg.C2L_ReqLogin
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        C2L_ReqLogin.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.account != null && message.hasOwnProperty("account"))
                if (!$util.isString(message.account))
                    return "account: string expected";
            if (message.passwd != null && message.hasOwnProperty("passwd"))
                if (!$util.isString(message.passwd))
                    return "passwd: string expected";
            return null;
        };

        /**
         * Creates a C2L_ReqLogin message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.C2L_ReqLogin
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.C2L_ReqLogin} C2L_ReqLogin
         */
        C2L_ReqLogin.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.C2L_ReqLogin)
                return object;
            var message = new $root.msg.C2L_ReqLogin();
            if (object.account != null)
                message.account = String(object.account);
            if (object.passwd != null)
                message.passwd = String(object.passwd);
            return message;
        };

        /**
         * Creates a plain object from a C2L_ReqLogin message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.C2L_ReqLogin
         * @static
         * @param {msg.C2L_ReqLogin} message C2L_ReqLogin
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        C2L_ReqLogin.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.account = "";
                object.passwd = "";
            }
            if (message.account != null && message.hasOwnProperty("account"))
                object.account = message.account;
            if (message.passwd != null && message.hasOwnProperty("passwd"))
                object.passwd = message.passwd;
            return object;
        };

        /**
         * Converts this C2L_ReqLogin to JSON.
         * @function toJSON
         * @memberof msg.C2L_ReqLogin
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        C2L_ReqLogin.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return C2L_ReqLogin;
    })();

    msg.L2C_RetLogin = (function() {

        /**
         * Properties of a L2C_RetLogin.
         * @memberof msg
         * @interface IL2C_RetLogin
         * @property {number|null} [result] L2C_RetLogin result
         * @property {string|null} [reason] L2C_RetLogin reason
         * @property {msg.IIpHost|null} [gatehost] L2C_RetLogin gatehost
         * @property {string|null} [verifykey] L2C_RetLogin verifykey
         */

        /**
         * Constructs a new L2C_RetLogin.
         * @memberof msg
         * @classdesc Represents a L2C_RetLogin.
         * @implements IL2C_RetLogin
         * @constructor
         * @param {msg.IL2C_RetLogin=} [properties] Properties to set
         */
        function L2C_RetLogin(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * L2C_RetLogin result.
         * @member {number} result
         * @memberof msg.L2C_RetLogin
         * @instance
         */
        L2C_RetLogin.prototype.result = 0;

        /**
         * L2C_RetLogin reason.
         * @member {string} reason
         * @memberof msg.L2C_RetLogin
         * @instance
         */
        L2C_RetLogin.prototype.reason = "";

        /**
         * L2C_RetLogin gatehost.
         * @member {msg.IIpHost|null|undefined} gatehost
         * @memberof msg.L2C_RetLogin
         * @instance
         */
        L2C_RetLogin.prototype.gatehost = null;

        /**
         * L2C_RetLogin verifykey.
         * @member {string} verifykey
         * @memberof msg.L2C_RetLogin
         * @instance
         */
        L2C_RetLogin.prototype.verifykey = "";

        /**
         * Creates a new L2C_RetLogin instance using the specified properties.
         * @function create
         * @memberof msg.L2C_RetLogin
         * @static
         * @param {msg.IL2C_RetLogin=} [properties] Properties to set
         * @returns {msg.L2C_RetLogin} L2C_RetLogin instance
         */
        L2C_RetLogin.create = function create(properties) {
            return new L2C_RetLogin(properties);
        };

        /**
         * Encodes the specified L2C_RetLogin message. Does not implicitly {@link msg.L2C_RetLogin.verify|verify} messages.
         * @function encode
         * @memberof msg.L2C_RetLogin
         * @static
         * @param {msg.IL2C_RetLogin} message L2C_RetLogin message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        L2C_RetLogin.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.result != null && message.hasOwnProperty("result"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.result);
            if (message.reason != null && message.hasOwnProperty("reason"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.reason);
            if (message.gatehost != null && message.hasOwnProperty("gatehost"))
                $root.msg.IpHost.encode(message.gatehost, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            if (message.verifykey != null && message.hasOwnProperty("verifykey"))
                writer.uint32(/* id 5, wireType 2 =*/42).string(message.verifykey);
            return writer;
        };

        /**
         * Encodes the specified L2C_RetLogin message, length delimited. Does not implicitly {@link msg.L2C_RetLogin.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.L2C_RetLogin
         * @static
         * @param {msg.IL2C_RetLogin} message L2C_RetLogin message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        L2C_RetLogin.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a L2C_RetLogin message from the specified reader or buffer.
         * @function decode
         * @memberof msg.L2C_RetLogin
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.L2C_RetLogin} L2C_RetLogin
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        L2C_RetLogin.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.L2C_RetLogin();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.result = reader.int32();
                    break;
                case 2:
                    message.reason = reader.string();
                    break;
                case 3:
                    message.gatehost = $root.msg.IpHost.decode(reader, reader.uint32());
                    break;
                case 5:
                    message.verifykey = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a L2C_RetLogin message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.L2C_RetLogin
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.L2C_RetLogin} L2C_RetLogin
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        L2C_RetLogin.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a L2C_RetLogin message.
         * @function verify
         * @memberof msg.L2C_RetLogin
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        L2C_RetLogin.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.result != null && message.hasOwnProperty("result"))
                if (!$util.isInteger(message.result))
                    return "result: integer expected";
            if (message.reason != null && message.hasOwnProperty("reason"))
                if (!$util.isString(message.reason))
                    return "reason: string expected";
            if (message.gatehost != null && message.hasOwnProperty("gatehost")) {
                var error = $root.msg.IpHost.verify(message.gatehost);
                if (error)
                    return "gatehost." + error;
            }
            if (message.verifykey != null && message.hasOwnProperty("verifykey"))
                if (!$util.isString(message.verifykey))
                    return "verifykey: string expected";
            return null;
        };

        /**
         * Creates a L2C_RetLogin message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.L2C_RetLogin
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.L2C_RetLogin} L2C_RetLogin
         */
        L2C_RetLogin.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.L2C_RetLogin)
                return object;
            var message = new $root.msg.L2C_RetLogin();
            if (object.result != null)
                message.result = object.result | 0;
            if (object.reason != null)
                message.reason = String(object.reason);
            if (object.gatehost != null) {
                if (typeof object.gatehost !== "object")
                    throw TypeError(".msg.L2C_RetLogin.gatehost: object expected");
                message.gatehost = $root.msg.IpHost.fromObject(object.gatehost);
            }
            if (object.verifykey != null)
                message.verifykey = String(object.verifykey);
            return message;
        };

        /**
         * Creates a plain object from a L2C_RetLogin message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.L2C_RetLogin
         * @static
         * @param {msg.L2C_RetLogin} message L2C_RetLogin
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        L2C_RetLogin.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.result = 0;
                object.reason = "";
                object.gatehost = null;
                object.verifykey = "";
            }
            if (message.result != null && message.hasOwnProperty("result"))
                object.result = message.result;
            if (message.reason != null && message.hasOwnProperty("reason"))
                object.reason = message.reason;
            if (message.gatehost != null && message.hasOwnProperty("gatehost"))
                object.gatehost = $root.msg.IpHost.toObject(message.gatehost, options);
            if (message.verifykey != null && message.hasOwnProperty("verifykey"))
                object.verifykey = message.verifykey;
            return object;
        };

        /**
         * Converts this L2C_RetLogin to JSON.
         * @function toJSON
         * @memberof msg.L2C_RetLogin
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        L2C_RetLogin.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return L2C_RetLogin;
    })();

    msg.C2L_ReqRegistAuthCode = (function() {

        /**
         * Properties of a C2L_ReqRegistAuthCode.
         * @memberof msg
         * @interface IC2L_ReqRegistAuthCode
         * @property {string|null} [phone] C2L_ReqRegistAuthCode phone
         */

        /**
         * Constructs a new C2L_ReqRegistAuthCode.
         * @memberof msg
         * @classdesc Represents a C2L_ReqRegistAuthCode.
         * @implements IC2L_ReqRegistAuthCode
         * @constructor
         * @param {msg.IC2L_ReqRegistAuthCode=} [properties] Properties to set
         */
        function C2L_ReqRegistAuthCode(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * C2L_ReqRegistAuthCode phone.
         * @member {string} phone
         * @memberof msg.C2L_ReqRegistAuthCode
         * @instance
         */
        C2L_ReqRegistAuthCode.prototype.phone = "";

        /**
         * Creates a new C2L_ReqRegistAuthCode instance using the specified properties.
         * @function create
         * @memberof msg.C2L_ReqRegistAuthCode
         * @static
         * @param {msg.IC2L_ReqRegistAuthCode=} [properties] Properties to set
         * @returns {msg.C2L_ReqRegistAuthCode} C2L_ReqRegistAuthCode instance
         */
        C2L_ReqRegistAuthCode.create = function create(properties) {
            return new C2L_ReqRegistAuthCode(properties);
        };

        /**
         * Encodes the specified C2L_ReqRegistAuthCode message. Does not implicitly {@link msg.C2L_ReqRegistAuthCode.verify|verify} messages.
         * @function encode
         * @memberof msg.C2L_ReqRegistAuthCode
         * @static
         * @param {msg.IC2L_ReqRegistAuthCode} message C2L_ReqRegistAuthCode message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2L_ReqRegistAuthCode.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.phone != null && message.hasOwnProperty("phone"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.phone);
            return writer;
        };

        /**
         * Encodes the specified C2L_ReqRegistAuthCode message, length delimited. Does not implicitly {@link msg.C2L_ReqRegistAuthCode.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.C2L_ReqRegistAuthCode
         * @static
         * @param {msg.IC2L_ReqRegistAuthCode} message C2L_ReqRegistAuthCode message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2L_ReqRegistAuthCode.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a C2L_ReqRegistAuthCode message from the specified reader or buffer.
         * @function decode
         * @memberof msg.C2L_ReqRegistAuthCode
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.C2L_ReqRegistAuthCode} C2L_ReqRegistAuthCode
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2L_ReqRegistAuthCode.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.C2L_ReqRegistAuthCode();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.phone = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a C2L_ReqRegistAuthCode message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.C2L_ReqRegistAuthCode
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.C2L_ReqRegistAuthCode} C2L_ReqRegistAuthCode
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2L_ReqRegistAuthCode.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a C2L_ReqRegistAuthCode message.
         * @function verify
         * @memberof msg.C2L_ReqRegistAuthCode
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        C2L_ReqRegistAuthCode.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.phone != null && message.hasOwnProperty("phone"))
                if (!$util.isString(message.phone))
                    return "phone: string expected";
            return null;
        };

        /**
         * Creates a C2L_ReqRegistAuthCode message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.C2L_ReqRegistAuthCode
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.C2L_ReqRegistAuthCode} C2L_ReqRegistAuthCode
         */
        C2L_ReqRegistAuthCode.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.C2L_ReqRegistAuthCode)
                return object;
            var message = new $root.msg.C2L_ReqRegistAuthCode();
            if (object.phone != null)
                message.phone = String(object.phone);
            return message;
        };

        /**
         * Creates a plain object from a C2L_ReqRegistAuthCode message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.C2L_ReqRegistAuthCode
         * @static
         * @param {msg.C2L_ReqRegistAuthCode} message C2L_ReqRegistAuthCode
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        C2L_ReqRegistAuthCode.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.phone = "";
            if (message.phone != null && message.hasOwnProperty("phone"))
                object.phone = message.phone;
            return object;
        };

        /**
         * Converts this C2L_ReqRegistAuthCode to JSON.
         * @function toJSON
         * @memberof msg.C2L_ReqRegistAuthCode
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        C2L_ReqRegistAuthCode.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return C2L_ReqRegistAuthCode;
    })();

    msg.C2L_ReqRegistAccount = (function() {

        /**
         * Properties of a C2L_ReqRegistAccount.
         * @memberof msg
         * @interface IC2L_ReqRegistAccount
         * @property {string|null} [phone] C2L_ReqRegistAccount phone
         * @property {string|null} [passwd] C2L_ReqRegistAccount passwd
         * @property {string|null} [authcode] C2L_ReqRegistAccount authcode
         * @property {string|null} [invitationcode] C2L_ReqRegistAccount invitationcode
         * @property {string|null} [nickname] C2L_ReqRegistAccount nickname
         */

        /**
         * Constructs a new C2L_ReqRegistAccount.
         * @memberof msg
         * @classdesc Represents a C2L_ReqRegistAccount.
         * @implements IC2L_ReqRegistAccount
         * @constructor
         * @param {msg.IC2L_ReqRegistAccount=} [properties] Properties to set
         */
        function C2L_ReqRegistAccount(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * C2L_ReqRegistAccount phone.
         * @member {string} phone
         * @memberof msg.C2L_ReqRegistAccount
         * @instance
         */
        C2L_ReqRegistAccount.prototype.phone = "";

        /**
         * C2L_ReqRegistAccount passwd.
         * @member {string} passwd
         * @memberof msg.C2L_ReqRegistAccount
         * @instance
         */
        C2L_ReqRegistAccount.prototype.passwd = "";

        /**
         * C2L_ReqRegistAccount authcode.
         * @member {string} authcode
         * @memberof msg.C2L_ReqRegistAccount
         * @instance
         */
        C2L_ReqRegistAccount.prototype.authcode = "";

        /**
         * C2L_ReqRegistAccount invitationcode.
         * @member {string} invitationcode
         * @memberof msg.C2L_ReqRegistAccount
         * @instance
         */
        C2L_ReqRegistAccount.prototype.invitationcode = "";

        /**
         * C2L_ReqRegistAccount nickname.
         * @member {string} nickname
         * @memberof msg.C2L_ReqRegistAccount
         * @instance
         */
        C2L_ReqRegistAccount.prototype.nickname = "";

        /**
         * Creates a new C2L_ReqRegistAccount instance using the specified properties.
         * @function create
         * @memberof msg.C2L_ReqRegistAccount
         * @static
         * @param {msg.IC2L_ReqRegistAccount=} [properties] Properties to set
         * @returns {msg.C2L_ReqRegistAccount} C2L_ReqRegistAccount instance
         */
        C2L_ReqRegistAccount.create = function create(properties) {
            return new C2L_ReqRegistAccount(properties);
        };

        /**
         * Encodes the specified C2L_ReqRegistAccount message. Does not implicitly {@link msg.C2L_ReqRegistAccount.verify|verify} messages.
         * @function encode
         * @memberof msg.C2L_ReqRegistAccount
         * @static
         * @param {msg.IC2L_ReqRegistAccount} message C2L_ReqRegistAccount message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2L_ReqRegistAccount.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.phone != null && message.hasOwnProperty("phone"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.phone);
            if (message.passwd != null && message.hasOwnProperty("passwd"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.passwd);
            if (message.authcode != null && message.hasOwnProperty("authcode"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.authcode);
            if (message.invitationcode != null && message.hasOwnProperty("invitationcode"))
                writer.uint32(/* id 4, wireType 2 =*/34).string(message.invitationcode);
            if (message.nickname != null && message.hasOwnProperty("nickname"))
                writer.uint32(/* id 5, wireType 2 =*/42).string(message.nickname);
            return writer;
        };

        /**
         * Encodes the specified C2L_ReqRegistAccount message, length delimited. Does not implicitly {@link msg.C2L_ReqRegistAccount.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.C2L_ReqRegistAccount
         * @static
         * @param {msg.IC2L_ReqRegistAccount} message C2L_ReqRegistAccount message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2L_ReqRegistAccount.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a C2L_ReqRegistAccount message from the specified reader or buffer.
         * @function decode
         * @memberof msg.C2L_ReqRegistAccount
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.C2L_ReqRegistAccount} C2L_ReqRegistAccount
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2L_ReqRegistAccount.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.C2L_ReqRegistAccount();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.phone = reader.string();
                    break;
                case 2:
                    message.passwd = reader.string();
                    break;
                case 3:
                    message.authcode = reader.string();
                    break;
                case 4:
                    message.invitationcode = reader.string();
                    break;
                case 5:
                    message.nickname = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a C2L_ReqRegistAccount message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.C2L_ReqRegistAccount
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.C2L_ReqRegistAccount} C2L_ReqRegistAccount
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2L_ReqRegistAccount.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a C2L_ReqRegistAccount message.
         * @function verify
         * @memberof msg.C2L_ReqRegistAccount
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        C2L_ReqRegistAccount.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.phone != null && message.hasOwnProperty("phone"))
                if (!$util.isString(message.phone))
                    return "phone: string expected";
            if (message.passwd != null && message.hasOwnProperty("passwd"))
                if (!$util.isString(message.passwd))
                    return "passwd: string expected";
            if (message.authcode != null && message.hasOwnProperty("authcode"))
                if (!$util.isString(message.authcode))
                    return "authcode: string expected";
            if (message.invitationcode != null && message.hasOwnProperty("invitationcode"))
                if (!$util.isString(message.invitationcode))
                    return "invitationcode: string expected";
            if (message.nickname != null && message.hasOwnProperty("nickname"))
                if (!$util.isString(message.nickname))
                    return "nickname: string expected";
            return null;
        };

        /**
         * Creates a C2L_ReqRegistAccount message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.C2L_ReqRegistAccount
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.C2L_ReqRegistAccount} C2L_ReqRegistAccount
         */
        C2L_ReqRegistAccount.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.C2L_ReqRegistAccount)
                return object;
            var message = new $root.msg.C2L_ReqRegistAccount();
            if (object.phone != null)
                message.phone = String(object.phone);
            if (object.passwd != null)
                message.passwd = String(object.passwd);
            if (object.authcode != null)
                message.authcode = String(object.authcode);
            if (object.invitationcode != null)
                message.invitationcode = String(object.invitationcode);
            if (object.nickname != null)
                message.nickname = String(object.nickname);
            return message;
        };

        /**
         * Creates a plain object from a C2L_ReqRegistAccount message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.C2L_ReqRegistAccount
         * @static
         * @param {msg.C2L_ReqRegistAccount} message C2L_ReqRegistAccount
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        C2L_ReqRegistAccount.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.phone = "";
                object.passwd = "";
                object.authcode = "";
                object.invitationcode = "";
                object.nickname = "";
            }
            if (message.phone != null && message.hasOwnProperty("phone"))
                object.phone = message.phone;
            if (message.passwd != null && message.hasOwnProperty("passwd"))
                object.passwd = message.passwd;
            if (message.authcode != null && message.hasOwnProperty("authcode"))
                object.authcode = message.authcode;
            if (message.invitationcode != null && message.hasOwnProperty("invitationcode"))
                object.invitationcode = message.invitationcode;
            if (message.nickname != null && message.hasOwnProperty("nickname"))
                object.nickname = message.nickname;
            return object;
        };

        /**
         * Converts this C2L_ReqRegistAccount to JSON.
         * @function toJSON
         * @memberof msg.C2L_ReqRegistAccount
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        C2L_ReqRegistAccount.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return C2L_ReqRegistAccount;
    })();

    msg.L2C_RetRegistAccount = (function() {

        /**
         * Properties of a L2C_RetRegistAccount.
         * @memberof msg
         * @interface IL2C_RetRegistAccount
         * @property {string|null} [errcode] L2C_RetRegistAccount errcode
         */

        /**
         * Constructs a new L2C_RetRegistAccount.
         * @memberof msg
         * @classdesc Represents a L2C_RetRegistAccount.
         * @implements IL2C_RetRegistAccount
         * @constructor
         * @param {msg.IL2C_RetRegistAccount=} [properties] Properties to set
         */
        function L2C_RetRegistAccount(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * L2C_RetRegistAccount errcode.
         * @member {string} errcode
         * @memberof msg.L2C_RetRegistAccount
         * @instance
         */
        L2C_RetRegistAccount.prototype.errcode = "";

        /**
         * Creates a new L2C_RetRegistAccount instance using the specified properties.
         * @function create
         * @memberof msg.L2C_RetRegistAccount
         * @static
         * @param {msg.IL2C_RetRegistAccount=} [properties] Properties to set
         * @returns {msg.L2C_RetRegistAccount} L2C_RetRegistAccount instance
         */
        L2C_RetRegistAccount.create = function create(properties) {
            return new L2C_RetRegistAccount(properties);
        };

        /**
         * Encodes the specified L2C_RetRegistAccount message. Does not implicitly {@link msg.L2C_RetRegistAccount.verify|verify} messages.
         * @function encode
         * @memberof msg.L2C_RetRegistAccount
         * @static
         * @param {msg.IL2C_RetRegistAccount} message L2C_RetRegistAccount message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        L2C_RetRegistAccount.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.errcode != null && message.hasOwnProperty("errcode"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.errcode);
            return writer;
        };

        /**
         * Encodes the specified L2C_RetRegistAccount message, length delimited. Does not implicitly {@link msg.L2C_RetRegistAccount.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.L2C_RetRegistAccount
         * @static
         * @param {msg.IL2C_RetRegistAccount} message L2C_RetRegistAccount message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        L2C_RetRegistAccount.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a L2C_RetRegistAccount message from the specified reader or buffer.
         * @function decode
         * @memberof msg.L2C_RetRegistAccount
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.L2C_RetRegistAccount} L2C_RetRegistAccount
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        L2C_RetRegistAccount.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.L2C_RetRegistAccount();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.errcode = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a L2C_RetRegistAccount message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.L2C_RetRegistAccount
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.L2C_RetRegistAccount} L2C_RetRegistAccount
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        L2C_RetRegistAccount.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a L2C_RetRegistAccount message.
         * @function verify
         * @memberof msg.L2C_RetRegistAccount
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        L2C_RetRegistAccount.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.errcode != null && message.hasOwnProperty("errcode"))
                if (!$util.isString(message.errcode))
                    return "errcode: string expected";
            return null;
        };

        /**
         * Creates a L2C_RetRegistAccount message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.L2C_RetRegistAccount
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.L2C_RetRegistAccount} L2C_RetRegistAccount
         */
        L2C_RetRegistAccount.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.L2C_RetRegistAccount)
                return object;
            var message = new $root.msg.L2C_RetRegistAccount();
            if (object.errcode != null)
                message.errcode = String(object.errcode);
            return message;
        };

        /**
         * Creates a plain object from a L2C_RetRegistAccount message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.L2C_RetRegistAccount
         * @static
         * @param {msg.L2C_RetRegistAccount} message L2C_RetRegistAccount
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        L2C_RetRegistAccount.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.errcode = "";
            if (message.errcode != null && message.hasOwnProperty("errcode"))
                object.errcode = message.errcode;
            return object;
        };

        /**
         * Converts this L2C_RetRegistAccount to JSON.
         * @function toJSON
         * @memberof msg.L2C_RetRegistAccount
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        L2C_RetRegistAccount.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return L2C_RetRegistAccount;
    })();

    msg.IpHost = (function() {

        /**
         * Properties of an IpHost.
         * @memberof msg
         * @interface IIpHost
         * @property {string|null} [ip] IpHost ip
         * @property {number|null} [port] IpHost port
         */

        /**
         * Constructs a new IpHost.
         * @memberof msg
         * @classdesc Represents an IpHost.
         * @implements IIpHost
         * @constructor
         * @param {msg.IIpHost=} [properties] Properties to set
         */
        function IpHost(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * IpHost ip.
         * @member {string} ip
         * @memberof msg.IpHost
         * @instance
         */
        IpHost.prototype.ip = "";

        /**
         * IpHost port.
         * @member {number} port
         * @memberof msg.IpHost
         * @instance
         */
        IpHost.prototype.port = 0;

        /**
         * Creates a new IpHost instance using the specified properties.
         * @function create
         * @memberof msg.IpHost
         * @static
         * @param {msg.IIpHost=} [properties] Properties to set
         * @returns {msg.IpHost} IpHost instance
         */
        IpHost.create = function create(properties) {
            return new IpHost(properties);
        };

        /**
         * Encodes the specified IpHost message. Does not implicitly {@link msg.IpHost.verify|verify} messages.
         * @function encode
         * @memberof msg.IpHost
         * @static
         * @param {msg.IIpHost} message IpHost message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        IpHost.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.ip != null && message.hasOwnProperty("ip"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.ip);
            if (message.port != null && message.hasOwnProperty("port"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.port);
            return writer;
        };

        /**
         * Encodes the specified IpHost message, length delimited. Does not implicitly {@link msg.IpHost.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.IpHost
         * @static
         * @param {msg.IIpHost} message IpHost message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        IpHost.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes an IpHost message from the specified reader or buffer.
         * @function decode
         * @memberof msg.IpHost
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.IpHost} IpHost
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        IpHost.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.IpHost();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.ip = reader.string();
                    break;
                case 2:
                    message.port = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes an IpHost message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.IpHost
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.IpHost} IpHost
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        IpHost.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies an IpHost message.
         * @function verify
         * @memberof msg.IpHost
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        IpHost.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.ip != null && message.hasOwnProperty("ip"))
                if (!$util.isString(message.ip))
                    return "ip: string expected";
            if (message.port != null && message.hasOwnProperty("port"))
                if (!$util.isInteger(message.port))
                    return "port: integer expected";
            return null;
        };

        /**
         * Creates an IpHost message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.IpHost
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.IpHost} IpHost
         */
        IpHost.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.IpHost)
                return object;
            var message = new $root.msg.IpHost();
            if (object.ip != null)
                message.ip = String(object.ip);
            if (object.port != null)
                message.port = object.port | 0;
            return message;
        };

        /**
         * Creates a plain object from an IpHost message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.IpHost
         * @static
         * @param {msg.IpHost} message IpHost
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        IpHost.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.ip = "";
                object.port = 0;
            }
            if (message.ip != null && message.hasOwnProperty("ip"))
                object.ip = message.ip;
            if (message.port != null && message.hasOwnProperty("port"))
                object.port = message.port;
            return object;
        };

        /**
         * Converts this IpHost to JSON.
         * @function toJSON
         * @memberof msg.IpHost
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        IpHost.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return IpHost;
    })();

    /**
     * ItemId enum.
     * @name msg.ItemId
     * @enum {string}
     * @property {number} YuanBao=6001 YuanBao value
     * @property {number} Coupon=6002 Coupon value
     * @property {number} Gold=6003 Gold value
     * @property {number} FreeStep=6005 FreeStep value
     * @property {number} Diamond=10001 Diamond value
     * @property {number} DiamondParts=10002 DiamondParts value
     */
    msg.ItemId = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[6001] = "YuanBao"] = 6001;
        values[valuesById[6002] = "Coupon"] = 6002;
        values[valuesById[6003] = "Gold"] = 6003;
        values[valuesById[6005] = "FreeStep"] = 6005;
        values[valuesById[10001] = "Diamond"] = 10001;
        values[valuesById[10002] = "DiamondParts"] = 10002;
        return values;
    })();

    /**
     * ItemType enum.
     * @name msg.ItemType
     * @enum {string}
     * @property {number} Digital=1 Digital value
     * @property {number} ShoppingCard=2 ShoppingCard value
     * @property {number} DailyUse=3 DailyUse value
     * @property {number} Toy=4 Toy value
     * @property {number} MobileCard=5 MobileCard value
     * @property {number} Currency=6 Currency value
     * @property {number} CarAccessory=7 CarAccessory value
     * @property {number} Advertisement=8 Advertisement value
     * @property {number} Smallware=9 Smallware value
     * @property {number} DiamondItem=10 DiamondItem value
     */
    msg.ItemType = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[1] = "Digital"] = 1;
        values[valuesById[2] = "ShoppingCard"] = 2;
        values[valuesById[3] = "DailyUse"] = 3;
        values[valuesById[4] = "Toy"] = 4;
        values[valuesById[5] = "MobileCard"] = 5;
        values[valuesById[6] = "Currency"] = 6;
        values[valuesById[7] = "CarAccessory"] = 7;
        values[valuesById[8] = "Advertisement"] = 8;
        values[valuesById[9] = "Smallware"] = 9;
        values[valuesById[10] = "DiamondItem"] = 10;
        return values;
    })();

    msg.PairNumItem = (function() {

        /**
         * Properties of a PairNumItem.
         * @memberof msg
         * @interface IPairNumItem
         * @property {number|null} [itemid] PairNumItem itemid
         * @property {number|null} [num] PairNumItem num
         */

        /**
         * Constructs a new PairNumItem.
         * @memberof msg
         * @classdesc Represents a PairNumItem.
         * @implements IPairNumItem
         * @constructor
         * @param {msg.IPairNumItem=} [properties] Properties to set
         */
        function PairNumItem(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * PairNumItem itemid.
         * @member {number} itemid
         * @memberof msg.PairNumItem
         * @instance
         */
        PairNumItem.prototype.itemid = 0;

        /**
         * PairNumItem num.
         * @member {number} num
         * @memberof msg.PairNumItem
         * @instance
         */
        PairNumItem.prototype.num = 0;

        /**
         * Creates a new PairNumItem instance using the specified properties.
         * @function create
         * @memberof msg.PairNumItem
         * @static
         * @param {msg.IPairNumItem=} [properties] Properties to set
         * @returns {msg.PairNumItem} PairNumItem instance
         */
        PairNumItem.create = function create(properties) {
            return new PairNumItem(properties);
        };

        /**
         * Encodes the specified PairNumItem message. Does not implicitly {@link msg.PairNumItem.verify|verify} messages.
         * @function encode
         * @memberof msg.PairNumItem
         * @static
         * @param {msg.IPairNumItem} message PairNumItem message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        PairNumItem.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.itemid != null && message.hasOwnProperty("itemid"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.itemid);
            if (message.num != null && message.hasOwnProperty("num"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.num);
            return writer;
        };

        /**
         * Encodes the specified PairNumItem message, length delimited. Does not implicitly {@link msg.PairNumItem.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.PairNumItem
         * @static
         * @param {msg.IPairNumItem} message PairNumItem message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        PairNumItem.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a PairNumItem message from the specified reader or buffer.
         * @function decode
         * @memberof msg.PairNumItem
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.PairNumItem} PairNumItem
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        PairNumItem.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.PairNumItem();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.itemid = reader.uint32();
                    break;
                case 2:
                    message.num = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a PairNumItem message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.PairNumItem
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.PairNumItem} PairNumItem
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        PairNumItem.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a PairNumItem message.
         * @function verify
         * @memberof msg.PairNumItem
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        PairNumItem.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.itemid != null && message.hasOwnProperty("itemid"))
                if (!$util.isInteger(message.itemid))
                    return "itemid: integer expected";
            if (message.num != null && message.hasOwnProperty("num"))
                if (!$util.isInteger(message.num))
                    return "num: integer expected";
            return null;
        };

        /**
         * Creates a PairNumItem message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.PairNumItem
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.PairNumItem} PairNumItem
         */
        PairNumItem.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.PairNumItem)
                return object;
            var message = new $root.msg.PairNumItem();
            if (object.itemid != null)
                message.itemid = object.itemid >>> 0;
            if (object.num != null)
                message.num = object.num >>> 0;
            return message;
        };

        /**
         * Creates a plain object from a PairNumItem message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.PairNumItem
         * @static
         * @param {msg.PairNumItem} message PairNumItem
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        PairNumItem.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.itemid = 0;
                object.num = 0;
            }
            if (message.itemid != null && message.hasOwnProperty("itemid"))
                object.itemid = message.itemid;
            if (message.num != null && message.hasOwnProperty("num"))
                object.num = message.num;
            return object;
        };

        /**
         * Converts this PairNumItem to JSON.
         * @function toJSON
         * @memberof msg.PairNumItem
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        PairNumItem.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return PairNumItem;
    })();

    /**
     * TaskId enum.
     * @name msg.TaskId
     * @enum {string}
     * @property {number} RegistAccount=1001 RegistAccount value
     * @property {number} RegisterTopScore=1002 RegisterTopScore value
     * @property {number} InviteeTopScore=1003 InviteeTopScore value
     */
    msg.TaskId = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[1001] = "RegistAccount"] = 1001;
        values[valuesById[1002] = "RegisterTopScore"] = 1002;
        values[valuesById[1003] = "InviteeTopScore"] = 1003;
        return values;
    })();

    msg.GW2L_ReqRegist = (function() {

        /**
         * Properties of a GW2L_ReqRegist.
         * @memberof msg
         * @interface IGW2L_ReqRegist
         * @property {string|null} [account] GW2L_ReqRegist account
         * @property {string|null} [passwd] GW2L_ReqRegist passwd
         * @property {msg.IIpHost|null} [host] GW2L_ReqRegist host
         * @property {string|null} [name] GW2L_ReqRegist name
         */

        /**
         * Constructs a new GW2L_ReqRegist.
         * @memberof msg
         * @classdesc Represents a GW2L_ReqRegist.
         * @implements IGW2L_ReqRegist
         * @constructor
         * @param {msg.IGW2L_ReqRegist=} [properties] Properties to set
         */
        function GW2L_ReqRegist(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GW2L_ReqRegist account.
         * @member {string} account
         * @memberof msg.GW2L_ReqRegist
         * @instance
         */
        GW2L_ReqRegist.prototype.account = "";

        /**
         * GW2L_ReqRegist passwd.
         * @member {string} passwd
         * @memberof msg.GW2L_ReqRegist
         * @instance
         */
        GW2L_ReqRegist.prototype.passwd = "";

        /**
         * GW2L_ReqRegist host.
         * @member {msg.IIpHost|null|undefined} host
         * @memberof msg.GW2L_ReqRegist
         * @instance
         */
        GW2L_ReqRegist.prototype.host = null;

        /**
         * GW2L_ReqRegist name.
         * @member {string} name
         * @memberof msg.GW2L_ReqRegist
         * @instance
         */
        GW2L_ReqRegist.prototype.name = "";

        /**
         * Creates a new GW2L_ReqRegist instance using the specified properties.
         * @function create
         * @memberof msg.GW2L_ReqRegist
         * @static
         * @param {msg.IGW2L_ReqRegist=} [properties] Properties to set
         * @returns {msg.GW2L_ReqRegist} GW2L_ReqRegist instance
         */
        GW2L_ReqRegist.create = function create(properties) {
            return new GW2L_ReqRegist(properties);
        };

        /**
         * Encodes the specified GW2L_ReqRegist message. Does not implicitly {@link msg.GW2L_ReqRegist.verify|verify} messages.
         * @function encode
         * @memberof msg.GW2L_ReqRegist
         * @static
         * @param {msg.IGW2L_ReqRegist} message GW2L_ReqRegist message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2L_ReqRegist.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.account != null && message.hasOwnProperty("account"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.account);
            if (message.passwd != null && message.hasOwnProperty("passwd"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.passwd);
            if (message.host != null && message.hasOwnProperty("host"))
                $root.msg.IpHost.encode(message.host, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            if (message.name != null && message.hasOwnProperty("name"))
                writer.uint32(/* id 4, wireType 2 =*/34).string(message.name);
            return writer;
        };

        /**
         * Encodes the specified GW2L_ReqRegist message, length delimited. Does not implicitly {@link msg.GW2L_ReqRegist.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.GW2L_ReqRegist
         * @static
         * @param {msg.IGW2L_ReqRegist} message GW2L_ReqRegist message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2L_ReqRegist.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GW2L_ReqRegist message from the specified reader or buffer.
         * @function decode
         * @memberof msg.GW2L_ReqRegist
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.GW2L_ReqRegist} GW2L_ReqRegist
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2L_ReqRegist.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.GW2L_ReqRegist();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.account = reader.string();
                    break;
                case 2:
                    message.passwd = reader.string();
                    break;
                case 3:
                    message.host = $root.msg.IpHost.decode(reader, reader.uint32());
                    break;
                case 4:
                    message.name = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GW2L_ReqRegist message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.GW2L_ReqRegist
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.GW2L_ReqRegist} GW2L_ReqRegist
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2L_ReqRegist.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GW2L_ReqRegist message.
         * @function verify
         * @memberof msg.GW2L_ReqRegist
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GW2L_ReqRegist.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.account != null && message.hasOwnProperty("account"))
                if (!$util.isString(message.account))
                    return "account: string expected";
            if (message.passwd != null && message.hasOwnProperty("passwd"))
                if (!$util.isString(message.passwd))
                    return "passwd: string expected";
            if (message.host != null && message.hasOwnProperty("host")) {
                var error = $root.msg.IpHost.verify(message.host);
                if (error)
                    return "host." + error;
            }
            if (message.name != null && message.hasOwnProperty("name"))
                if (!$util.isString(message.name))
                    return "name: string expected";
            return null;
        };

        /**
         * Creates a GW2L_ReqRegist message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.GW2L_ReqRegist
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.GW2L_ReqRegist} GW2L_ReqRegist
         */
        GW2L_ReqRegist.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.GW2L_ReqRegist)
                return object;
            var message = new $root.msg.GW2L_ReqRegist();
            if (object.account != null)
                message.account = String(object.account);
            if (object.passwd != null)
                message.passwd = String(object.passwd);
            if (object.host != null) {
                if (typeof object.host !== "object")
                    throw TypeError(".msg.GW2L_ReqRegist.host: object expected");
                message.host = $root.msg.IpHost.fromObject(object.host);
            }
            if (object.name != null)
                message.name = String(object.name);
            return message;
        };

        /**
         * Creates a plain object from a GW2L_ReqRegist message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.GW2L_ReqRegist
         * @static
         * @param {msg.GW2L_ReqRegist} message GW2L_ReqRegist
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GW2L_ReqRegist.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.account = "";
                object.passwd = "";
                object.host = null;
                object.name = "";
            }
            if (message.account != null && message.hasOwnProperty("account"))
                object.account = message.account;
            if (message.passwd != null && message.hasOwnProperty("passwd"))
                object.passwd = message.passwd;
            if (message.host != null && message.hasOwnProperty("host"))
                object.host = $root.msg.IpHost.toObject(message.host, options);
            if (message.name != null && message.hasOwnProperty("name"))
                object.name = message.name;
            return object;
        };

        /**
         * Converts this GW2L_ReqRegist to JSON.
         * @function toJSON
         * @memberof msg.GW2L_ReqRegist
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GW2L_ReqRegist.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GW2L_ReqRegist;
    })();

    msg.L2GW_RetRegist = (function() {

        /**
         * Properties of a L2GW_RetRegist.
         * @memberof msg
         * @interface IL2GW_RetRegist
         * @property {string|null} [errocde] L2GW_RetRegist errocde
         * @property {msg.IIpHost|null} [host] L2GW_RetRegist host
         */

        /**
         * Constructs a new L2GW_RetRegist.
         * @memberof msg
         * @classdesc Represents a L2GW_RetRegist.
         * @implements IL2GW_RetRegist
         * @constructor
         * @param {msg.IL2GW_RetRegist=} [properties] Properties to set
         */
        function L2GW_RetRegist(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * L2GW_RetRegist errocde.
         * @member {string} errocde
         * @memberof msg.L2GW_RetRegist
         * @instance
         */
        L2GW_RetRegist.prototype.errocde = "";

        /**
         * L2GW_RetRegist host.
         * @member {msg.IIpHost|null|undefined} host
         * @memberof msg.L2GW_RetRegist
         * @instance
         */
        L2GW_RetRegist.prototype.host = null;

        /**
         * Creates a new L2GW_RetRegist instance using the specified properties.
         * @function create
         * @memberof msg.L2GW_RetRegist
         * @static
         * @param {msg.IL2GW_RetRegist=} [properties] Properties to set
         * @returns {msg.L2GW_RetRegist} L2GW_RetRegist instance
         */
        L2GW_RetRegist.create = function create(properties) {
            return new L2GW_RetRegist(properties);
        };

        /**
         * Encodes the specified L2GW_RetRegist message. Does not implicitly {@link msg.L2GW_RetRegist.verify|verify} messages.
         * @function encode
         * @memberof msg.L2GW_RetRegist
         * @static
         * @param {msg.IL2GW_RetRegist} message L2GW_RetRegist message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        L2GW_RetRegist.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.errocde != null && message.hasOwnProperty("errocde"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.errocde);
            if (message.host != null && message.hasOwnProperty("host"))
                $root.msg.IpHost.encode(message.host, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified L2GW_RetRegist message, length delimited. Does not implicitly {@link msg.L2GW_RetRegist.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.L2GW_RetRegist
         * @static
         * @param {msg.IL2GW_RetRegist} message L2GW_RetRegist message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        L2GW_RetRegist.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a L2GW_RetRegist message from the specified reader or buffer.
         * @function decode
         * @memberof msg.L2GW_RetRegist
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.L2GW_RetRegist} L2GW_RetRegist
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        L2GW_RetRegist.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.L2GW_RetRegist();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.errocde = reader.string();
                    break;
                case 2:
                    message.host = $root.msg.IpHost.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a L2GW_RetRegist message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.L2GW_RetRegist
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.L2GW_RetRegist} L2GW_RetRegist
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        L2GW_RetRegist.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a L2GW_RetRegist message.
         * @function verify
         * @memberof msg.L2GW_RetRegist
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        L2GW_RetRegist.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.errocde != null && message.hasOwnProperty("errocde"))
                if (!$util.isString(message.errocde))
                    return "errocde: string expected";
            if (message.host != null && message.hasOwnProperty("host")) {
                var error = $root.msg.IpHost.verify(message.host);
                if (error)
                    return "host." + error;
            }
            return null;
        };

        /**
         * Creates a L2GW_RetRegist message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.L2GW_RetRegist
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.L2GW_RetRegist} L2GW_RetRegist
         */
        L2GW_RetRegist.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.L2GW_RetRegist)
                return object;
            var message = new $root.msg.L2GW_RetRegist();
            if (object.errocde != null)
                message.errocde = String(object.errocde);
            if (object.host != null) {
                if (typeof object.host !== "object")
                    throw TypeError(".msg.L2GW_RetRegist.host: object expected");
                message.host = $root.msg.IpHost.fromObject(object.host);
            }
            return message;
        };

        /**
         * Creates a plain object from a L2GW_RetRegist message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.L2GW_RetRegist
         * @static
         * @param {msg.L2GW_RetRegist} message L2GW_RetRegist
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        L2GW_RetRegist.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.errocde = "";
                object.host = null;
            }
            if (message.errocde != null && message.hasOwnProperty("errocde"))
                object.errocde = message.errocde;
            if (message.host != null && message.hasOwnProperty("host"))
                object.host = $root.msg.IpHost.toObject(message.host, options);
            return object;
        };

        /**
         * Converts this L2GW_RetRegist to JSON.
         * @function toJSON
         * @memberof msg.L2GW_RetRegist
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        L2GW_RetRegist.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return L2GW_RetRegist;
    })();

    msg.GW2L_HeartBeat = (function() {

        /**
         * Properties of a GW2L_HeartBeat.
         * @memberof msg
         * @interface IGW2L_HeartBeat
         */

        /**
         * Constructs a new GW2L_HeartBeat.
         * @memberof msg
         * @classdesc Represents a GW2L_HeartBeat.
         * @implements IGW2L_HeartBeat
         * @constructor
         * @param {msg.IGW2L_HeartBeat=} [properties] Properties to set
         */
        function GW2L_HeartBeat(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Creates a new GW2L_HeartBeat instance using the specified properties.
         * @function create
         * @memberof msg.GW2L_HeartBeat
         * @static
         * @param {msg.IGW2L_HeartBeat=} [properties] Properties to set
         * @returns {msg.GW2L_HeartBeat} GW2L_HeartBeat instance
         */
        GW2L_HeartBeat.create = function create(properties) {
            return new GW2L_HeartBeat(properties);
        };

        /**
         * Encodes the specified GW2L_HeartBeat message. Does not implicitly {@link msg.GW2L_HeartBeat.verify|verify} messages.
         * @function encode
         * @memberof msg.GW2L_HeartBeat
         * @static
         * @param {msg.IGW2L_HeartBeat} message GW2L_HeartBeat message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2L_HeartBeat.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };

        /**
         * Encodes the specified GW2L_HeartBeat message, length delimited. Does not implicitly {@link msg.GW2L_HeartBeat.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.GW2L_HeartBeat
         * @static
         * @param {msg.IGW2L_HeartBeat} message GW2L_HeartBeat message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2L_HeartBeat.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GW2L_HeartBeat message from the specified reader or buffer.
         * @function decode
         * @memberof msg.GW2L_HeartBeat
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.GW2L_HeartBeat} GW2L_HeartBeat
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2L_HeartBeat.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.GW2L_HeartBeat();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GW2L_HeartBeat message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.GW2L_HeartBeat
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.GW2L_HeartBeat} GW2L_HeartBeat
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2L_HeartBeat.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GW2L_HeartBeat message.
         * @function verify
         * @memberof msg.GW2L_HeartBeat
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GW2L_HeartBeat.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            return null;
        };

        /**
         * Creates a GW2L_HeartBeat message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.GW2L_HeartBeat
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.GW2L_HeartBeat} GW2L_HeartBeat
         */
        GW2L_HeartBeat.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.GW2L_HeartBeat)
                return object;
            return new $root.msg.GW2L_HeartBeat();
        };

        /**
         * Creates a plain object from a GW2L_HeartBeat message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.GW2L_HeartBeat
         * @static
         * @param {msg.GW2L_HeartBeat} message GW2L_HeartBeat
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GW2L_HeartBeat.toObject = function toObject() {
            return {};
        };

        /**
         * Converts this GW2L_HeartBeat to JSON.
         * @function toJSON
         * @memberof msg.GW2L_HeartBeat
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GW2L_HeartBeat.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GW2L_HeartBeat;
    })();

    msg.L2GW_HeartBeat = (function() {

        /**
         * Properties of a L2GW_HeartBeat.
         * @memberof msg
         * @interface IL2GW_HeartBeat
         */

        /**
         * Constructs a new L2GW_HeartBeat.
         * @memberof msg
         * @classdesc Represents a L2GW_HeartBeat.
         * @implements IL2GW_HeartBeat
         * @constructor
         * @param {msg.IL2GW_HeartBeat=} [properties] Properties to set
         */
        function L2GW_HeartBeat(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Creates a new L2GW_HeartBeat instance using the specified properties.
         * @function create
         * @memberof msg.L2GW_HeartBeat
         * @static
         * @param {msg.IL2GW_HeartBeat=} [properties] Properties to set
         * @returns {msg.L2GW_HeartBeat} L2GW_HeartBeat instance
         */
        L2GW_HeartBeat.create = function create(properties) {
            return new L2GW_HeartBeat(properties);
        };

        /**
         * Encodes the specified L2GW_HeartBeat message. Does not implicitly {@link msg.L2GW_HeartBeat.verify|verify} messages.
         * @function encode
         * @memberof msg.L2GW_HeartBeat
         * @static
         * @param {msg.IL2GW_HeartBeat} message L2GW_HeartBeat message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        L2GW_HeartBeat.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };

        /**
         * Encodes the specified L2GW_HeartBeat message, length delimited. Does not implicitly {@link msg.L2GW_HeartBeat.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.L2GW_HeartBeat
         * @static
         * @param {msg.IL2GW_HeartBeat} message L2GW_HeartBeat message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        L2GW_HeartBeat.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a L2GW_HeartBeat message from the specified reader or buffer.
         * @function decode
         * @memberof msg.L2GW_HeartBeat
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.L2GW_HeartBeat} L2GW_HeartBeat
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        L2GW_HeartBeat.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.L2GW_HeartBeat();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a L2GW_HeartBeat message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.L2GW_HeartBeat
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.L2GW_HeartBeat} L2GW_HeartBeat
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        L2GW_HeartBeat.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a L2GW_HeartBeat message.
         * @function verify
         * @memberof msg.L2GW_HeartBeat
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        L2GW_HeartBeat.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            return null;
        };

        /**
         * Creates a L2GW_HeartBeat message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.L2GW_HeartBeat
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.L2GW_HeartBeat} L2GW_HeartBeat
         */
        L2GW_HeartBeat.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.L2GW_HeartBeat)
                return object;
            return new $root.msg.L2GW_HeartBeat();
        };

        /**
         * Creates a plain object from a L2GW_HeartBeat message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.L2GW_HeartBeat
         * @static
         * @param {msg.L2GW_HeartBeat} message L2GW_HeartBeat
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        L2GW_HeartBeat.toObject = function toObject() {
            return {};
        };

        /**
         * Converts this L2GW_HeartBeat to JSON.
         * @function toJSON
         * @memberof msg.L2GW_HeartBeat
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        L2GW_HeartBeat.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return L2GW_HeartBeat;
    })();

    msg.L2GW_ReqRegistUser = (function() {

        /**
         * Properties of a L2GW_ReqRegistUser.
         * @memberof msg
         * @interface IL2GW_ReqRegistUser
         * @property {string|null} [account] L2GW_ReqRegistUser account
         * @property {number|Long|null} [expire] L2GW_ReqRegistUser expire
         * @property {string|null} [gatehost] L2GW_ReqRegistUser gatehost
         * @property {number|null} [sid] L2GW_ReqRegistUser sid
         * @property {number|Long|null} [timestamp] L2GW_ReqRegistUser timestamp
         * @property {string|null} [verifykey] L2GW_ReqRegistUser verifykey
         */

        /**
         * Constructs a new L2GW_ReqRegistUser.
         * @memberof msg
         * @classdesc Represents a L2GW_ReqRegistUser.
         * @implements IL2GW_ReqRegistUser
         * @constructor
         * @param {msg.IL2GW_ReqRegistUser=} [properties] Properties to set
         */
        function L2GW_ReqRegistUser(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * L2GW_ReqRegistUser account.
         * @member {string} account
         * @memberof msg.L2GW_ReqRegistUser
         * @instance
         */
        L2GW_ReqRegistUser.prototype.account = "";

        /**
         * L2GW_ReqRegistUser expire.
         * @member {number|Long} expire
         * @memberof msg.L2GW_ReqRegistUser
         * @instance
         */
        L2GW_ReqRegistUser.prototype.expire = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * L2GW_ReqRegistUser gatehost.
         * @member {string} gatehost
         * @memberof msg.L2GW_ReqRegistUser
         * @instance
         */
        L2GW_ReqRegistUser.prototype.gatehost = "";

        /**
         * L2GW_ReqRegistUser sid.
         * @member {number} sid
         * @memberof msg.L2GW_ReqRegistUser
         * @instance
         */
        L2GW_ReqRegistUser.prototype.sid = 0;

        /**
         * L2GW_ReqRegistUser timestamp.
         * @member {number|Long} timestamp
         * @memberof msg.L2GW_ReqRegistUser
         * @instance
         */
        L2GW_ReqRegistUser.prototype.timestamp = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * L2GW_ReqRegistUser verifykey.
         * @member {string} verifykey
         * @memberof msg.L2GW_ReqRegistUser
         * @instance
         */
        L2GW_ReqRegistUser.prototype.verifykey = "";

        /**
         * Creates a new L2GW_ReqRegistUser instance using the specified properties.
         * @function create
         * @memberof msg.L2GW_ReqRegistUser
         * @static
         * @param {msg.IL2GW_ReqRegistUser=} [properties] Properties to set
         * @returns {msg.L2GW_ReqRegistUser} L2GW_ReqRegistUser instance
         */
        L2GW_ReqRegistUser.create = function create(properties) {
            return new L2GW_ReqRegistUser(properties);
        };

        /**
         * Encodes the specified L2GW_ReqRegistUser message. Does not implicitly {@link msg.L2GW_ReqRegistUser.verify|verify} messages.
         * @function encode
         * @memberof msg.L2GW_ReqRegistUser
         * @static
         * @param {msg.IL2GW_ReqRegistUser} message L2GW_ReqRegistUser message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        L2GW_ReqRegistUser.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.account != null && message.hasOwnProperty("account"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.account);
            if (message.expire != null && message.hasOwnProperty("expire"))
                writer.uint32(/* id 2, wireType 0 =*/16).int64(message.expire);
            if (message.gatehost != null && message.hasOwnProperty("gatehost"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.gatehost);
            if (message.sid != null && message.hasOwnProperty("sid"))
                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.sid);
            if (message.timestamp != null && message.hasOwnProperty("timestamp"))
                writer.uint32(/* id 5, wireType 0 =*/40).int64(message.timestamp);
            if (message.verifykey != null && message.hasOwnProperty("verifykey"))
                writer.uint32(/* id 6, wireType 2 =*/50).string(message.verifykey);
            return writer;
        };

        /**
         * Encodes the specified L2GW_ReqRegistUser message, length delimited. Does not implicitly {@link msg.L2GW_ReqRegistUser.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.L2GW_ReqRegistUser
         * @static
         * @param {msg.IL2GW_ReqRegistUser} message L2GW_ReqRegistUser message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        L2GW_ReqRegistUser.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a L2GW_ReqRegistUser message from the specified reader or buffer.
         * @function decode
         * @memberof msg.L2GW_ReqRegistUser
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.L2GW_ReqRegistUser} L2GW_ReqRegistUser
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        L2GW_ReqRegistUser.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.L2GW_ReqRegistUser();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.account = reader.string();
                    break;
                case 2:
                    message.expire = reader.int64();
                    break;
                case 3:
                    message.gatehost = reader.string();
                    break;
                case 4:
                    message.sid = reader.int32();
                    break;
                case 5:
                    message.timestamp = reader.int64();
                    break;
                case 6:
                    message.verifykey = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a L2GW_ReqRegistUser message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.L2GW_ReqRegistUser
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.L2GW_ReqRegistUser} L2GW_ReqRegistUser
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        L2GW_ReqRegistUser.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a L2GW_ReqRegistUser message.
         * @function verify
         * @memberof msg.L2GW_ReqRegistUser
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        L2GW_ReqRegistUser.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.account != null && message.hasOwnProperty("account"))
                if (!$util.isString(message.account))
                    return "account: string expected";
            if (message.expire != null && message.hasOwnProperty("expire"))
                if (!$util.isInteger(message.expire) && !(message.expire && $util.isInteger(message.expire.low) && $util.isInteger(message.expire.high)))
                    return "expire: integer|Long expected";
            if (message.gatehost != null && message.hasOwnProperty("gatehost"))
                if (!$util.isString(message.gatehost))
                    return "gatehost: string expected";
            if (message.sid != null && message.hasOwnProperty("sid"))
                if (!$util.isInteger(message.sid))
                    return "sid: integer expected";
            if (message.timestamp != null && message.hasOwnProperty("timestamp"))
                if (!$util.isInteger(message.timestamp) && !(message.timestamp && $util.isInteger(message.timestamp.low) && $util.isInteger(message.timestamp.high)))
                    return "timestamp: integer|Long expected";
            if (message.verifykey != null && message.hasOwnProperty("verifykey"))
                if (!$util.isString(message.verifykey))
                    return "verifykey: string expected";
            return null;
        };

        /**
         * Creates a L2GW_ReqRegistUser message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.L2GW_ReqRegistUser
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.L2GW_ReqRegistUser} L2GW_ReqRegistUser
         */
        L2GW_ReqRegistUser.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.L2GW_ReqRegistUser)
                return object;
            var message = new $root.msg.L2GW_ReqRegistUser();
            if (object.account != null)
                message.account = String(object.account);
            if (object.expire != null)
                if ($util.Long)
                    (message.expire = $util.Long.fromValue(object.expire)).unsigned = false;
                else if (typeof object.expire === "string")
                    message.expire = parseInt(object.expire, 10);
                else if (typeof object.expire === "number")
                    message.expire = object.expire;
                else if (typeof object.expire === "object")
                    message.expire = new $util.LongBits(object.expire.low >>> 0, object.expire.high >>> 0).toNumber();
            if (object.gatehost != null)
                message.gatehost = String(object.gatehost);
            if (object.sid != null)
                message.sid = object.sid | 0;
            if (object.timestamp != null)
                if ($util.Long)
                    (message.timestamp = $util.Long.fromValue(object.timestamp)).unsigned = false;
                else if (typeof object.timestamp === "string")
                    message.timestamp = parseInt(object.timestamp, 10);
                else if (typeof object.timestamp === "number")
                    message.timestamp = object.timestamp;
                else if (typeof object.timestamp === "object")
                    message.timestamp = new $util.LongBits(object.timestamp.low >>> 0, object.timestamp.high >>> 0).toNumber();
            if (object.verifykey != null)
                message.verifykey = String(object.verifykey);
            return message;
        };

        /**
         * Creates a plain object from a L2GW_ReqRegistUser message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.L2GW_ReqRegistUser
         * @static
         * @param {msg.L2GW_ReqRegistUser} message L2GW_ReqRegistUser
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        L2GW_ReqRegistUser.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.account = "";
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.expire = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.expire = options.longs === String ? "0" : 0;
                object.gatehost = "";
                object.sid = 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.timestamp = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.timestamp = options.longs === String ? "0" : 0;
                object.verifykey = "";
            }
            if (message.account != null && message.hasOwnProperty("account"))
                object.account = message.account;
            if (message.expire != null && message.hasOwnProperty("expire"))
                if (typeof message.expire === "number")
                    object.expire = options.longs === String ? String(message.expire) : message.expire;
                else
                    object.expire = options.longs === String ? $util.Long.prototype.toString.call(message.expire) : options.longs === Number ? new $util.LongBits(message.expire.low >>> 0, message.expire.high >>> 0).toNumber() : message.expire;
            if (message.gatehost != null && message.hasOwnProperty("gatehost"))
                object.gatehost = message.gatehost;
            if (message.sid != null && message.hasOwnProperty("sid"))
                object.sid = message.sid;
            if (message.timestamp != null && message.hasOwnProperty("timestamp"))
                if (typeof message.timestamp === "number")
                    object.timestamp = options.longs === String ? String(message.timestamp) : message.timestamp;
                else
                    object.timestamp = options.longs === String ? $util.Long.prototype.toString.call(message.timestamp) : options.longs === Number ? new $util.LongBits(message.timestamp.low >>> 0, message.timestamp.high >>> 0).toNumber() : message.timestamp;
            if (message.verifykey != null && message.hasOwnProperty("verifykey"))
                object.verifykey = message.verifykey;
            return object;
        };

        /**
         * Converts this L2GW_ReqRegistUser to JSON.
         * @function toJSON
         * @memberof msg.L2GW_ReqRegistUser
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        L2GW_ReqRegistUser.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return L2GW_ReqRegistUser;
    })();

    msg.GW2L_RegistUserRet = (function() {

        /**
         * Properties of a GW2L_RegistUserRet.
         * @memberof msg
         * @interface IGW2L_RegistUserRet
         * @property {string|null} [account] GW2L_RegistUserRet account
         * @property {string|null} [gatehost] GW2L_RegistUserRet gatehost
         * @property {string|null} [errcode] GW2L_RegistUserRet errcode
         * @property {number|null} [sid] GW2L_RegistUserRet sid
         * @property {string|null} [verifykey] GW2L_RegistUserRet verifykey
         */

        /**
         * Constructs a new GW2L_RegistUserRet.
         * @memberof msg
         * @classdesc Represents a GW2L_RegistUserRet.
         * @implements IGW2L_RegistUserRet
         * @constructor
         * @param {msg.IGW2L_RegistUserRet=} [properties] Properties to set
         */
        function GW2L_RegistUserRet(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GW2L_RegistUserRet account.
         * @member {string} account
         * @memberof msg.GW2L_RegistUserRet
         * @instance
         */
        GW2L_RegistUserRet.prototype.account = "";

        /**
         * GW2L_RegistUserRet gatehost.
         * @member {string} gatehost
         * @memberof msg.GW2L_RegistUserRet
         * @instance
         */
        GW2L_RegistUserRet.prototype.gatehost = "";

        /**
         * GW2L_RegistUserRet errcode.
         * @member {string} errcode
         * @memberof msg.GW2L_RegistUserRet
         * @instance
         */
        GW2L_RegistUserRet.prototype.errcode = "";

        /**
         * GW2L_RegistUserRet sid.
         * @member {number} sid
         * @memberof msg.GW2L_RegistUserRet
         * @instance
         */
        GW2L_RegistUserRet.prototype.sid = 0;

        /**
         * GW2L_RegistUserRet verifykey.
         * @member {string} verifykey
         * @memberof msg.GW2L_RegistUserRet
         * @instance
         */
        GW2L_RegistUserRet.prototype.verifykey = "";

        /**
         * Creates a new GW2L_RegistUserRet instance using the specified properties.
         * @function create
         * @memberof msg.GW2L_RegistUserRet
         * @static
         * @param {msg.IGW2L_RegistUserRet=} [properties] Properties to set
         * @returns {msg.GW2L_RegistUserRet} GW2L_RegistUserRet instance
         */
        GW2L_RegistUserRet.create = function create(properties) {
            return new GW2L_RegistUserRet(properties);
        };

        /**
         * Encodes the specified GW2L_RegistUserRet message. Does not implicitly {@link msg.GW2L_RegistUserRet.verify|verify} messages.
         * @function encode
         * @memberof msg.GW2L_RegistUserRet
         * @static
         * @param {msg.IGW2L_RegistUserRet} message GW2L_RegistUserRet message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2L_RegistUserRet.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.account != null && message.hasOwnProperty("account"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.account);
            if (message.gatehost != null && message.hasOwnProperty("gatehost"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.gatehost);
            if (message.errcode != null && message.hasOwnProperty("errcode"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.errcode);
            if (message.sid != null && message.hasOwnProperty("sid"))
                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.sid);
            if (message.verifykey != null && message.hasOwnProperty("verifykey"))
                writer.uint32(/* id 5, wireType 2 =*/42).string(message.verifykey);
            return writer;
        };

        /**
         * Encodes the specified GW2L_RegistUserRet message, length delimited. Does not implicitly {@link msg.GW2L_RegistUserRet.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.GW2L_RegistUserRet
         * @static
         * @param {msg.IGW2L_RegistUserRet} message GW2L_RegistUserRet message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2L_RegistUserRet.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GW2L_RegistUserRet message from the specified reader or buffer.
         * @function decode
         * @memberof msg.GW2L_RegistUserRet
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.GW2L_RegistUserRet} GW2L_RegistUserRet
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2L_RegistUserRet.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.GW2L_RegistUserRet();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.account = reader.string();
                    break;
                case 2:
                    message.gatehost = reader.string();
                    break;
                case 3:
                    message.errcode = reader.string();
                    break;
                case 4:
                    message.sid = reader.int32();
                    break;
                case 5:
                    message.verifykey = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GW2L_RegistUserRet message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.GW2L_RegistUserRet
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.GW2L_RegistUserRet} GW2L_RegistUserRet
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2L_RegistUserRet.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GW2L_RegistUserRet message.
         * @function verify
         * @memberof msg.GW2L_RegistUserRet
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GW2L_RegistUserRet.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.account != null && message.hasOwnProperty("account"))
                if (!$util.isString(message.account))
                    return "account: string expected";
            if (message.gatehost != null && message.hasOwnProperty("gatehost"))
                if (!$util.isString(message.gatehost))
                    return "gatehost: string expected";
            if (message.errcode != null && message.hasOwnProperty("errcode"))
                if (!$util.isString(message.errcode))
                    return "errcode: string expected";
            if (message.sid != null && message.hasOwnProperty("sid"))
                if (!$util.isInteger(message.sid))
                    return "sid: integer expected";
            if (message.verifykey != null && message.hasOwnProperty("verifykey"))
                if (!$util.isString(message.verifykey))
                    return "verifykey: string expected";
            return null;
        };

        /**
         * Creates a GW2L_RegistUserRet message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.GW2L_RegistUserRet
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.GW2L_RegistUserRet} GW2L_RegistUserRet
         */
        GW2L_RegistUserRet.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.GW2L_RegistUserRet)
                return object;
            var message = new $root.msg.GW2L_RegistUserRet();
            if (object.account != null)
                message.account = String(object.account);
            if (object.gatehost != null)
                message.gatehost = String(object.gatehost);
            if (object.errcode != null)
                message.errcode = String(object.errcode);
            if (object.sid != null)
                message.sid = object.sid | 0;
            if (object.verifykey != null)
                message.verifykey = String(object.verifykey);
            return message;
        };

        /**
         * Creates a plain object from a GW2L_RegistUserRet message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.GW2L_RegistUserRet
         * @static
         * @param {msg.GW2L_RegistUserRet} message GW2L_RegistUserRet
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GW2L_RegistUserRet.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.account = "";
                object.gatehost = "";
                object.errcode = "";
                object.sid = 0;
                object.verifykey = "";
            }
            if (message.account != null && message.hasOwnProperty("account"))
                object.account = message.account;
            if (message.gatehost != null && message.hasOwnProperty("gatehost"))
                object.gatehost = message.gatehost;
            if (message.errcode != null && message.hasOwnProperty("errcode"))
                object.errcode = message.errcode;
            if (message.sid != null && message.hasOwnProperty("sid"))
                object.sid = message.sid;
            if (message.verifykey != null && message.hasOwnProperty("verifykey"))
                object.verifykey = message.verifykey;
            return object;
        };

        /**
         * Converts this GW2L_RegistUserRet to JSON.
         * @function toJSON
         * @memberof msg.GW2L_RegistUserRet
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GW2L_RegistUserRet.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GW2L_RegistUserRet;
    })();

    msg.GW2MS_ReqRegist = (function() {

        /**
         * Properties of a GW2MS_ReqRegist.
         * @memberof msg
         * @interface IGW2MS_ReqRegist
         * @property {string|null} [account] GW2MS_ReqRegist account
         * @property {string|null} [passwd] GW2MS_ReqRegist passwd
         * @property {string|null} [agentname] GW2MS_ReqRegist agentname
         * @property {msg.IIpHost|null} [host] GW2MS_ReqRegist host
         */

        /**
         * Constructs a new GW2MS_ReqRegist.
         * @memberof msg
         * @classdesc Represents a GW2MS_ReqRegist.
         * @implements IGW2MS_ReqRegist
         * @constructor
         * @param {msg.IGW2MS_ReqRegist=} [properties] Properties to set
         */
        function GW2MS_ReqRegist(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GW2MS_ReqRegist account.
         * @member {string} account
         * @memberof msg.GW2MS_ReqRegist
         * @instance
         */
        GW2MS_ReqRegist.prototype.account = "";

        /**
         * GW2MS_ReqRegist passwd.
         * @member {string} passwd
         * @memberof msg.GW2MS_ReqRegist
         * @instance
         */
        GW2MS_ReqRegist.prototype.passwd = "";

        /**
         * GW2MS_ReqRegist agentname.
         * @member {string} agentname
         * @memberof msg.GW2MS_ReqRegist
         * @instance
         */
        GW2MS_ReqRegist.prototype.agentname = "";

        /**
         * GW2MS_ReqRegist host.
         * @member {msg.IIpHost|null|undefined} host
         * @memberof msg.GW2MS_ReqRegist
         * @instance
         */
        GW2MS_ReqRegist.prototype.host = null;

        /**
         * Creates a new GW2MS_ReqRegist instance using the specified properties.
         * @function create
         * @memberof msg.GW2MS_ReqRegist
         * @static
         * @param {msg.IGW2MS_ReqRegist=} [properties] Properties to set
         * @returns {msg.GW2MS_ReqRegist} GW2MS_ReqRegist instance
         */
        GW2MS_ReqRegist.create = function create(properties) {
            return new GW2MS_ReqRegist(properties);
        };

        /**
         * Encodes the specified GW2MS_ReqRegist message. Does not implicitly {@link msg.GW2MS_ReqRegist.verify|verify} messages.
         * @function encode
         * @memberof msg.GW2MS_ReqRegist
         * @static
         * @param {msg.IGW2MS_ReqRegist} message GW2MS_ReqRegist message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2MS_ReqRegist.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.account != null && message.hasOwnProperty("account"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.account);
            if (message.passwd != null && message.hasOwnProperty("passwd"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.passwd);
            if (message.agentname != null && message.hasOwnProperty("agentname"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.agentname);
            if (message.host != null && message.hasOwnProperty("host"))
                $root.msg.IpHost.encode(message.host, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified GW2MS_ReqRegist message, length delimited. Does not implicitly {@link msg.GW2MS_ReqRegist.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.GW2MS_ReqRegist
         * @static
         * @param {msg.IGW2MS_ReqRegist} message GW2MS_ReqRegist message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2MS_ReqRegist.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GW2MS_ReqRegist message from the specified reader or buffer.
         * @function decode
         * @memberof msg.GW2MS_ReqRegist
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.GW2MS_ReqRegist} GW2MS_ReqRegist
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2MS_ReqRegist.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.GW2MS_ReqRegist();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.account = reader.string();
                    break;
                case 2:
                    message.passwd = reader.string();
                    break;
                case 3:
                    message.agentname = reader.string();
                    break;
                case 4:
                    message.host = $root.msg.IpHost.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GW2MS_ReqRegist message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.GW2MS_ReqRegist
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.GW2MS_ReqRegist} GW2MS_ReqRegist
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2MS_ReqRegist.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GW2MS_ReqRegist message.
         * @function verify
         * @memberof msg.GW2MS_ReqRegist
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GW2MS_ReqRegist.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.account != null && message.hasOwnProperty("account"))
                if (!$util.isString(message.account))
                    return "account: string expected";
            if (message.passwd != null && message.hasOwnProperty("passwd"))
                if (!$util.isString(message.passwd))
                    return "passwd: string expected";
            if (message.agentname != null && message.hasOwnProperty("agentname"))
                if (!$util.isString(message.agentname))
                    return "agentname: string expected";
            if (message.host != null && message.hasOwnProperty("host")) {
                var error = $root.msg.IpHost.verify(message.host);
                if (error)
                    return "host." + error;
            }
            return null;
        };

        /**
         * Creates a GW2MS_ReqRegist message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.GW2MS_ReqRegist
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.GW2MS_ReqRegist} GW2MS_ReqRegist
         */
        GW2MS_ReqRegist.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.GW2MS_ReqRegist)
                return object;
            var message = new $root.msg.GW2MS_ReqRegist();
            if (object.account != null)
                message.account = String(object.account);
            if (object.passwd != null)
                message.passwd = String(object.passwd);
            if (object.agentname != null)
                message.agentname = String(object.agentname);
            if (object.host != null) {
                if (typeof object.host !== "object")
                    throw TypeError(".msg.GW2MS_ReqRegist.host: object expected");
                message.host = $root.msg.IpHost.fromObject(object.host);
            }
            return message;
        };

        /**
         * Creates a plain object from a GW2MS_ReqRegist message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.GW2MS_ReqRegist
         * @static
         * @param {msg.GW2MS_ReqRegist} message GW2MS_ReqRegist
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GW2MS_ReqRegist.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.account = "";
                object.passwd = "";
                object.agentname = "";
                object.host = null;
            }
            if (message.account != null && message.hasOwnProperty("account"))
                object.account = message.account;
            if (message.passwd != null && message.hasOwnProperty("passwd"))
                object.passwd = message.passwd;
            if (message.agentname != null && message.hasOwnProperty("agentname"))
                object.agentname = message.agentname;
            if (message.host != null && message.hasOwnProperty("host"))
                object.host = $root.msg.IpHost.toObject(message.host, options);
            return object;
        };

        /**
         * Converts this GW2MS_ReqRegist to JSON.
         * @function toJSON
         * @memberof msg.GW2MS_ReqRegist
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GW2MS_ReqRegist.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GW2MS_ReqRegist;
    })();

    msg.MS2GW_RetRegist = (function() {

        /**
         * Properties of a MS2GW_RetRegist.
         * @memberof msg
         * @interface IMS2GW_RetRegist
         * @property {string|null} [errcode] MS2GW_RetRegist errcode
         * @property {msg.IIpHost|null} [host] MS2GW_RetRegist host
         */

        /**
         * Constructs a new MS2GW_RetRegist.
         * @memberof msg
         * @classdesc Represents a MS2GW_RetRegist.
         * @implements IMS2GW_RetRegist
         * @constructor
         * @param {msg.IMS2GW_RetRegist=} [properties] Properties to set
         */
        function MS2GW_RetRegist(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * MS2GW_RetRegist errcode.
         * @member {string} errcode
         * @memberof msg.MS2GW_RetRegist
         * @instance
         */
        MS2GW_RetRegist.prototype.errcode = "";

        /**
         * MS2GW_RetRegist host.
         * @member {msg.IIpHost|null|undefined} host
         * @memberof msg.MS2GW_RetRegist
         * @instance
         */
        MS2GW_RetRegist.prototype.host = null;

        /**
         * Creates a new MS2GW_RetRegist instance using the specified properties.
         * @function create
         * @memberof msg.MS2GW_RetRegist
         * @static
         * @param {msg.IMS2GW_RetRegist=} [properties] Properties to set
         * @returns {msg.MS2GW_RetRegist} MS2GW_RetRegist instance
         */
        MS2GW_RetRegist.create = function create(properties) {
            return new MS2GW_RetRegist(properties);
        };

        /**
         * Encodes the specified MS2GW_RetRegist message. Does not implicitly {@link msg.MS2GW_RetRegist.verify|verify} messages.
         * @function encode
         * @memberof msg.MS2GW_RetRegist
         * @static
         * @param {msg.IMS2GW_RetRegist} message MS2GW_RetRegist message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        MS2GW_RetRegist.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.errcode != null && message.hasOwnProperty("errcode"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.errcode);
            if (message.host != null && message.hasOwnProperty("host"))
                $root.msg.IpHost.encode(message.host, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified MS2GW_RetRegist message, length delimited. Does not implicitly {@link msg.MS2GW_RetRegist.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.MS2GW_RetRegist
         * @static
         * @param {msg.IMS2GW_RetRegist} message MS2GW_RetRegist message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        MS2GW_RetRegist.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a MS2GW_RetRegist message from the specified reader or buffer.
         * @function decode
         * @memberof msg.MS2GW_RetRegist
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.MS2GW_RetRegist} MS2GW_RetRegist
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        MS2GW_RetRegist.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.MS2GW_RetRegist();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.errcode = reader.string();
                    break;
                case 2:
                    message.host = $root.msg.IpHost.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a MS2GW_RetRegist message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.MS2GW_RetRegist
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.MS2GW_RetRegist} MS2GW_RetRegist
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        MS2GW_RetRegist.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a MS2GW_RetRegist message.
         * @function verify
         * @memberof msg.MS2GW_RetRegist
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        MS2GW_RetRegist.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.errcode != null && message.hasOwnProperty("errcode"))
                if (!$util.isString(message.errcode))
                    return "errcode: string expected";
            if (message.host != null && message.hasOwnProperty("host")) {
                var error = $root.msg.IpHost.verify(message.host);
                if (error)
                    return "host." + error;
            }
            return null;
        };

        /**
         * Creates a MS2GW_RetRegist message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.MS2GW_RetRegist
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.MS2GW_RetRegist} MS2GW_RetRegist
         */
        MS2GW_RetRegist.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.MS2GW_RetRegist)
                return object;
            var message = new $root.msg.MS2GW_RetRegist();
            if (object.errcode != null)
                message.errcode = String(object.errcode);
            if (object.host != null) {
                if (typeof object.host !== "object")
                    throw TypeError(".msg.MS2GW_RetRegist.host: object expected");
                message.host = $root.msg.IpHost.fromObject(object.host);
            }
            return message;
        };

        /**
         * Creates a plain object from a MS2GW_RetRegist message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.MS2GW_RetRegist
         * @static
         * @param {msg.MS2GW_RetRegist} message MS2GW_RetRegist
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        MS2GW_RetRegist.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.errcode = "";
                object.host = null;
            }
            if (message.errcode != null && message.hasOwnProperty("errcode"))
                object.errcode = message.errcode;
            if (message.host != null && message.hasOwnProperty("host"))
                object.host = $root.msg.IpHost.toObject(message.host, options);
            return object;
        };

        /**
         * Converts this MS2GW_RetRegist to JSON.
         * @function toJSON
         * @memberof msg.MS2GW_RetRegist
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        MS2GW_RetRegist.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return MS2GW_RetRegist;
    })();

    msg.GW2MS_HeartBeat = (function() {

        /**
         * Properties of a GW2MS_HeartBeat.
         * @memberof msg
         * @interface IGW2MS_HeartBeat
         */

        /**
         * Constructs a new GW2MS_HeartBeat.
         * @memberof msg
         * @classdesc Represents a GW2MS_HeartBeat.
         * @implements IGW2MS_HeartBeat
         * @constructor
         * @param {msg.IGW2MS_HeartBeat=} [properties] Properties to set
         */
        function GW2MS_HeartBeat(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Creates a new GW2MS_HeartBeat instance using the specified properties.
         * @function create
         * @memberof msg.GW2MS_HeartBeat
         * @static
         * @param {msg.IGW2MS_HeartBeat=} [properties] Properties to set
         * @returns {msg.GW2MS_HeartBeat} GW2MS_HeartBeat instance
         */
        GW2MS_HeartBeat.create = function create(properties) {
            return new GW2MS_HeartBeat(properties);
        };

        /**
         * Encodes the specified GW2MS_HeartBeat message. Does not implicitly {@link msg.GW2MS_HeartBeat.verify|verify} messages.
         * @function encode
         * @memberof msg.GW2MS_HeartBeat
         * @static
         * @param {msg.IGW2MS_HeartBeat} message GW2MS_HeartBeat message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2MS_HeartBeat.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };

        /**
         * Encodes the specified GW2MS_HeartBeat message, length delimited. Does not implicitly {@link msg.GW2MS_HeartBeat.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.GW2MS_HeartBeat
         * @static
         * @param {msg.IGW2MS_HeartBeat} message GW2MS_HeartBeat message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2MS_HeartBeat.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GW2MS_HeartBeat message from the specified reader or buffer.
         * @function decode
         * @memberof msg.GW2MS_HeartBeat
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.GW2MS_HeartBeat} GW2MS_HeartBeat
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2MS_HeartBeat.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.GW2MS_HeartBeat();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GW2MS_HeartBeat message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.GW2MS_HeartBeat
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.GW2MS_HeartBeat} GW2MS_HeartBeat
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2MS_HeartBeat.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GW2MS_HeartBeat message.
         * @function verify
         * @memberof msg.GW2MS_HeartBeat
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GW2MS_HeartBeat.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            return null;
        };

        /**
         * Creates a GW2MS_HeartBeat message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.GW2MS_HeartBeat
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.GW2MS_HeartBeat} GW2MS_HeartBeat
         */
        GW2MS_HeartBeat.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.GW2MS_HeartBeat)
                return object;
            return new $root.msg.GW2MS_HeartBeat();
        };

        /**
         * Creates a plain object from a GW2MS_HeartBeat message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.GW2MS_HeartBeat
         * @static
         * @param {msg.GW2MS_HeartBeat} message GW2MS_HeartBeat
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GW2MS_HeartBeat.toObject = function toObject() {
            return {};
        };

        /**
         * Converts this GW2MS_HeartBeat to JSON.
         * @function toJSON
         * @memberof msg.GW2MS_HeartBeat
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GW2MS_HeartBeat.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GW2MS_HeartBeat;
    })();

    msg.MS2GW_HeartBeat = (function() {

        /**
         * Properties of a MS2GW_HeartBeat.
         * @memberof msg
         * @interface IMS2GW_HeartBeat
         */

        /**
         * Constructs a new MS2GW_HeartBeat.
         * @memberof msg
         * @classdesc Represents a MS2GW_HeartBeat.
         * @implements IMS2GW_HeartBeat
         * @constructor
         * @param {msg.IMS2GW_HeartBeat=} [properties] Properties to set
         */
        function MS2GW_HeartBeat(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Creates a new MS2GW_HeartBeat instance using the specified properties.
         * @function create
         * @memberof msg.MS2GW_HeartBeat
         * @static
         * @param {msg.IMS2GW_HeartBeat=} [properties] Properties to set
         * @returns {msg.MS2GW_HeartBeat} MS2GW_HeartBeat instance
         */
        MS2GW_HeartBeat.create = function create(properties) {
            return new MS2GW_HeartBeat(properties);
        };

        /**
         * Encodes the specified MS2GW_HeartBeat message. Does not implicitly {@link msg.MS2GW_HeartBeat.verify|verify} messages.
         * @function encode
         * @memberof msg.MS2GW_HeartBeat
         * @static
         * @param {msg.IMS2GW_HeartBeat} message MS2GW_HeartBeat message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        MS2GW_HeartBeat.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };

        /**
         * Encodes the specified MS2GW_HeartBeat message, length delimited. Does not implicitly {@link msg.MS2GW_HeartBeat.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.MS2GW_HeartBeat
         * @static
         * @param {msg.IMS2GW_HeartBeat} message MS2GW_HeartBeat message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        MS2GW_HeartBeat.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a MS2GW_HeartBeat message from the specified reader or buffer.
         * @function decode
         * @memberof msg.MS2GW_HeartBeat
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.MS2GW_HeartBeat} MS2GW_HeartBeat
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        MS2GW_HeartBeat.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.MS2GW_HeartBeat();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a MS2GW_HeartBeat message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.MS2GW_HeartBeat
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.MS2GW_HeartBeat} MS2GW_HeartBeat
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        MS2GW_HeartBeat.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a MS2GW_HeartBeat message.
         * @function verify
         * @memberof msg.MS2GW_HeartBeat
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        MS2GW_HeartBeat.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            return null;
        };

        /**
         * Creates a MS2GW_HeartBeat message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.MS2GW_HeartBeat
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.MS2GW_HeartBeat} MS2GW_HeartBeat
         */
        MS2GW_HeartBeat.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.MS2GW_HeartBeat)
                return object;
            return new $root.msg.MS2GW_HeartBeat();
        };

        /**
         * Creates a plain object from a MS2GW_HeartBeat message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.MS2GW_HeartBeat
         * @static
         * @param {msg.MS2GW_HeartBeat} message MS2GW_HeartBeat
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        MS2GW_HeartBeat.toObject = function toObject() {
            return {};
        };

        /**
         * Converts this MS2GW_HeartBeat to JSON.
         * @function toJSON
         * @memberof msg.MS2GW_HeartBeat
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        MS2GW_HeartBeat.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return MS2GW_HeartBeat;
    })();

    msg.GW2MS_ReqCreateRoom = (function() {

        /**
         * Properties of a GW2MS_ReqCreateRoom.
         * @memberof msg
         * @interface IGW2MS_ReqCreateRoom
         * @property {number|Long|null} [userid] GW2MS_ReqCreateRoom userid
         * @property {number|null} [gamekind] GW2MS_ReqCreateRoom gamekind
         */

        /**
         * Constructs a new GW2MS_ReqCreateRoom.
         * @memberof msg
         * @classdesc Represents a GW2MS_ReqCreateRoom.
         * @implements IGW2MS_ReqCreateRoom
         * @constructor
         * @param {msg.IGW2MS_ReqCreateRoom=} [properties] Properties to set
         */
        function GW2MS_ReqCreateRoom(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GW2MS_ReqCreateRoom userid.
         * @member {number|Long} userid
         * @memberof msg.GW2MS_ReqCreateRoom
         * @instance
         */
        GW2MS_ReqCreateRoom.prototype.userid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * GW2MS_ReqCreateRoom gamekind.
         * @member {number} gamekind
         * @memberof msg.GW2MS_ReqCreateRoom
         * @instance
         */
        GW2MS_ReqCreateRoom.prototype.gamekind = 0;

        /**
         * Creates a new GW2MS_ReqCreateRoom instance using the specified properties.
         * @function create
         * @memberof msg.GW2MS_ReqCreateRoom
         * @static
         * @param {msg.IGW2MS_ReqCreateRoom=} [properties] Properties to set
         * @returns {msg.GW2MS_ReqCreateRoom} GW2MS_ReqCreateRoom instance
         */
        GW2MS_ReqCreateRoom.create = function create(properties) {
            return new GW2MS_ReqCreateRoom(properties);
        };

        /**
         * Encodes the specified GW2MS_ReqCreateRoom message. Does not implicitly {@link msg.GW2MS_ReqCreateRoom.verify|verify} messages.
         * @function encode
         * @memberof msg.GW2MS_ReqCreateRoom
         * @static
         * @param {msg.IGW2MS_ReqCreateRoom} message GW2MS_ReqCreateRoom message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2MS_ReqCreateRoom.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.userid != null && message.hasOwnProperty("userid"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.userid);
            if (message.gamekind != null && message.hasOwnProperty("gamekind"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.gamekind);
            return writer;
        };

        /**
         * Encodes the specified GW2MS_ReqCreateRoom message, length delimited. Does not implicitly {@link msg.GW2MS_ReqCreateRoom.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.GW2MS_ReqCreateRoom
         * @static
         * @param {msg.IGW2MS_ReqCreateRoom} message GW2MS_ReqCreateRoom message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2MS_ReqCreateRoom.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GW2MS_ReqCreateRoom message from the specified reader or buffer.
         * @function decode
         * @memberof msg.GW2MS_ReqCreateRoom
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.GW2MS_ReqCreateRoom} GW2MS_ReqCreateRoom
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2MS_ReqCreateRoom.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.GW2MS_ReqCreateRoom();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.userid = reader.uint64();
                    break;
                case 2:
                    message.gamekind = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GW2MS_ReqCreateRoom message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.GW2MS_ReqCreateRoom
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.GW2MS_ReqCreateRoom} GW2MS_ReqCreateRoom
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2MS_ReqCreateRoom.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GW2MS_ReqCreateRoom message.
         * @function verify
         * @memberof msg.GW2MS_ReqCreateRoom
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GW2MS_ReqCreateRoom.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.userid != null && message.hasOwnProperty("userid"))
                if (!$util.isInteger(message.userid) && !(message.userid && $util.isInteger(message.userid.low) && $util.isInteger(message.userid.high)))
                    return "userid: integer|Long expected";
            if (message.gamekind != null && message.hasOwnProperty("gamekind"))
                if (!$util.isInteger(message.gamekind))
                    return "gamekind: integer expected";
            return null;
        };

        /**
         * Creates a GW2MS_ReqCreateRoom message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.GW2MS_ReqCreateRoom
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.GW2MS_ReqCreateRoom} GW2MS_ReqCreateRoom
         */
        GW2MS_ReqCreateRoom.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.GW2MS_ReqCreateRoom)
                return object;
            var message = new $root.msg.GW2MS_ReqCreateRoom();
            if (object.userid != null)
                if ($util.Long)
                    (message.userid = $util.Long.fromValue(object.userid)).unsigned = true;
                else if (typeof object.userid === "string")
                    message.userid = parseInt(object.userid, 10);
                else if (typeof object.userid === "number")
                    message.userid = object.userid;
                else if (typeof object.userid === "object")
                    message.userid = new $util.LongBits(object.userid.low >>> 0, object.userid.high >>> 0).toNumber(true);
            if (object.gamekind != null)
                message.gamekind = object.gamekind | 0;
            return message;
        };

        /**
         * Creates a plain object from a GW2MS_ReqCreateRoom message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.GW2MS_ReqCreateRoom
         * @static
         * @param {msg.GW2MS_ReqCreateRoom} message GW2MS_ReqCreateRoom
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GW2MS_ReqCreateRoom.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.userid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.userid = options.longs === String ? "0" : 0;
                object.gamekind = 0;
            }
            if (message.userid != null && message.hasOwnProperty("userid"))
                if (typeof message.userid === "number")
                    object.userid = options.longs === String ? String(message.userid) : message.userid;
                else
                    object.userid = options.longs === String ? $util.Long.prototype.toString.call(message.userid) : options.longs === Number ? new $util.LongBits(message.userid.low >>> 0, message.userid.high >>> 0).toNumber(true) : message.userid;
            if (message.gamekind != null && message.hasOwnProperty("gamekind"))
                object.gamekind = message.gamekind;
            return object;
        };

        /**
         * Converts this GW2MS_ReqCreateRoom to JSON.
         * @function toJSON
         * @memberof msg.GW2MS_ReqCreateRoom
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GW2MS_ReqCreateRoom.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GW2MS_ReqCreateRoom;
    })();

    msg.MS2GW_RetCreateRoom = (function() {

        /**
         * Properties of a MS2GW_RetCreateRoom.
         * @memberof msg
         * @interface IMS2GW_RetCreateRoom
         * @property {number|Long|null} [userid] MS2GW_RetCreateRoom userid
         * @property {number|Long|null} [roomid] MS2GW_RetCreateRoom roomid
         * @property {string|null} [errcode] MS2GW_RetCreateRoom errcode
         * @property {string|null} [roomagent] MS2GW_RetCreateRoom roomagent
         */

        /**
         * Constructs a new MS2GW_RetCreateRoom.
         * @memberof msg
         * @classdesc Represents a MS2GW_RetCreateRoom.
         * @implements IMS2GW_RetCreateRoom
         * @constructor
         * @param {msg.IMS2GW_RetCreateRoom=} [properties] Properties to set
         */
        function MS2GW_RetCreateRoom(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * MS2GW_RetCreateRoom userid.
         * @member {number|Long} userid
         * @memberof msg.MS2GW_RetCreateRoom
         * @instance
         */
        MS2GW_RetCreateRoom.prototype.userid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * MS2GW_RetCreateRoom roomid.
         * @member {number|Long} roomid
         * @memberof msg.MS2GW_RetCreateRoom
         * @instance
         */
        MS2GW_RetCreateRoom.prototype.roomid = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * MS2GW_RetCreateRoom errcode.
         * @member {string} errcode
         * @memberof msg.MS2GW_RetCreateRoom
         * @instance
         */
        MS2GW_RetCreateRoom.prototype.errcode = "";

        /**
         * MS2GW_RetCreateRoom roomagent.
         * @member {string} roomagent
         * @memberof msg.MS2GW_RetCreateRoom
         * @instance
         */
        MS2GW_RetCreateRoom.prototype.roomagent = "";

        /**
         * Creates a new MS2GW_RetCreateRoom instance using the specified properties.
         * @function create
         * @memberof msg.MS2GW_RetCreateRoom
         * @static
         * @param {msg.IMS2GW_RetCreateRoom=} [properties] Properties to set
         * @returns {msg.MS2GW_RetCreateRoom} MS2GW_RetCreateRoom instance
         */
        MS2GW_RetCreateRoom.create = function create(properties) {
            return new MS2GW_RetCreateRoom(properties);
        };

        /**
         * Encodes the specified MS2GW_RetCreateRoom message. Does not implicitly {@link msg.MS2GW_RetCreateRoom.verify|verify} messages.
         * @function encode
         * @memberof msg.MS2GW_RetCreateRoom
         * @static
         * @param {msg.IMS2GW_RetCreateRoom} message MS2GW_RetCreateRoom message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        MS2GW_RetCreateRoom.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.userid != null && message.hasOwnProperty("userid"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.userid);
            if (message.roomid != null && message.hasOwnProperty("roomid"))
                writer.uint32(/* id 2, wireType 0 =*/16).int64(message.roomid);
            if (message.errcode != null && message.hasOwnProperty("errcode"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.errcode);
            if (message.roomagent != null && message.hasOwnProperty("roomagent"))
                writer.uint32(/* id 4, wireType 2 =*/34).string(message.roomagent);
            return writer;
        };

        /**
         * Encodes the specified MS2GW_RetCreateRoom message, length delimited. Does not implicitly {@link msg.MS2GW_RetCreateRoom.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.MS2GW_RetCreateRoom
         * @static
         * @param {msg.IMS2GW_RetCreateRoom} message MS2GW_RetCreateRoom message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        MS2GW_RetCreateRoom.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a MS2GW_RetCreateRoom message from the specified reader or buffer.
         * @function decode
         * @memberof msg.MS2GW_RetCreateRoom
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.MS2GW_RetCreateRoom} MS2GW_RetCreateRoom
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        MS2GW_RetCreateRoom.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.MS2GW_RetCreateRoom();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.userid = reader.uint64();
                    break;
                case 2:
                    message.roomid = reader.int64();
                    break;
                case 3:
                    message.errcode = reader.string();
                    break;
                case 4:
                    message.roomagent = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a MS2GW_RetCreateRoom message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.MS2GW_RetCreateRoom
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.MS2GW_RetCreateRoom} MS2GW_RetCreateRoom
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        MS2GW_RetCreateRoom.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a MS2GW_RetCreateRoom message.
         * @function verify
         * @memberof msg.MS2GW_RetCreateRoom
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        MS2GW_RetCreateRoom.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.userid != null && message.hasOwnProperty("userid"))
                if (!$util.isInteger(message.userid) && !(message.userid && $util.isInteger(message.userid.low) && $util.isInteger(message.userid.high)))
                    return "userid: integer|Long expected";
            if (message.roomid != null && message.hasOwnProperty("roomid"))
                if (!$util.isInteger(message.roomid) && !(message.roomid && $util.isInteger(message.roomid.low) && $util.isInteger(message.roomid.high)))
                    return "roomid: integer|Long expected";
            if (message.errcode != null && message.hasOwnProperty("errcode"))
                if (!$util.isString(message.errcode))
                    return "errcode: string expected";
            if (message.roomagent != null && message.hasOwnProperty("roomagent"))
                if (!$util.isString(message.roomagent))
                    return "roomagent: string expected";
            return null;
        };

        /**
         * Creates a MS2GW_RetCreateRoom message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.MS2GW_RetCreateRoom
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.MS2GW_RetCreateRoom} MS2GW_RetCreateRoom
         */
        MS2GW_RetCreateRoom.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.MS2GW_RetCreateRoom)
                return object;
            var message = new $root.msg.MS2GW_RetCreateRoom();
            if (object.userid != null)
                if ($util.Long)
                    (message.userid = $util.Long.fromValue(object.userid)).unsigned = true;
                else if (typeof object.userid === "string")
                    message.userid = parseInt(object.userid, 10);
                else if (typeof object.userid === "number")
                    message.userid = object.userid;
                else if (typeof object.userid === "object")
                    message.userid = new $util.LongBits(object.userid.low >>> 0, object.userid.high >>> 0).toNumber(true);
            if (object.roomid != null)
                if ($util.Long)
                    (message.roomid = $util.Long.fromValue(object.roomid)).unsigned = false;
                else if (typeof object.roomid === "string")
                    message.roomid = parseInt(object.roomid, 10);
                else if (typeof object.roomid === "number")
                    message.roomid = object.roomid;
                else if (typeof object.roomid === "object")
                    message.roomid = new $util.LongBits(object.roomid.low >>> 0, object.roomid.high >>> 0).toNumber();
            if (object.errcode != null)
                message.errcode = String(object.errcode);
            if (object.roomagent != null)
                message.roomagent = String(object.roomagent);
            return message;
        };

        /**
         * Creates a plain object from a MS2GW_RetCreateRoom message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.MS2GW_RetCreateRoom
         * @static
         * @param {msg.MS2GW_RetCreateRoom} message MS2GW_RetCreateRoom
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        MS2GW_RetCreateRoom.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.userid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.userid = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.roomid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.roomid = options.longs === String ? "0" : 0;
                object.errcode = "";
                object.roomagent = "";
            }
            if (message.userid != null && message.hasOwnProperty("userid"))
                if (typeof message.userid === "number")
                    object.userid = options.longs === String ? String(message.userid) : message.userid;
                else
                    object.userid = options.longs === String ? $util.Long.prototype.toString.call(message.userid) : options.longs === Number ? new $util.LongBits(message.userid.low >>> 0, message.userid.high >>> 0).toNumber(true) : message.userid;
            if (message.roomid != null && message.hasOwnProperty("roomid"))
                if (typeof message.roomid === "number")
                    object.roomid = options.longs === String ? String(message.roomid) : message.roomid;
                else
                    object.roomid = options.longs === String ? $util.Long.prototype.toString.call(message.roomid) : options.longs === Number ? new $util.LongBits(message.roomid.low >>> 0, message.roomid.high >>> 0).toNumber() : message.roomid;
            if (message.errcode != null && message.hasOwnProperty("errcode"))
                object.errcode = message.errcode;
            if (message.roomagent != null && message.hasOwnProperty("roomagent"))
                object.roomagent = message.roomagent;
            return object;
        };

        /**
         * Converts this MS2GW_RetCreateRoom to JSON.
         * @function toJSON
         * @memberof msg.MS2GW_RetCreateRoom
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        MS2GW_RetCreateRoom.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return MS2GW_RetCreateRoom;
    })();

    msg.RS2GW_ReqRegist = (function() {

        /**
         * Properties of a RS2GW_ReqRegist.
         * @memberof msg
         * @interface IRS2GW_ReqRegist
         * @property {string|null} [account] RS2GW_ReqRegist account
         * @property {string|null} [passwd] RS2GW_ReqRegist passwd
         * @property {string|null} [agentname] RS2GW_ReqRegist agentname
         */

        /**
         * Constructs a new RS2GW_ReqRegist.
         * @memberof msg
         * @classdesc Represents a RS2GW_ReqRegist.
         * @implements IRS2GW_ReqRegist
         * @constructor
         * @param {msg.IRS2GW_ReqRegist=} [properties] Properties to set
         */
        function RS2GW_ReqRegist(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * RS2GW_ReqRegist account.
         * @member {string} account
         * @memberof msg.RS2GW_ReqRegist
         * @instance
         */
        RS2GW_ReqRegist.prototype.account = "";

        /**
         * RS2GW_ReqRegist passwd.
         * @member {string} passwd
         * @memberof msg.RS2GW_ReqRegist
         * @instance
         */
        RS2GW_ReqRegist.prototype.passwd = "";

        /**
         * RS2GW_ReqRegist agentname.
         * @member {string} agentname
         * @memberof msg.RS2GW_ReqRegist
         * @instance
         */
        RS2GW_ReqRegist.prototype.agentname = "";

        /**
         * Creates a new RS2GW_ReqRegist instance using the specified properties.
         * @function create
         * @memberof msg.RS2GW_ReqRegist
         * @static
         * @param {msg.IRS2GW_ReqRegist=} [properties] Properties to set
         * @returns {msg.RS2GW_ReqRegist} RS2GW_ReqRegist instance
         */
        RS2GW_ReqRegist.create = function create(properties) {
            return new RS2GW_ReqRegist(properties);
        };

        /**
         * Encodes the specified RS2GW_ReqRegist message. Does not implicitly {@link msg.RS2GW_ReqRegist.verify|verify} messages.
         * @function encode
         * @memberof msg.RS2GW_ReqRegist
         * @static
         * @param {msg.IRS2GW_ReqRegist} message RS2GW_ReqRegist message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RS2GW_ReqRegist.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.account != null && message.hasOwnProperty("account"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.account);
            if (message.passwd != null && message.hasOwnProperty("passwd"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.passwd);
            if (message.agentname != null && message.hasOwnProperty("agentname"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.agentname);
            return writer;
        };

        /**
         * Encodes the specified RS2GW_ReqRegist message, length delimited. Does not implicitly {@link msg.RS2GW_ReqRegist.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.RS2GW_ReqRegist
         * @static
         * @param {msg.IRS2GW_ReqRegist} message RS2GW_ReqRegist message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RS2GW_ReqRegist.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a RS2GW_ReqRegist message from the specified reader or buffer.
         * @function decode
         * @memberof msg.RS2GW_ReqRegist
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.RS2GW_ReqRegist} RS2GW_ReqRegist
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RS2GW_ReqRegist.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.RS2GW_ReqRegist();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.account = reader.string();
                    break;
                case 2:
                    message.passwd = reader.string();
                    break;
                case 3:
                    message.agentname = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a RS2GW_ReqRegist message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.RS2GW_ReqRegist
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.RS2GW_ReqRegist} RS2GW_ReqRegist
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RS2GW_ReqRegist.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a RS2GW_ReqRegist message.
         * @function verify
         * @memberof msg.RS2GW_ReqRegist
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        RS2GW_ReqRegist.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.account != null && message.hasOwnProperty("account"))
                if (!$util.isString(message.account))
                    return "account: string expected";
            if (message.passwd != null && message.hasOwnProperty("passwd"))
                if (!$util.isString(message.passwd))
                    return "passwd: string expected";
            if (message.agentname != null && message.hasOwnProperty("agentname"))
                if (!$util.isString(message.agentname))
                    return "agentname: string expected";
            return null;
        };

        /**
         * Creates a RS2GW_ReqRegist message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.RS2GW_ReqRegist
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.RS2GW_ReqRegist} RS2GW_ReqRegist
         */
        RS2GW_ReqRegist.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.RS2GW_ReqRegist)
                return object;
            var message = new $root.msg.RS2GW_ReqRegist();
            if (object.account != null)
                message.account = String(object.account);
            if (object.passwd != null)
                message.passwd = String(object.passwd);
            if (object.agentname != null)
                message.agentname = String(object.agentname);
            return message;
        };

        /**
         * Creates a plain object from a RS2GW_ReqRegist message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.RS2GW_ReqRegist
         * @static
         * @param {msg.RS2GW_ReqRegist} message RS2GW_ReqRegist
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        RS2GW_ReqRegist.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.account = "";
                object.passwd = "";
                object.agentname = "";
            }
            if (message.account != null && message.hasOwnProperty("account"))
                object.account = message.account;
            if (message.passwd != null && message.hasOwnProperty("passwd"))
                object.passwd = message.passwd;
            if (message.agentname != null && message.hasOwnProperty("agentname"))
                object.agentname = message.agentname;
            return object;
        };

        /**
         * Converts this RS2GW_ReqRegist to JSON.
         * @function toJSON
         * @memberof msg.RS2GW_ReqRegist
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        RS2GW_ReqRegist.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RS2GW_ReqRegist;
    })();

    msg.GW2RS_RetRegist = (function() {

        /**
         * Properties of a GW2RS_RetRegist.
         * @memberof msg
         * @interface IGW2RS_RetRegist
         * @property {string|null} [errcode] GW2RS_RetRegist errcode
         * @property {string|null} [agentname] GW2RS_RetRegist agentname
         */

        /**
         * Constructs a new GW2RS_RetRegist.
         * @memberof msg
         * @classdesc Represents a GW2RS_RetRegist.
         * @implements IGW2RS_RetRegist
         * @constructor
         * @param {msg.IGW2RS_RetRegist=} [properties] Properties to set
         */
        function GW2RS_RetRegist(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GW2RS_RetRegist errcode.
         * @member {string} errcode
         * @memberof msg.GW2RS_RetRegist
         * @instance
         */
        GW2RS_RetRegist.prototype.errcode = "";

        /**
         * GW2RS_RetRegist agentname.
         * @member {string} agentname
         * @memberof msg.GW2RS_RetRegist
         * @instance
         */
        GW2RS_RetRegist.prototype.agentname = "";

        /**
         * Creates a new GW2RS_RetRegist instance using the specified properties.
         * @function create
         * @memberof msg.GW2RS_RetRegist
         * @static
         * @param {msg.IGW2RS_RetRegist=} [properties] Properties to set
         * @returns {msg.GW2RS_RetRegist} GW2RS_RetRegist instance
         */
        GW2RS_RetRegist.create = function create(properties) {
            return new GW2RS_RetRegist(properties);
        };

        /**
         * Encodes the specified GW2RS_RetRegist message. Does not implicitly {@link msg.GW2RS_RetRegist.verify|verify} messages.
         * @function encode
         * @memberof msg.GW2RS_RetRegist
         * @static
         * @param {msg.IGW2RS_RetRegist} message GW2RS_RetRegist message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2RS_RetRegist.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.errcode != null && message.hasOwnProperty("errcode"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.errcode);
            if (message.agentname != null && message.hasOwnProperty("agentname"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.agentname);
            return writer;
        };

        /**
         * Encodes the specified GW2RS_RetRegist message, length delimited. Does not implicitly {@link msg.GW2RS_RetRegist.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.GW2RS_RetRegist
         * @static
         * @param {msg.IGW2RS_RetRegist} message GW2RS_RetRegist message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2RS_RetRegist.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GW2RS_RetRegist message from the specified reader or buffer.
         * @function decode
         * @memberof msg.GW2RS_RetRegist
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.GW2RS_RetRegist} GW2RS_RetRegist
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2RS_RetRegist.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.GW2RS_RetRegist();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.errcode = reader.string();
                    break;
                case 2:
                    message.agentname = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GW2RS_RetRegist message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.GW2RS_RetRegist
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.GW2RS_RetRegist} GW2RS_RetRegist
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2RS_RetRegist.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GW2RS_RetRegist message.
         * @function verify
         * @memberof msg.GW2RS_RetRegist
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GW2RS_RetRegist.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.errcode != null && message.hasOwnProperty("errcode"))
                if (!$util.isString(message.errcode))
                    return "errcode: string expected";
            if (message.agentname != null && message.hasOwnProperty("agentname"))
                if (!$util.isString(message.agentname))
                    return "agentname: string expected";
            return null;
        };

        /**
         * Creates a GW2RS_RetRegist message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.GW2RS_RetRegist
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.GW2RS_RetRegist} GW2RS_RetRegist
         */
        GW2RS_RetRegist.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.GW2RS_RetRegist)
                return object;
            var message = new $root.msg.GW2RS_RetRegist();
            if (object.errcode != null)
                message.errcode = String(object.errcode);
            if (object.agentname != null)
                message.agentname = String(object.agentname);
            return message;
        };

        /**
         * Creates a plain object from a GW2RS_RetRegist message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.GW2RS_RetRegist
         * @static
         * @param {msg.GW2RS_RetRegist} message GW2RS_RetRegist
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GW2RS_RetRegist.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.errcode = "";
                object.agentname = "";
            }
            if (message.errcode != null && message.hasOwnProperty("errcode"))
                object.errcode = message.errcode;
            if (message.agentname != null && message.hasOwnProperty("agentname"))
                object.agentname = message.agentname;
            return object;
        };

        /**
         * Converts this GW2RS_RetRegist to JSON.
         * @function toJSON
         * @memberof msg.GW2RS_RetRegist
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GW2RS_RetRegist.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GW2RS_RetRegist;
    })();

    msg.GW2RS_UserDisconnect = (function() {

        /**
         * Properties of a GW2RS_UserDisconnect.
         * @memberof msg
         * @interface IGW2RS_UserDisconnect
         * @property {number|Long|null} [roomid] GW2RS_UserDisconnect roomid
         * @property {number|Long|null} [userid] GW2RS_UserDisconnect userid
         */

        /**
         * Constructs a new GW2RS_UserDisconnect.
         * @memberof msg
         * @classdesc Represents a GW2RS_UserDisconnect.
         * @implements IGW2RS_UserDisconnect
         * @constructor
         * @param {msg.IGW2RS_UserDisconnect=} [properties] Properties to set
         */
        function GW2RS_UserDisconnect(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GW2RS_UserDisconnect roomid.
         * @member {number|Long} roomid
         * @memberof msg.GW2RS_UserDisconnect
         * @instance
         */
        GW2RS_UserDisconnect.prototype.roomid = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * GW2RS_UserDisconnect userid.
         * @member {number|Long} userid
         * @memberof msg.GW2RS_UserDisconnect
         * @instance
         */
        GW2RS_UserDisconnect.prototype.userid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * Creates a new GW2RS_UserDisconnect instance using the specified properties.
         * @function create
         * @memberof msg.GW2RS_UserDisconnect
         * @static
         * @param {msg.IGW2RS_UserDisconnect=} [properties] Properties to set
         * @returns {msg.GW2RS_UserDisconnect} GW2RS_UserDisconnect instance
         */
        GW2RS_UserDisconnect.create = function create(properties) {
            return new GW2RS_UserDisconnect(properties);
        };

        /**
         * Encodes the specified GW2RS_UserDisconnect message. Does not implicitly {@link msg.GW2RS_UserDisconnect.verify|verify} messages.
         * @function encode
         * @memberof msg.GW2RS_UserDisconnect
         * @static
         * @param {msg.IGW2RS_UserDisconnect} message GW2RS_UserDisconnect message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2RS_UserDisconnect.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.roomid != null && message.hasOwnProperty("roomid"))
                writer.uint32(/* id 1, wireType 0 =*/8).int64(message.roomid);
            if (message.userid != null && message.hasOwnProperty("userid"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.userid);
            return writer;
        };

        /**
         * Encodes the specified GW2RS_UserDisconnect message, length delimited. Does not implicitly {@link msg.GW2RS_UserDisconnect.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.GW2RS_UserDisconnect
         * @static
         * @param {msg.IGW2RS_UserDisconnect} message GW2RS_UserDisconnect message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2RS_UserDisconnect.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GW2RS_UserDisconnect message from the specified reader or buffer.
         * @function decode
         * @memberof msg.GW2RS_UserDisconnect
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.GW2RS_UserDisconnect} GW2RS_UserDisconnect
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2RS_UserDisconnect.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.GW2RS_UserDisconnect();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.roomid = reader.int64();
                    break;
                case 2:
                    message.userid = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GW2RS_UserDisconnect message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.GW2RS_UserDisconnect
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.GW2RS_UserDisconnect} GW2RS_UserDisconnect
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2RS_UserDisconnect.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GW2RS_UserDisconnect message.
         * @function verify
         * @memberof msg.GW2RS_UserDisconnect
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GW2RS_UserDisconnect.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.roomid != null && message.hasOwnProperty("roomid"))
                if (!$util.isInteger(message.roomid) && !(message.roomid && $util.isInteger(message.roomid.low) && $util.isInteger(message.roomid.high)))
                    return "roomid: integer|Long expected";
            if (message.userid != null && message.hasOwnProperty("userid"))
                if (!$util.isInteger(message.userid) && !(message.userid && $util.isInteger(message.userid.low) && $util.isInteger(message.userid.high)))
                    return "userid: integer|Long expected";
            return null;
        };

        /**
         * Creates a GW2RS_UserDisconnect message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.GW2RS_UserDisconnect
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.GW2RS_UserDisconnect} GW2RS_UserDisconnect
         */
        GW2RS_UserDisconnect.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.GW2RS_UserDisconnect)
                return object;
            var message = new $root.msg.GW2RS_UserDisconnect();
            if (object.roomid != null)
                if ($util.Long)
                    (message.roomid = $util.Long.fromValue(object.roomid)).unsigned = false;
                else if (typeof object.roomid === "string")
                    message.roomid = parseInt(object.roomid, 10);
                else if (typeof object.roomid === "number")
                    message.roomid = object.roomid;
                else if (typeof object.roomid === "object")
                    message.roomid = new $util.LongBits(object.roomid.low >>> 0, object.roomid.high >>> 0).toNumber();
            if (object.userid != null)
                if ($util.Long)
                    (message.userid = $util.Long.fromValue(object.userid)).unsigned = true;
                else if (typeof object.userid === "string")
                    message.userid = parseInt(object.userid, 10);
                else if (typeof object.userid === "number")
                    message.userid = object.userid;
                else if (typeof object.userid === "object")
                    message.userid = new $util.LongBits(object.userid.low >>> 0, object.userid.high >>> 0).toNumber(true);
            return message;
        };

        /**
         * Creates a plain object from a GW2RS_UserDisconnect message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.GW2RS_UserDisconnect
         * @static
         * @param {msg.GW2RS_UserDisconnect} message GW2RS_UserDisconnect
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GW2RS_UserDisconnect.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.roomid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.roomid = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.userid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.userid = options.longs === String ? "0" : 0;
            }
            if (message.roomid != null && message.hasOwnProperty("roomid"))
                if (typeof message.roomid === "number")
                    object.roomid = options.longs === String ? String(message.roomid) : message.roomid;
                else
                    object.roomid = options.longs === String ? $util.Long.prototype.toString.call(message.roomid) : options.longs === Number ? new $util.LongBits(message.roomid.low >>> 0, message.roomid.high >>> 0).toNumber() : message.roomid;
            if (message.userid != null && message.hasOwnProperty("userid"))
                if (typeof message.userid === "number")
                    object.userid = options.longs === String ? String(message.userid) : message.userid;
                else
                    object.userid = options.longs === String ? $util.Long.prototype.toString.call(message.userid) : options.longs === Number ? new $util.LongBits(message.userid.low >>> 0, message.userid.high >>> 0).toNumber(true) : message.userid;
            return object;
        };

        /**
         * Converts this GW2RS_UserDisconnect to JSON.
         * @function toJSON
         * @memberof msg.GW2RS_UserDisconnect
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GW2RS_UserDisconnect.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GW2RS_UserDisconnect;
    })();

    msg.RS2GW_RetUserDisconnect = (function() {

        /**
         * Properties of a RS2GW_RetUserDisconnect.
         * @memberof msg
         * @interface IRS2GW_RetUserDisconnect
         * @property {number|Long|null} [roomid] RS2GW_RetUserDisconnect roomid
         * @property {number|Long|null} [userid] RS2GW_RetUserDisconnect userid
         * @property {string|null} [errcode] RS2GW_RetUserDisconnect errcode
         */

        /**
         * Constructs a new RS2GW_RetUserDisconnect.
         * @memberof msg
         * @classdesc Represents a RS2GW_RetUserDisconnect.
         * @implements IRS2GW_RetUserDisconnect
         * @constructor
         * @param {msg.IRS2GW_RetUserDisconnect=} [properties] Properties to set
         */
        function RS2GW_RetUserDisconnect(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * RS2GW_RetUserDisconnect roomid.
         * @member {number|Long} roomid
         * @memberof msg.RS2GW_RetUserDisconnect
         * @instance
         */
        RS2GW_RetUserDisconnect.prototype.roomid = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * RS2GW_RetUserDisconnect userid.
         * @member {number|Long} userid
         * @memberof msg.RS2GW_RetUserDisconnect
         * @instance
         */
        RS2GW_RetUserDisconnect.prototype.userid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * RS2GW_RetUserDisconnect errcode.
         * @member {string} errcode
         * @memberof msg.RS2GW_RetUserDisconnect
         * @instance
         */
        RS2GW_RetUserDisconnect.prototype.errcode = "";

        /**
         * Creates a new RS2GW_RetUserDisconnect instance using the specified properties.
         * @function create
         * @memberof msg.RS2GW_RetUserDisconnect
         * @static
         * @param {msg.IRS2GW_RetUserDisconnect=} [properties] Properties to set
         * @returns {msg.RS2GW_RetUserDisconnect} RS2GW_RetUserDisconnect instance
         */
        RS2GW_RetUserDisconnect.create = function create(properties) {
            return new RS2GW_RetUserDisconnect(properties);
        };

        /**
         * Encodes the specified RS2GW_RetUserDisconnect message. Does not implicitly {@link msg.RS2GW_RetUserDisconnect.verify|verify} messages.
         * @function encode
         * @memberof msg.RS2GW_RetUserDisconnect
         * @static
         * @param {msg.IRS2GW_RetUserDisconnect} message RS2GW_RetUserDisconnect message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RS2GW_RetUserDisconnect.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.roomid != null && message.hasOwnProperty("roomid"))
                writer.uint32(/* id 1, wireType 0 =*/8).int64(message.roomid);
            if (message.userid != null && message.hasOwnProperty("userid"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.userid);
            if (message.errcode != null && message.hasOwnProperty("errcode"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.errcode);
            return writer;
        };

        /**
         * Encodes the specified RS2GW_RetUserDisconnect message, length delimited. Does not implicitly {@link msg.RS2GW_RetUserDisconnect.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.RS2GW_RetUserDisconnect
         * @static
         * @param {msg.IRS2GW_RetUserDisconnect} message RS2GW_RetUserDisconnect message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RS2GW_RetUserDisconnect.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a RS2GW_RetUserDisconnect message from the specified reader or buffer.
         * @function decode
         * @memberof msg.RS2GW_RetUserDisconnect
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.RS2GW_RetUserDisconnect} RS2GW_RetUserDisconnect
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RS2GW_RetUserDisconnect.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.RS2GW_RetUserDisconnect();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.roomid = reader.int64();
                    break;
                case 2:
                    message.userid = reader.uint64();
                    break;
                case 3:
                    message.errcode = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a RS2GW_RetUserDisconnect message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.RS2GW_RetUserDisconnect
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.RS2GW_RetUserDisconnect} RS2GW_RetUserDisconnect
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RS2GW_RetUserDisconnect.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a RS2GW_RetUserDisconnect message.
         * @function verify
         * @memberof msg.RS2GW_RetUserDisconnect
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        RS2GW_RetUserDisconnect.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.roomid != null && message.hasOwnProperty("roomid"))
                if (!$util.isInteger(message.roomid) && !(message.roomid && $util.isInteger(message.roomid.low) && $util.isInteger(message.roomid.high)))
                    return "roomid: integer|Long expected";
            if (message.userid != null && message.hasOwnProperty("userid"))
                if (!$util.isInteger(message.userid) && !(message.userid && $util.isInteger(message.userid.low) && $util.isInteger(message.userid.high)))
                    return "userid: integer|Long expected";
            if (message.errcode != null && message.hasOwnProperty("errcode"))
                if (!$util.isString(message.errcode))
                    return "errcode: string expected";
            return null;
        };

        /**
         * Creates a RS2GW_RetUserDisconnect message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.RS2GW_RetUserDisconnect
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.RS2GW_RetUserDisconnect} RS2GW_RetUserDisconnect
         */
        RS2GW_RetUserDisconnect.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.RS2GW_RetUserDisconnect)
                return object;
            var message = new $root.msg.RS2GW_RetUserDisconnect();
            if (object.roomid != null)
                if ($util.Long)
                    (message.roomid = $util.Long.fromValue(object.roomid)).unsigned = false;
                else if (typeof object.roomid === "string")
                    message.roomid = parseInt(object.roomid, 10);
                else if (typeof object.roomid === "number")
                    message.roomid = object.roomid;
                else if (typeof object.roomid === "object")
                    message.roomid = new $util.LongBits(object.roomid.low >>> 0, object.roomid.high >>> 0).toNumber();
            if (object.userid != null)
                if ($util.Long)
                    (message.userid = $util.Long.fromValue(object.userid)).unsigned = true;
                else if (typeof object.userid === "string")
                    message.userid = parseInt(object.userid, 10);
                else if (typeof object.userid === "number")
                    message.userid = object.userid;
                else if (typeof object.userid === "object")
                    message.userid = new $util.LongBits(object.userid.low >>> 0, object.userid.high >>> 0).toNumber(true);
            if (object.errcode != null)
                message.errcode = String(object.errcode);
            return message;
        };

        /**
         * Creates a plain object from a RS2GW_RetUserDisconnect message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.RS2GW_RetUserDisconnect
         * @static
         * @param {msg.RS2GW_RetUserDisconnect} message RS2GW_RetUserDisconnect
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        RS2GW_RetUserDisconnect.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.roomid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.roomid = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.userid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.userid = options.longs === String ? "0" : 0;
                object.errcode = "";
            }
            if (message.roomid != null && message.hasOwnProperty("roomid"))
                if (typeof message.roomid === "number")
                    object.roomid = options.longs === String ? String(message.roomid) : message.roomid;
                else
                    object.roomid = options.longs === String ? $util.Long.prototype.toString.call(message.roomid) : options.longs === Number ? new $util.LongBits(message.roomid.low >>> 0, message.roomid.high >>> 0).toNumber() : message.roomid;
            if (message.userid != null && message.hasOwnProperty("userid"))
                if (typeof message.userid === "number")
                    object.userid = options.longs === String ? String(message.userid) : message.userid;
                else
                    object.userid = options.longs === String ? $util.Long.prototype.toString.call(message.userid) : options.longs === Number ? new $util.LongBits(message.userid.low >>> 0, message.userid.high >>> 0).toNumber(true) : message.userid;
            if (message.errcode != null && message.hasOwnProperty("errcode"))
                object.errcode = message.errcode;
            return object;
        };

        /**
         * Converts this RS2GW_RetUserDisconnect to JSON.
         * @function toJSON
         * @memberof msg.RS2GW_RetUserDisconnect
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        RS2GW_RetUserDisconnect.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RS2GW_RetUserDisconnect;
    })();

    msg.GW2RS_MsgTransfer = (function() {

        /**
         * Properties of a GW2RS_MsgTransfer.
         * @memberof msg
         * @interface IGW2RS_MsgTransfer
         * @property {number|Long|null} [uid] GW2RS_MsgTransfer uid
         * @property {string|null} [name] GW2RS_MsgTransfer name
         * @property {Uint8Array|null} [buf] GW2RS_MsgTransfer buf
         */

        /**
         * Constructs a new GW2RS_MsgTransfer.
         * @memberof msg
         * @classdesc Represents a GW2RS_MsgTransfer.
         * @implements IGW2RS_MsgTransfer
         * @constructor
         * @param {msg.IGW2RS_MsgTransfer=} [properties] Properties to set
         */
        function GW2RS_MsgTransfer(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GW2RS_MsgTransfer uid.
         * @member {number|Long} uid
         * @memberof msg.GW2RS_MsgTransfer
         * @instance
         */
        GW2RS_MsgTransfer.prototype.uid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * GW2RS_MsgTransfer name.
         * @member {string} name
         * @memberof msg.GW2RS_MsgTransfer
         * @instance
         */
        GW2RS_MsgTransfer.prototype.name = "";

        /**
         * GW2RS_MsgTransfer buf.
         * @member {Uint8Array} buf
         * @memberof msg.GW2RS_MsgTransfer
         * @instance
         */
        GW2RS_MsgTransfer.prototype.buf = $util.newBuffer([]);

        /**
         * Creates a new GW2RS_MsgTransfer instance using the specified properties.
         * @function create
         * @memberof msg.GW2RS_MsgTransfer
         * @static
         * @param {msg.IGW2RS_MsgTransfer=} [properties] Properties to set
         * @returns {msg.GW2RS_MsgTransfer} GW2RS_MsgTransfer instance
         */
        GW2RS_MsgTransfer.create = function create(properties) {
            return new GW2RS_MsgTransfer(properties);
        };

        /**
         * Encodes the specified GW2RS_MsgTransfer message. Does not implicitly {@link msg.GW2RS_MsgTransfer.verify|verify} messages.
         * @function encode
         * @memberof msg.GW2RS_MsgTransfer
         * @static
         * @param {msg.IGW2RS_MsgTransfer} message GW2RS_MsgTransfer message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2RS_MsgTransfer.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.uid != null && message.hasOwnProperty("uid"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.uid);
            if (message.name != null && message.hasOwnProperty("name"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.name);
            if (message.buf != null && message.hasOwnProperty("buf"))
                writer.uint32(/* id 3, wireType 2 =*/26).bytes(message.buf);
            return writer;
        };

        /**
         * Encodes the specified GW2RS_MsgTransfer message, length delimited. Does not implicitly {@link msg.GW2RS_MsgTransfer.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.GW2RS_MsgTransfer
         * @static
         * @param {msg.IGW2RS_MsgTransfer} message GW2RS_MsgTransfer message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2RS_MsgTransfer.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GW2RS_MsgTransfer message from the specified reader or buffer.
         * @function decode
         * @memberof msg.GW2RS_MsgTransfer
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.GW2RS_MsgTransfer} GW2RS_MsgTransfer
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2RS_MsgTransfer.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.GW2RS_MsgTransfer();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.uid = reader.uint64();
                    break;
                case 2:
                    message.name = reader.string();
                    break;
                case 3:
                    message.buf = reader.bytes();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GW2RS_MsgTransfer message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.GW2RS_MsgTransfer
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.GW2RS_MsgTransfer} GW2RS_MsgTransfer
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2RS_MsgTransfer.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GW2RS_MsgTransfer message.
         * @function verify
         * @memberof msg.GW2RS_MsgTransfer
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GW2RS_MsgTransfer.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.uid != null && message.hasOwnProperty("uid"))
                if (!$util.isInteger(message.uid) && !(message.uid && $util.isInteger(message.uid.low) && $util.isInteger(message.uid.high)))
                    return "uid: integer|Long expected";
            if (message.name != null && message.hasOwnProperty("name"))
                if (!$util.isString(message.name))
                    return "name: string expected";
            if (message.buf != null && message.hasOwnProperty("buf"))
                if (!(message.buf && typeof message.buf.length === "number" || $util.isString(message.buf)))
                    return "buf: buffer expected";
            return null;
        };

        /**
         * Creates a GW2RS_MsgTransfer message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.GW2RS_MsgTransfer
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.GW2RS_MsgTransfer} GW2RS_MsgTransfer
         */
        GW2RS_MsgTransfer.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.GW2RS_MsgTransfer)
                return object;
            var message = new $root.msg.GW2RS_MsgTransfer();
            if (object.uid != null)
                if ($util.Long)
                    (message.uid = $util.Long.fromValue(object.uid)).unsigned = true;
                else if (typeof object.uid === "string")
                    message.uid = parseInt(object.uid, 10);
                else if (typeof object.uid === "number")
                    message.uid = object.uid;
                else if (typeof object.uid === "object")
                    message.uid = new $util.LongBits(object.uid.low >>> 0, object.uid.high >>> 0).toNumber(true);
            if (object.name != null)
                message.name = String(object.name);
            if (object.buf != null)
                if (typeof object.buf === "string")
                    $util.base64.decode(object.buf, message.buf = $util.newBuffer($util.base64.length(object.buf)), 0);
                else if (object.buf.length)
                    message.buf = object.buf;
            return message;
        };

        /**
         * Creates a plain object from a GW2RS_MsgTransfer message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.GW2RS_MsgTransfer
         * @static
         * @param {msg.GW2RS_MsgTransfer} message GW2RS_MsgTransfer
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GW2RS_MsgTransfer.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.uid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.uid = options.longs === String ? "0" : 0;
                object.name = "";
                object.buf = options.bytes === String ? "" : [];
            }
            if (message.uid != null && message.hasOwnProperty("uid"))
                if (typeof message.uid === "number")
                    object.uid = options.longs === String ? String(message.uid) : message.uid;
                else
                    object.uid = options.longs === String ? $util.Long.prototype.toString.call(message.uid) : options.longs === Number ? new $util.LongBits(message.uid.low >>> 0, message.uid.high >>> 0).toNumber(true) : message.uid;
            if (message.name != null && message.hasOwnProperty("name"))
                object.name = message.name;
            if (message.buf != null && message.hasOwnProperty("buf"))
                object.buf = options.bytes === String ? $util.base64.encode(message.buf, 0, message.buf.length) : options.bytes === Array ? Array.prototype.slice.call(message.buf) : message.buf;
            return object;
        };

        /**
         * Converts this GW2RS_MsgTransfer to JSON.
         * @function toJSON
         * @memberof msg.GW2RS_MsgTransfer
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GW2RS_MsgTransfer.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GW2RS_MsgTransfer;
    })();

    msg.RS2GW_MsgTransfer = (function() {

        /**
         * Properties of a RS2GW_MsgTransfer.
         * @memberof msg
         * @interface IRS2GW_MsgTransfer
         * @property {number|Long|null} [uid] RS2GW_MsgTransfer uid
         * @property {string|null} [name] RS2GW_MsgTransfer name
         * @property {Uint8Array|null} [buf] RS2GW_MsgTransfer buf
         */

        /**
         * Constructs a new RS2GW_MsgTransfer.
         * @memberof msg
         * @classdesc Represents a RS2GW_MsgTransfer.
         * @implements IRS2GW_MsgTransfer
         * @constructor
         * @param {msg.IRS2GW_MsgTransfer=} [properties] Properties to set
         */
        function RS2GW_MsgTransfer(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * RS2GW_MsgTransfer uid.
         * @member {number|Long} uid
         * @memberof msg.RS2GW_MsgTransfer
         * @instance
         */
        RS2GW_MsgTransfer.prototype.uid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * RS2GW_MsgTransfer name.
         * @member {string} name
         * @memberof msg.RS2GW_MsgTransfer
         * @instance
         */
        RS2GW_MsgTransfer.prototype.name = "";

        /**
         * RS2GW_MsgTransfer buf.
         * @member {Uint8Array} buf
         * @memberof msg.RS2GW_MsgTransfer
         * @instance
         */
        RS2GW_MsgTransfer.prototype.buf = $util.newBuffer([]);

        /**
         * Creates a new RS2GW_MsgTransfer instance using the specified properties.
         * @function create
         * @memberof msg.RS2GW_MsgTransfer
         * @static
         * @param {msg.IRS2GW_MsgTransfer=} [properties] Properties to set
         * @returns {msg.RS2GW_MsgTransfer} RS2GW_MsgTransfer instance
         */
        RS2GW_MsgTransfer.create = function create(properties) {
            return new RS2GW_MsgTransfer(properties);
        };

        /**
         * Encodes the specified RS2GW_MsgTransfer message. Does not implicitly {@link msg.RS2GW_MsgTransfer.verify|verify} messages.
         * @function encode
         * @memberof msg.RS2GW_MsgTransfer
         * @static
         * @param {msg.IRS2GW_MsgTransfer} message RS2GW_MsgTransfer message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RS2GW_MsgTransfer.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.uid != null && message.hasOwnProperty("uid"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.uid);
            if (message.name != null && message.hasOwnProperty("name"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.name);
            if (message.buf != null && message.hasOwnProperty("buf"))
                writer.uint32(/* id 3, wireType 2 =*/26).bytes(message.buf);
            return writer;
        };

        /**
         * Encodes the specified RS2GW_MsgTransfer message, length delimited. Does not implicitly {@link msg.RS2GW_MsgTransfer.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.RS2GW_MsgTransfer
         * @static
         * @param {msg.IRS2GW_MsgTransfer} message RS2GW_MsgTransfer message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RS2GW_MsgTransfer.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a RS2GW_MsgTransfer message from the specified reader or buffer.
         * @function decode
         * @memberof msg.RS2GW_MsgTransfer
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.RS2GW_MsgTransfer} RS2GW_MsgTransfer
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RS2GW_MsgTransfer.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.RS2GW_MsgTransfer();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.uid = reader.uint64();
                    break;
                case 2:
                    message.name = reader.string();
                    break;
                case 3:
                    message.buf = reader.bytes();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a RS2GW_MsgTransfer message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.RS2GW_MsgTransfer
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.RS2GW_MsgTransfer} RS2GW_MsgTransfer
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RS2GW_MsgTransfer.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a RS2GW_MsgTransfer message.
         * @function verify
         * @memberof msg.RS2GW_MsgTransfer
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        RS2GW_MsgTransfer.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.uid != null && message.hasOwnProperty("uid"))
                if (!$util.isInteger(message.uid) && !(message.uid && $util.isInteger(message.uid.low) && $util.isInteger(message.uid.high)))
                    return "uid: integer|Long expected";
            if (message.name != null && message.hasOwnProperty("name"))
                if (!$util.isString(message.name))
                    return "name: string expected";
            if (message.buf != null && message.hasOwnProperty("buf"))
                if (!(message.buf && typeof message.buf.length === "number" || $util.isString(message.buf)))
                    return "buf: buffer expected";
            return null;
        };

        /**
         * Creates a RS2GW_MsgTransfer message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.RS2GW_MsgTransfer
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.RS2GW_MsgTransfer} RS2GW_MsgTransfer
         */
        RS2GW_MsgTransfer.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.RS2GW_MsgTransfer)
                return object;
            var message = new $root.msg.RS2GW_MsgTransfer();
            if (object.uid != null)
                if ($util.Long)
                    (message.uid = $util.Long.fromValue(object.uid)).unsigned = true;
                else if (typeof object.uid === "string")
                    message.uid = parseInt(object.uid, 10);
                else if (typeof object.uid === "number")
                    message.uid = object.uid;
                else if (typeof object.uid === "object")
                    message.uid = new $util.LongBits(object.uid.low >>> 0, object.uid.high >>> 0).toNumber(true);
            if (object.name != null)
                message.name = String(object.name);
            if (object.buf != null)
                if (typeof object.buf === "string")
                    $util.base64.decode(object.buf, message.buf = $util.newBuffer($util.base64.length(object.buf)), 0);
                else if (object.buf.length)
                    message.buf = object.buf;
            return message;
        };

        /**
         * Creates a plain object from a RS2GW_MsgTransfer message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.RS2GW_MsgTransfer
         * @static
         * @param {msg.RS2GW_MsgTransfer} message RS2GW_MsgTransfer
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        RS2GW_MsgTransfer.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.uid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.uid = options.longs === String ? "0" : 0;
                object.name = "";
                object.buf = options.bytes === String ? "" : [];
            }
            if (message.uid != null && message.hasOwnProperty("uid"))
                if (typeof message.uid === "number")
                    object.uid = options.longs === String ? String(message.uid) : message.uid;
                else
                    object.uid = options.longs === String ? $util.Long.prototype.toString.call(message.uid) : options.longs === Number ? new $util.LongBits(message.uid.low >>> 0, message.uid.high >>> 0).toNumber(true) : message.uid;
            if (message.name != null && message.hasOwnProperty("name"))
                object.name = message.name;
            if (message.buf != null && message.hasOwnProperty("buf"))
                object.buf = options.bytes === String ? $util.base64.encode(message.buf, 0, message.buf.length) : options.bytes === Array ? Array.prototype.slice.call(message.buf) : message.buf;
            return object;
        };

        /**
         * Converts this RS2GW_MsgTransfer to JSON.
         * @function toJSON
         * @memberof msg.RS2GW_MsgTransfer
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        RS2GW_MsgTransfer.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RS2GW_MsgTransfer;
    })();

    msg.C2GW_BuyItem = (function() {

        /**
         * Properties of a C2GW_BuyItem.
         * @memberof msg
         * @interface IC2GW_BuyItem
         * @property {number|null} [productid] C2GW_BuyItem productid
         * @property {number|null} [num] C2GW_BuyItem num
         */

        /**
         * Constructs a new C2GW_BuyItem.
         * @memberof msg
         * @classdesc Represents a C2GW_BuyItem.
         * @implements IC2GW_BuyItem
         * @constructor
         * @param {msg.IC2GW_BuyItem=} [properties] Properties to set
         */
        function C2GW_BuyItem(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * C2GW_BuyItem productid.
         * @member {number} productid
         * @memberof msg.C2GW_BuyItem
         * @instance
         */
        C2GW_BuyItem.prototype.productid = 0;

        /**
         * C2GW_BuyItem num.
         * @member {number} num
         * @memberof msg.C2GW_BuyItem
         * @instance
         */
        C2GW_BuyItem.prototype.num = 0;

        /**
         * Creates a new C2GW_BuyItem instance using the specified properties.
         * @function create
         * @memberof msg.C2GW_BuyItem
         * @static
         * @param {msg.IC2GW_BuyItem=} [properties] Properties to set
         * @returns {msg.C2GW_BuyItem} C2GW_BuyItem instance
         */
        C2GW_BuyItem.create = function create(properties) {
            return new C2GW_BuyItem(properties);
        };

        /**
         * Encodes the specified C2GW_BuyItem message. Does not implicitly {@link msg.C2GW_BuyItem.verify|verify} messages.
         * @function encode
         * @memberof msg.C2GW_BuyItem
         * @static
         * @param {msg.IC2GW_BuyItem} message C2GW_BuyItem message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_BuyItem.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.productid != null && message.hasOwnProperty("productid"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.productid);
            if (message.num != null && message.hasOwnProperty("num"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.num);
            return writer;
        };

        /**
         * Encodes the specified C2GW_BuyItem message, length delimited. Does not implicitly {@link msg.C2GW_BuyItem.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.C2GW_BuyItem
         * @static
         * @param {msg.IC2GW_BuyItem} message C2GW_BuyItem message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_BuyItem.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a C2GW_BuyItem message from the specified reader or buffer.
         * @function decode
         * @memberof msg.C2GW_BuyItem
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.C2GW_BuyItem} C2GW_BuyItem
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_BuyItem.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.C2GW_BuyItem();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.productid = reader.uint32();
                    break;
                case 2:
                    message.num = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a C2GW_BuyItem message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.C2GW_BuyItem
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.C2GW_BuyItem} C2GW_BuyItem
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_BuyItem.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a C2GW_BuyItem message.
         * @function verify
         * @memberof msg.C2GW_BuyItem
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        C2GW_BuyItem.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.productid != null && message.hasOwnProperty("productid"))
                if (!$util.isInteger(message.productid))
                    return "productid: integer expected";
            if (message.num != null && message.hasOwnProperty("num"))
                if (!$util.isInteger(message.num))
                    return "num: integer expected";
            return null;
        };

        /**
         * Creates a C2GW_BuyItem message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.C2GW_BuyItem
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.C2GW_BuyItem} C2GW_BuyItem
         */
        C2GW_BuyItem.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.C2GW_BuyItem)
                return object;
            var message = new $root.msg.C2GW_BuyItem();
            if (object.productid != null)
                message.productid = object.productid >>> 0;
            if (object.num != null)
                message.num = object.num >>> 0;
            return message;
        };

        /**
         * Creates a plain object from a C2GW_BuyItem message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.C2GW_BuyItem
         * @static
         * @param {msg.C2GW_BuyItem} message C2GW_BuyItem
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        C2GW_BuyItem.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.productid = 0;
                object.num = 0;
            }
            if (message.productid != null && message.hasOwnProperty("productid"))
                object.productid = message.productid;
            if (message.num != null && message.hasOwnProperty("num"))
                object.num = message.num;
            return object;
        };

        /**
         * Converts this C2GW_BuyItem to JSON.
         * @function toJSON
         * @memberof msg.C2GW_BuyItem
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        C2GW_BuyItem.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return C2GW_BuyItem;
    })();

    msg.GW2C_AddPackageItem = (function() {

        /**
         * Properties of a GW2C_AddPackageItem.
         * @memberof msg
         * @interface IGW2C_AddPackageItem
         * @property {number|null} [itemid] GW2C_AddPackageItem itemid
         * @property {number|null} [num] GW2C_AddPackageItem num
         */

        /**
         * Constructs a new GW2C_AddPackageItem.
         * @memberof msg
         * @classdesc Represents a GW2C_AddPackageItem.
         * @implements IGW2C_AddPackageItem
         * @constructor
         * @param {msg.IGW2C_AddPackageItem=} [properties] Properties to set
         */
        function GW2C_AddPackageItem(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GW2C_AddPackageItem itemid.
         * @member {number} itemid
         * @memberof msg.GW2C_AddPackageItem
         * @instance
         */
        GW2C_AddPackageItem.prototype.itemid = 0;

        /**
         * GW2C_AddPackageItem num.
         * @member {number} num
         * @memberof msg.GW2C_AddPackageItem
         * @instance
         */
        GW2C_AddPackageItem.prototype.num = 0;

        /**
         * Creates a new GW2C_AddPackageItem instance using the specified properties.
         * @function create
         * @memberof msg.GW2C_AddPackageItem
         * @static
         * @param {msg.IGW2C_AddPackageItem=} [properties] Properties to set
         * @returns {msg.GW2C_AddPackageItem} GW2C_AddPackageItem instance
         */
        GW2C_AddPackageItem.create = function create(properties) {
            return new GW2C_AddPackageItem(properties);
        };

        /**
         * Encodes the specified GW2C_AddPackageItem message. Does not implicitly {@link msg.GW2C_AddPackageItem.verify|verify} messages.
         * @function encode
         * @memberof msg.GW2C_AddPackageItem
         * @static
         * @param {msg.IGW2C_AddPackageItem} message GW2C_AddPackageItem message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_AddPackageItem.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.itemid != null && message.hasOwnProperty("itemid"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.itemid);
            if (message.num != null && message.hasOwnProperty("num"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.num);
            return writer;
        };

        /**
         * Encodes the specified GW2C_AddPackageItem message, length delimited. Does not implicitly {@link msg.GW2C_AddPackageItem.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.GW2C_AddPackageItem
         * @static
         * @param {msg.IGW2C_AddPackageItem} message GW2C_AddPackageItem message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_AddPackageItem.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GW2C_AddPackageItem message from the specified reader or buffer.
         * @function decode
         * @memberof msg.GW2C_AddPackageItem
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.GW2C_AddPackageItem} GW2C_AddPackageItem
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_AddPackageItem.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.GW2C_AddPackageItem();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.itemid = reader.uint32();
                    break;
                case 2:
                    message.num = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GW2C_AddPackageItem message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.GW2C_AddPackageItem
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.GW2C_AddPackageItem} GW2C_AddPackageItem
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_AddPackageItem.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GW2C_AddPackageItem message.
         * @function verify
         * @memberof msg.GW2C_AddPackageItem
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GW2C_AddPackageItem.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.itemid != null && message.hasOwnProperty("itemid"))
                if (!$util.isInteger(message.itemid))
                    return "itemid: integer expected";
            if (message.num != null && message.hasOwnProperty("num"))
                if (!$util.isInteger(message.num))
                    return "num: integer expected";
            return null;
        };

        /**
         * Creates a GW2C_AddPackageItem message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.GW2C_AddPackageItem
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.GW2C_AddPackageItem} GW2C_AddPackageItem
         */
        GW2C_AddPackageItem.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.GW2C_AddPackageItem)
                return object;
            var message = new $root.msg.GW2C_AddPackageItem();
            if (object.itemid != null)
                message.itemid = object.itemid >>> 0;
            if (object.num != null)
                message.num = object.num >>> 0;
            return message;
        };

        /**
         * Creates a plain object from a GW2C_AddPackageItem message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.GW2C_AddPackageItem
         * @static
         * @param {msg.GW2C_AddPackageItem} message GW2C_AddPackageItem
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GW2C_AddPackageItem.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.itemid = 0;
                object.num = 0;
            }
            if (message.itemid != null && message.hasOwnProperty("itemid"))
                object.itemid = message.itemid;
            if (message.num != null && message.hasOwnProperty("num"))
                object.num = message.num;
            return object;
        };

        /**
         * Converts this GW2C_AddPackageItem to JSON.
         * @function toJSON
         * @memberof msg.GW2C_AddPackageItem
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GW2C_AddPackageItem.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GW2C_AddPackageItem;
    })();

    msg.GW2C_RemovePackageItem = (function() {

        /**
         * Properties of a GW2C_RemovePackageItem.
         * @memberof msg
         * @interface IGW2C_RemovePackageItem
         * @property {number|null} [itemid] GW2C_RemovePackageItem itemid
         * @property {number|null} [num] GW2C_RemovePackageItem num
         */

        /**
         * Constructs a new GW2C_RemovePackageItem.
         * @memberof msg
         * @classdesc Represents a GW2C_RemovePackageItem.
         * @implements IGW2C_RemovePackageItem
         * @constructor
         * @param {msg.IGW2C_RemovePackageItem=} [properties] Properties to set
         */
        function GW2C_RemovePackageItem(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GW2C_RemovePackageItem itemid.
         * @member {number} itemid
         * @memberof msg.GW2C_RemovePackageItem
         * @instance
         */
        GW2C_RemovePackageItem.prototype.itemid = 0;

        /**
         * GW2C_RemovePackageItem num.
         * @member {number} num
         * @memberof msg.GW2C_RemovePackageItem
         * @instance
         */
        GW2C_RemovePackageItem.prototype.num = 0;

        /**
         * Creates a new GW2C_RemovePackageItem instance using the specified properties.
         * @function create
         * @memberof msg.GW2C_RemovePackageItem
         * @static
         * @param {msg.IGW2C_RemovePackageItem=} [properties] Properties to set
         * @returns {msg.GW2C_RemovePackageItem} GW2C_RemovePackageItem instance
         */
        GW2C_RemovePackageItem.create = function create(properties) {
            return new GW2C_RemovePackageItem(properties);
        };

        /**
         * Encodes the specified GW2C_RemovePackageItem message. Does not implicitly {@link msg.GW2C_RemovePackageItem.verify|verify} messages.
         * @function encode
         * @memberof msg.GW2C_RemovePackageItem
         * @static
         * @param {msg.IGW2C_RemovePackageItem} message GW2C_RemovePackageItem message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_RemovePackageItem.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.itemid != null && message.hasOwnProperty("itemid"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.itemid);
            if (message.num != null && message.hasOwnProperty("num"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.num);
            return writer;
        };

        /**
         * Encodes the specified GW2C_RemovePackageItem message, length delimited. Does not implicitly {@link msg.GW2C_RemovePackageItem.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.GW2C_RemovePackageItem
         * @static
         * @param {msg.IGW2C_RemovePackageItem} message GW2C_RemovePackageItem message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_RemovePackageItem.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GW2C_RemovePackageItem message from the specified reader or buffer.
         * @function decode
         * @memberof msg.GW2C_RemovePackageItem
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.GW2C_RemovePackageItem} GW2C_RemovePackageItem
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_RemovePackageItem.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.GW2C_RemovePackageItem();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.itemid = reader.uint32();
                    break;
                case 2:
                    message.num = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GW2C_RemovePackageItem message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.GW2C_RemovePackageItem
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.GW2C_RemovePackageItem} GW2C_RemovePackageItem
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_RemovePackageItem.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GW2C_RemovePackageItem message.
         * @function verify
         * @memberof msg.GW2C_RemovePackageItem
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GW2C_RemovePackageItem.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.itemid != null && message.hasOwnProperty("itemid"))
                if (!$util.isInteger(message.itemid))
                    return "itemid: integer expected";
            if (message.num != null && message.hasOwnProperty("num"))
                if (!$util.isInteger(message.num))
                    return "num: integer expected";
            return null;
        };

        /**
         * Creates a GW2C_RemovePackageItem message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.GW2C_RemovePackageItem
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.GW2C_RemovePackageItem} GW2C_RemovePackageItem
         */
        GW2C_RemovePackageItem.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.GW2C_RemovePackageItem)
                return object;
            var message = new $root.msg.GW2C_RemovePackageItem();
            if (object.itemid != null)
                message.itemid = object.itemid >>> 0;
            if (object.num != null)
                message.num = object.num >>> 0;
            return message;
        };

        /**
         * Creates a plain object from a GW2C_RemovePackageItem message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.GW2C_RemovePackageItem
         * @static
         * @param {msg.GW2C_RemovePackageItem} message GW2C_RemovePackageItem
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GW2C_RemovePackageItem.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.itemid = 0;
                object.num = 0;
            }
            if (message.itemid != null && message.hasOwnProperty("itemid"))
                object.itemid = message.itemid;
            if (message.num != null && message.hasOwnProperty("num"))
                object.num = message.num;
            return object;
        };

        /**
         * Converts this GW2C_RemovePackageItem to JSON.
         * @function toJSON
         * @memberof msg.GW2C_RemovePackageItem
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GW2C_RemovePackageItem.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GW2C_RemovePackageItem;
    })();

    msg.GW2C_UpdateGold = (function() {

        /**
         * Properties of a GW2C_UpdateGold.
         * @memberof msg
         * @interface IGW2C_UpdateGold
         * @property {number|null} [num] GW2C_UpdateGold num
         */

        /**
         * Constructs a new GW2C_UpdateGold.
         * @memberof msg
         * @classdesc Represents a GW2C_UpdateGold.
         * @implements IGW2C_UpdateGold
         * @constructor
         * @param {msg.IGW2C_UpdateGold=} [properties] Properties to set
         */
        function GW2C_UpdateGold(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GW2C_UpdateGold num.
         * @member {number} num
         * @memberof msg.GW2C_UpdateGold
         * @instance
         */
        GW2C_UpdateGold.prototype.num = 0;

        /**
         * Creates a new GW2C_UpdateGold instance using the specified properties.
         * @function create
         * @memberof msg.GW2C_UpdateGold
         * @static
         * @param {msg.IGW2C_UpdateGold=} [properties] Properties to set
         * @returns {msg.GW2C_UpdateGold} GW2C_UpdateGold instance
         */
        GW2C_UpdateGold.create = function create(properties) {
            return new GW2C_UpdateGold(properties);
        };

        /**
         * Encodes the specified GW2C_UpdateGold message. Does not implicitly {@link msg.GW2C_UpdateGold.verify|verify} messages.
         * @function encode
         * @memberof msg.GW2C_UpdateGold
         * @static
         * @param {msg.IGW2C_UpdateGold} message GW2C_UpdateGold message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_UpdateGold.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.num != null && message.hasOwnProperty("num"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.num);
            return writer;
        };

        /**
         * Encodes the specified GW2C_UpdateGold message, length delimited. Does not implicitly {@link msg.GW2C_UpdateGold.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.GW2C_UpdateGold
         * @static
         * @param {msg.IGW2C_UpdateGold} message GW2C_UpdateGold message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_UpdateGold.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GW2C_UpdateGold message from the specified reader or buffer.
         * @function decode
         * @memberof msg.GW2C_UpdateGold
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.GW2C_UpdateGold} GW2C_UpdateGold
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_UpdateGold.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.GW2C_UpdateGold();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.num = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GW2C_UpdateGold message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.GW2C_UpdateGold
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.GW2C_UpdateGold} GW2C_UpdateGold
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_UpdateGold.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GW2C_UpdateGold message.
         * @function verify
         * @memberof msg.GW2C_UpdateGold
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GW2C_UpdateGold.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.num != null && message.hasOwnProperty("num"))
                if (!$util.isInteger(message.num))
                    return "num: integer expected";
            return null;
        };

        /**
         * Creates a GW2C_UpdateGold message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.GW2C_UpdateGold
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.GW2C_UpdateGold} GW2C_UpdateGold
         */
        GW2C_UpdateGold.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.GW2C_UpdateGold)
                return object;
            var message = new $root.msg.GW2C_UpdateGold();
            if (object.num != null)
                message.num = object.num >>> 0;
            return message;
        };

        /**
         * Creates a plain object from a GW2C_UpdateGold message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.GW2C_UpdateGold
         * @static
         * @param {msg.GW2C_UpdateGold} message GW2C_UpdateGold
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GW2C_UpdateGold.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.num = 0;
            if (message.num != null && message.hasOwnProperty("num"))
                object.num = message.num;
            return object;
        };

        /**
         * Converts this GW2C_UpdateGold to JSON.
         * @function toJSON
         * @memberof msg.GW2C_UpdateGold
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GW2C_UpdateGold.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GW2C_UpdateGold;
    })();

    msg.GW2C_UpdateYuanbao = (function() {

        /**
         * Properties of a GW2C_UpdateYuanbao.
         * @memberof msg
         * @interface IGW2C_UpdateYuanbao
         * @property {number|null} [num] GW2C_UpdateYuanbao num
         */

        /**
         * Constructs a new GW2C_UpdateYuanbao.
         * @memberof msg
         * @classdesc Represents a GW2C_UpdateYuanbao.
         * @implements IGW2C_UpdateYuanbao
         * @constructor
         * @param {msg.IGW2C_UpdateYuanbao=} [properties] Properties to set
         */
        function GW2C_UpdateYuanbao(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GW2C_UpdateYuanbao num.
         * @member {number} num
         * @memberof msg.GW2C_UpdateYuanbao
         * @instance
         */
        GW2C_UpdateYuanbao.prototype.num = 0;

        /**
         * Creates a new GW2C_UpdateYuanbao instance using the specified properties.
         * @function create
         * @memberof msg.GW2C_UpdateYuanbao
         * @static
         * @param {msg.IGW2C_UpdateYuanbao=} [properties] Properties to set
         * @returns {msg.GW2C_UpdateYuanbao} GW2C_UpdateYuanbao instance
         */
        GW2C_UpdateYuanbao.create = function create(properties) {
            return new GW2C_UpdateYuanbao(properties);
        };

        /**
         * Encodes the specified GW2C_UpdateYuanbao message. Does not implicitly {@link msg.GW2C_UpdateYuanbao.verify|verify} messages.
         * @function encode
         * @memberof msg.GW2C_UpdateYuanbao
         * @static
         * @param {msg.IGW2C_UpdateYuanbao} message GW2C_UpdateYuanbao message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_UpdateYuanbao.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.num != null && message.hasOwnProperty("num"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.num);
            return writer;
        };

        /**
         * Encodes the specified GW2C_UpdateYuanbao message, length delimited. Does not implicitly {@link msg.GW2C_UpdateYuanbao.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.GW2C_UpdateYuanbao
         * @static
         * @param {msg.IGW2C_UpdateYuanbao} message GW2C_UpdateYuanbao message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_UpdateYuanbao.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GW2C_UpdateYuanbao message from the specified reader or buffer.
         * @function decode
         * @memberof msg.GW2C_UpdateYuanbao
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.GW2C_UpdateYuanbao} GW2C_UpdateYuanbao
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_UpdateYuanbao.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.GW2C_UpdateYuanbao();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.num = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GW2C_UpdateYuanbao message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.GW2C_UpdateYuanbao
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.GW2C_UpdateYuanbao} GW2C_UpdateYuanbao
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_UpdateYuanbao.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GW2C_UpdateYuanbao message.
         * @function verify
         * @memberof msg.GW2C_UpdateYuanbao
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GW2C_UpdateYuanbao.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.num != null && message.hasOwnProperty("num"))
                if (!$util.isInteger(message.num))
                    return "num: integer expected";
            return null;
        };

        /**
         * Creates a GW2C_UpdateYuanbao message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.GW2C_UpdateYuanbao
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.GW2C_UpdateYuanbao} GW2C_UpdateYuanbao
         */
        GW2C_UpdateYuanbao.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.GW2C_UpdateYuanbao)
                return object;
            var message = new $root.msg.GW2C_UpdateYuanbao();
            if (object.num != null)
                message.num = object.num >>> 0;
            return message;
        };

        /**
         * Creates a plain object from a GW2C_UpdateYuanbao message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.GW2C_UpdateYuanbao
         * @static
         * @param {msg.GW2C_UpdateYuanbao} message GW2C_UpdateYuanbao
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GW2C_UpdateYuanbao.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.num = 0;
            if (message.num != null && message.hasOwnProperty("num"))
                object.num = message.num;
            return object;
        };

        /**
         * Converts this GW2C_UpdateYuanbao to JSON.
         * @function toJSON
         * @memberof msg.GW2C_UpdateYuanbao
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GW2C_UpdateYuanbao.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GW2C_UpdateYuanbao;
    })();

    msg.GW2C_UpdateCoupon = (function() {

        /**
         * Properties of a GW2C_UpdateCoupon.
         * @memberof msg
         * @interface IGW2C_UpdateCoupon
         * @property {number|null} [num] GW2C_UpdateCoupon num
         */

        /**
         * Constructs a new GW2C_UpdateCoupon.
         * @memberof msg
         * @classdesc Represents a GW2C_UpdateCoupon.
         * @implements IGW2C_UpdateCoupon
         * @constructor
         * @param {msg.IGW2C_UpdateCoupon=} [properties] Properties to set
         */
        function GW2C_UpdateCoupon(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GW2C_UpdateCoupon num.
         * @member {number} num
         * @memberof msg.GW2C_UpdateCoupon
         * @instance
         */
        GW2C_UpdateCoupon.prototype.num = 0;

        /**
         * Creates a new GW2C_UpdateCoupon instance using the specified properties.
         * @function create
         * @memberof msg.GW2C_UpdateCoupon
         * @static
         * @param {msg.IGW2C_UpdateCoupon=} [properties] Properties to set
         * @returns {msg.GW2C_UpdateCoupon} GW2C_UpdateCoupon instance
         */
        GW2C_UpdateCoupon.create = function create(properties) {
            return new GW2C_UpdateCoupon(properties);
        };

        /**
         * Encodes the specified GW2C_UpdateCoupon message. Does not implicitly {@link msg.GW2C_UpdateCoupon.verify|verify} messages.
         * @function encode
         * @memberof msg.GW2C_UpdateCoupon
         * @static
         * @param {msg.IGW2C_UpdateCoupon} message GW2C_UpdateCoupon message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_UpdateCoupon.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.num != null && message.hasOwnProperty("num"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.num);
            return writer;
        };

        /**
         * Encodes the specified GW2C_UpdateCoupon message, length delimited. Does not implicitly {@link msg.GW2C_UpdateCoupon.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.GW2C_UpdateCoupon
         * @static
         * @param {msg.IGW2C_UpdateCoupon} message GW2C_UpdateCoupon message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_UpdateCoupon.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GW2C_UpdateCoupon message from the specified reader or buffer.
         * @function decode
         * @memberof msg.GW2C_UpdateCoupon
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.GW2C_UpdateCoupon} GW2C_UpdateCoupon
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_UpdateCoupon.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.GW2C_UpdateCoupon();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.num = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GW2C_UpdateCoupon message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.GW2C_UpdateCoupon
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.GW2C_UpdateCoupon} GW2C_UpdateCoupon
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_UpdateCoupon.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GW2C_UpdateCoupon message.
         * @function verify
         * @memberof msg.GW2C_UpdateCoupon
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GW2C_UpdateCoupon.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.num != null && message.hasOwnProperty("num"))
                if (!$util.isInteger(message.num))
                    return "num: integer expected";
            return null;
        };

        /**
         * Creates a GW2C_UpdateCoupon message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.GW2C_UpdateCoupon
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.GW2C_UpdateCoupon} GW2C_UpdateCoupon
         */
        GW2C_UpdateCoupon.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.GW2C_UpdateCoupon)
                return object;
            var message = new $root.msg.GW2C_UpdateCoupon();
            if (object.num != null)
                message.num = object.num >>> 0;
            return message;
        };

        /**
         * Creates a plain object from a GW2C_UpdateCoupon message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.GW2C_UpdateCoupon
         * @static
         * @param {msg.GW2C_UpdateCoupon} message GW2C_UpdateCoupon
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GW2C_UpdateCoupon.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.num = 0;
            if (message.num != null && message.hasOwnProperty("num"))
                object.num = message.num;
            return object;
        };

        /**
         * Converts this GW2C_UpdateCoupon to JSON.
         * @function toJSON
         * @memberof msg.GW2C_UpdateCoupon
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GW2C_UpdateCoupon.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GW2C_UpdateCoupon;
    })();

    msg.GW2C_UpdateFreeStep = (function() {

        /**
         * Properties of a GW2C_UpdateFreeStep.
         * @memberof msg
         * @interface IGW2C_UpdateFreeStep
         * @property {number|null} [num] GW2C_UpdateFreeStep num
         */

        /**
         * Constructs a new GW2C_UpdateFreeStep.
         * @memberof msg
         * @classdesc Represents a GW2C_UpdateFreeStep.
         * @implements IGW2C_UpdateFreeStep
         * @constructor
         * @param {msg.IGW2C_UpdateFreeStep=} [properties] Properties to set
         */
        function GW2C_UpdateFreeStep(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GW2C_UpdateFreeStep num.
         * @member {number} num
         * @memberof msg.GW2C_UpdateFreeStep
         * @instance
         */
        GW2C_UpdateFreeStep.prototype.num = 0;

        /**
         * Creates a new GW2C_UpdateFreeStep instance using the specified properties.
         * @function create
         * @memberof msg.GW2C_UpdateFreeStep
         * @static
         * @param {msg.IGW2C_UpdateFreeStep=} [properties] Properties to set
         * @returns {msg.GW2C_UpdateFreeStep} GW2C_UpdateFreeStep instance
         */
        GW2C_UpdateFreeStep.create = function create(properties) {
            return new GW2C_UpdateFreeStep(properties);
        };

        /**
         * Encodes the specified GW2C_UpdateFreeStep message. Does not implicitly {@link msg.GW2C_UpdateFreeStep.verify|verify} messages.
         * @function encode
         * @memberof msg.GW2C_UpdateFreeStep
         * @static
         * @param {msg.IGW2C_UpdateFreeStep} message GW2C_UpdateFreeStep message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_UpdateFreeStep.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.num != null && message.hasOwnProperty("num"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.num);
            return writer;
        };

        /**
         * Encodes the specified GW2C_UpdateFreeStep message, length delimited. Does not implicitly {@link msg.GW2C_UpdateFreeStep.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.GW2C_UpdateFreeStep
         * @static
         * @param {msg.IGW2C_UpdateFreeStep} message GW2C_UpdateFreeStep message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_UpdateFreeStep.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GW2C_UpdateFreeStep message from the specified reader or buffer.
         * @function decode
         * @memberof msg.GW2C_UpdateFreeStep
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.GW2C_UpdateFreeStep} GW2C_UpdateFreeStep
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_UpdateFreeStep.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.GW2C_UpdateFreeStep();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.num = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GW2C_UpdateFreeStep message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.GW2C_UpdateFreeStep
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.GW2C_UpdateFreeStep} GW2C_UpdateFreeStep
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_UpdateFreeStep.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GW2C_UpdateFreeStep message.
         * @function verify
         * @memberof msg.GW2C_UpdateFreeStep
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GW2C_UpdateFreeStep.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.num != null && message.hasOwnProperty("num"))
                if (!$util.isInteger(message.num))
                    return "num: integer expected";
            return null;
        };

        /**
         * Creates a GW2C_UpdateFreeStep message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.GW2C_UpdateFreeStep
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.GW2C_UpdateFreeStep} GW2C_UpdateFreeStep
         */
        GW2C_UpdateFreeStep.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.GW2C_UpdateFreeStep)
                return object;
            var message = new $root.msg.GW2C_UpdateFreeStep();
            if (object.num != null)
                message.num = object.num | 0;
            return message;
        };

        /**
         * Creates a plain object from a GW2C_UpdateFreeStep message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.GW2C_UpdateFreeStep
         * @static
         * @param {msg.GW2C_UpdateFreeStep} message GW2C_UpdateFreeStep
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GW2C_UpdateFreeStep.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.num = 0;
            if (message.num != null && message.hasOwnProperty("num"))
                object.num = message.num;
            return object;
        };

        /**
         * Converts this GW2C_UpdateFreeStep to JSON.
         * @function toJSON
         * @memberof msg.GW2C_UpdateFreeStep
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GW2C_UpdateFreeStep.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GW2C_UpdateFreeStep;
    })();

    msg.DeliveryGoods = (function() {

        /**
         * Properties of a DeliveryGoods.
         * @memberof msg
         * @interface IDeliveryGoods
         * @property {number|null} [itemid] DeliveryGoods itemid
         * @property {number|null} [num] DeliveryGoods num
         */

        /**
         * Constructs a new DeliveryGoods.
         * @memberof msg
         * @classdesc Represents a DeliveryGoods.
         * @implements IDeliveryGoods
         * @constructor
         * @param {msg.IDeliveryGoods=} [properties] Properties to set
         */
        function DeliveryGoods(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * DeliveryGoods itemid.
         * @member {number} itemid
         * @memberof msg.DeliveryGoods
         * @instance
         */
        DeliveryGoods.prototype.itemid = 0;

        /**
         * DeliveryGoods num.
         * @member {number} num
         * @memberof msg.DeliveryGoods
         * @instance
         */
        DeliveryGoods.prototype.num = 0;

        /**
         * Creates a new DeliveryGoods instance using the specified properties.
         * @function create
         * @memberof msg.DeliveryGoods
         * @static
         * @param {msg.IDeliveryGoods=} [properties] Properties to set
         * @returns {msg.DeliveryGoods} DeliveryGoods instance
         */
        DeliveryGoods.create = function create(properties) {
            return new DeliveryGoods(properties);
        };

        /**
         * Encodes the specified DeliveryGoods message. Does not implicitly {@link msg.DeliveryGoods.verify|verify} messages.
         * @function encode
         * @memberof msg.DeliveryGoods
         * @static
         * @param {msg.IDeliveryGoods} message DeliveryGoods message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        DeliveryGoods.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.itemid != null && message.hasOwnProperty("itemid"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.itemid);
            if (message.num != null && message.hasOwnProperty("num"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.num);
            return writer;
        };

        /**
         * Encodes the specified DeliveryGoods message, length delimited. Does not implicitly {@link msg.DeliveryGoods.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.DeliveryGoods
         * @static
         * @param {msg.IDeliveryGoods} message DeliveryGoods message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        DeliveryGoods.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a DeliveryGoods message from the specified reader or buffer.
         * @function decode
         * @memberof msg.DeliveryGoods
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.DeliveryGoods} DeliveryGoods
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        DeliveryGoods.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.DeliveryGoods();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.itemid = reader.uint32();
                    break;
                case 2:
                    message.num = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a DeliveryGoods message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.DeliveryGoods
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.DeliveryGoods} DeliveryGoods
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        DeliveryGoods.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a DeliveryGoods message.
         * @function verify
         * @memberof msg.DeliveryGoods
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        DeliveryGoods.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.itemid != null && message.hasOwnProperty("itemid"))
                if (!$util.isInteger(message.itemid))
                    return "itemid: integer expected";
            if (message.num != null && message.hasOwnProperty("num"))
                if (!$util.isInteger(message.num))
                    return "num: integer expected";
            return null;
        };

        /**
         * Creates a DeliveryGoods message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.DeliveryGoods
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.DeliveryGoods} DeliveryGoods
         */
        DeliveryGoods.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.DeliveryGoods)
                return object;
            var message = new $root.msg.DeliveryGoods();
            if (object.itemid != null)
                message.itemid = object.itemid >>> 0;
            if (object.num != null)
                message.num = object.num >>> 0;
            return message;
        };

        /**
         * Creates a plain object from a DeliveryGoods message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.DeliveryGoods
         * @static
         * @param {msg.DeliveryGoods} message DeliveryGoods
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        DeliveryGoods.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.itemid = 0;
                object.num = 0;
            }
            if (message.itemid != null && message.hasOwnProperty("itemid"))
                object.itemid = message.itemid;
            if (message.num != null && message.hasOwnProperty("num"))
                object.num = message.num;
            return object;
        };

        /**
         * Converts this DeliveryGoods to JSON.
         * @function toJSON
         * @memberof msg.DeliveryGoods
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        DeliveryGoods.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return DeliveryGoods;
    })();

    msg.C2GW_ReqDeliveryGoods = (function() {

        /**
         * Properties of a C2GW_ReqDeliveryGoods.
         * @memberof msg
         * @interface IC2GW_ReqDeliveryGoods
         * @property {Array.<msg.IDeliveryGoods>|null} [list] C2GW_ReqDeliveryGoods list
         * @property {string|null} [token] C2GW_ReqDeliveryGoods token
         */

        /**
         * Constructs a new C2GW_ReqDeliveryGoods.
         * @memberof msg
         * @classdesc Represents a C2GW_ReqDeliveryGoods.
         * @implements IC2GW_ReqDeliveryGoods
         * @constructor
         * @param {msg.IC2GW_ReqDeliveryGoods=} [properties] Properties to set
         */
        function C2GW_ReqDeliveryGoods(properties) {
            this.list = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * C2GW_ReqDeliveryGoods list.
         * @member {Array.<msg.IDeliveryGoods>} list
         * @memberof msg.C2GW_ReqDeliveryGoods
         * @instance
         */
        C2GW_ReqDeliveryGoods.prototype.list = $util.emptyArray;

        /**
         * C2GW_ReqDeliveryGoods token.
         * @member {string} token
         * @memberof msg.C2GW_ReqDeliveryGoods
         * @instance
         */
        C2GW_ReqDeliveryGoods.prototype.token = "";

        /**
         * Creates a new C2GW_ReqDeliveryGoods instance using the specified properties.
         * @function create
         * @memberof msg.C2GW_ReqDeliveryGoods
         * @static
         * @param {msg.IC2GW_ReqDeliveryGoods=} [properties] Properties to set
         * @returns {msg.C2GW_ReqDeliveryGoods} C2GW_ReqDeliveryGoods instance
         */
        C2GW_ReqDeliveryGoods.create = function create(properties) {
            return new C2GW_ReqDeliveryGoods(properties);
        };

        /**
         * Encodes the specified C2GW_ReqDeliveryGoods message. Does not implicitly {@link msg.C2GW_ReqDeliveryGoods.verify|verify} messages.
         * @function encode
         * @memberof msg.C2GW_ReqDeliveryGoods
         * @static
         * @param {msg.IC2GW_ReqDeliveryGoods} message C2GW_ReqDeliveryGoods message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_ReqDeliveryGoods.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.list != null && message.list.length)
                for (var i = 0; i < message.list.length; ++i)
                    $root.msg.DeliveryGoods.encode(message.list[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.token != null && message.hasOwnProperty("token"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.token);
            return writer;
        };

        /**
         * Encodes the specified C2GW_ReqDeliveryGoods message, length delimited. Does not implicitly {@link msg.C2GW_ReqDeliveryGoods.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.C2GW_ReqDeliveryGoods
         * @static
         * @param {msg.IC2GW_ReqDeliveryGoods} message C2GW_ReqDeliveryGoods message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_ReqDeliveryGoods.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a C2GW_ReqDeliveryGoods message from the specified reader or buffer.
         * @function decode
         * @memberof msg.C2GW_ReqDeliveryGoods
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.C2GW_ReqDeliveryGoods} C2GW_ReqDeliveryGoods
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_ReqDeliveryGoods.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.C2GW_ReqDeliveryGoods();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.list && message.list.length))
                        message.list = [];
                    message.list.push($root.msg.DeliveryGoods.decode(reader, reader.uint32()));
                    break;
                case 2:
                    message.token = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a C2GW_ReqDeliveryGoods message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.C2GW_ReqDeliveryGoods
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.C2GW_ReqDeliveryGoods} C2GW_ReqDeliveryGoods
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_ReqDeliveryGoods.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a C2GW_ReqDeliveryGoods message.
         * @function verify
         * @memberof msg.C2GW_ReqDeliveryGoods
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        C2GW_ReqDeliveryGoods.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.list != null && message.hasOwnProperty("list")) {
                if (!Array.isArray(message.list))
                    return "list: array expected";
                for (var i = 0; i < message.list.length; ++i) {
                    var error = $root.msg.DeliveryGoods.verify(message.list[i]);
                    if (error)
                        return "list." + error;
                }
            }
            if (message.token != null && message.hasOwnProperty("token"))
                if (!$util.isString(message.token))
                    return "token: string expected";
            return null;
        };

        /**
         * Creates a C2GW_ReqDeliveryGoods message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.C2GW_ReqDeliveryGoods
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.C2GW_ReqDeliveryGoods} C2GW_ReqDeliveryGoods
         */
        C2GW_ReqDeliveryGoods.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.C2GW_ReqDeliveryGoods)
                return object;
            var message = new $root.msg.C2GW_ReqDeliveryGoods();
            if (object.list) {
                if (!Array.isArray(object.list))
                    throw TypeError(".msg.C2GW_ReqDeliveryGoods.list: array expected");
                message.list = [];
                for (var i = 0; i < object.list.length; ++i) {
                    if (typeof object.list[i] !== "object")
                        throw TypeError(".msg.C2GW_ReqDeliveryGoods.list: object expected");
                    message.list[i] = $root.msg.DeliveryGoods.fromObject(object.list[i]);
                }
            }
            if (object.token != null)
                message.token = String(object.token);
            return message;
        };

        /**
         * Creates a plain object from a C2GW_ReqDeliveryGoods message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.C2GW_ReqDeliveryGoods
         * @static
         * @param {msg.C2GW_ReqDeliveryGoods} message C2GW_ReqDeliveryGoods
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        C2GW_ReqDeliveryGoods.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.list = [];
            if (options.defaults)
                object.token = "";
            if (message.list && message.list.length) {
                object.list = [];
                for (var j = 0; j < message.list.length; ++j)
                    object.list[j] = $root.msg.DeliveryGoods.toObject(message.list[j], options);
            }
            if (message.token != null && message.hasOwnProperty("token"))
                object.token = message.token;
            return object;
        };

        /**
         * Converts this C2GW_ReqDeliveryGoods to JSON.
         * @function toJSON
         * @memberof msg.C2GW_ReqDeliveryGoods
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        C2GW_ReqDeliveryGoods.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return C2GW_ReqDeliveryGoods;
    })();

    msg.C2GW_ReqDeliveryDiamond = (function() {

        /**
         * Properties of a C2GW_ReqDeliveryDiamond.
         * @memberof msg
         * @interface IC2GW_ReqDeliveryDiamond
         * @property {Array.<msg.IDeliveryGoods>|null} [list] C2GW_ReqDeliveryDiamond list
         * @property {string|null} [token] C2GW_ReqDeliveryDiamond token
         */

        /**
         * Constructs a new C2GW_ReqDeliveryDiamond.
         * @memberof msg
         * @classdesc Represents a C2GW_ReqDeliveryDiamond.
         * @implements IC2GW_ReqDeliveryDiamond
         * @constructor
         * @param {msg.IC2GW_ReqDeliveryDiamond=} [properties] Properties to set
         */
        function C2GW_ReqDeliveryDiamond(properties) {
            this.list = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * C2GW_ReqDeliveryDiamond list.
         * @member {Array.<msg.IDeliveryGoods>} list
         * @memberof msg.C2GW_ReqDeliveryDiamond
         * @instance
         */
        C2GW_ReqDeliveryDiamond.prototype.list = $util.emptyArray;

        /**
         * C2GW_ReqDeliveryDiamond token.
         * @member {string} token
         * @memberof msg.C2GW_ReqDeliveryDiamond
         * @instance
         */
        C2GW_ReqDeliveryDiamond.prototype.token = "";

        /**
         * Creates a new C2GW_ReqDeliveryDiamond instance using the specified properties.
         * @function create
         * @memberof msg.C2GW_ReqDeliveryDiamond
         * @static
         * @param {msg.IC2GW_ReqDeliveryDiamond=} [properties] Properties to set
         * @returns {msg.C2GW_ReqDeliveryDiamond} C2GW_ReqDeliveryDiamond instance
         */
        C2GW_ReqDeliveryDiamond.create = function create(properties) {
            return new C2GW_ReqDeliveryDiamond(properties);
        };

        /**
         * Encodes the specified C2GW_ReqDeliveryDiamond message. Does not implicitly {@link msg.C2GW_ReqDeliveryDiamond.verify|verify} messages.
         * @function encode
         * @memberof msg.C2GW_ReqDeliveryDiamond
         * @static
         * @param {msg.IC2GW_ReqDeliveryDiamond} message C2GW_ReqDeliveryDiamond message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_ReqDeliveryDiamond.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.list != null && message.list.length)
                for (var i = 0; i < message.list.length; ++i)
                    $root.msg.DeliveryGoods.encode(message.list[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.token != null && message.hasOwnProperty("token"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.token);
            return writer;
        };

        /**
         * Encodes the specified C2GW_ReqDeliveryDiamond message, length delimited. Does not implicitly {@link msg.C2GW_ReqDeliveryDiamond.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.C2GW_ReqDeliveryDiamond
         * @static
         * @param {msg.IC2GW_ReqDeliveryDiamond} message C2GW_ReqDeliveryDiamond message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_ReqDeliveryDiamond.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a C2GW_ReqDeliveryDiamond message from the specified reader or buffer.
         * @function decode
         * @memberof msg.C2GW_ReqDeliveryDiamond
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.C2GW_ReqDeliveryDiamond} C2GW_ReqDeliveryDiamond
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_ReqDeliveryDiamond.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.C2GW_ReqDeliveryDiamond();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.list && message.list.length))
                        message.list = [];
                    message.list.push($root.msg.DeliveryGoods.decode(reader, reader.uint32()));
                    break;
                case 2:
                    message.token = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a C2GW_ReqDeliveryDiamond message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.C2GW_ReqDeliveryDiamond
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.C2GW_ReqDeliveryDiamond} C2GW_ReqDeliveryDiamond
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_ReqDeliveryDiamond.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a C2GW_ReqDeliveryDiamond message.
         * @function verify
         * @memberof msg.C2GW_ReqDeliveryDiamond
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        C2GW_ReqDeliveryDiamond.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.list != null && message.hasOwnProperty("list")) {
                if (!Array.isArray(message.list))
                    return "list: array expected";
                for (var i = 0; i < message.list.length; ++i) {
                    var error = $root.msg.DeliveryGoods.verify(message.list[i]);
                    if (error)
                        return "list." + error;
                }
            }
            if (message.token != null && message.hasOwnProperty("token"))
                if (!$util.isString(message.token))
                    return "token: string expected";
            return null;
        };

        /**
         * Creates a C2GW_ReqDeliveryDiamond message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.C2GW_ReqDeliveryDiamond
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.C2GW_ReqDeliveryDiamond} C2GW_ReqDeliveryDiamond
         */
        C2GW_ReqDeliveryDiamond.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.C2GW_ReqDeliveryDiamond)
                return object;
            var message = new $root.msg.C2GW_ReqDeliveryDiamond();
            if (object.list) {
                if (!Array.isArray(object.list))
                    throw TypeError(".msg.C2GW_ReqDeliveryDiamond.list: array expected");
                message.list = [];
                for (var i = 0; i < object.list.length; ++i) {
                    if (typeof object.list[i] !== "object")
                        throw TypeError(".msg.C2GW_ReqDeliveryDiamond.list: object expected");
                    message.list[i] = $root.msg.DeliveryGoods.fromObject(object.list[i]);
                }
            }
            if (object.token != null)
                message.token = String(object.token);
            return message;
        };

        /**
         * Creates a plain object from a C2GW_ReqDeliveryDiamond message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.C2GW_ReqDeliveryDiamond
         * @static
         * @param {msg.C2GW_ReqDeliveryDiamond} message C2GW_ReqDeliveryDiamond
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        C2GW_ReqDeliveryDiamond.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.list = [];
            if (options.defaults)
                object.token = "";
            if (message.list && message.list.length) {
                object.list = [];
                for (var j = 0; j < message.list.length; ++j)
                    object.list[j] = $root.msg.DeliveryGoods.toObject(message.list[j], options);
            }
            if (message.token != null && message.hasOwnProperty("token"))
                object.token = message.token;
            return object;
        };

        /**
         * Converts this C2GW_ReqDeliveryDiamond to JSON.
         * @function toJSON
         * @memberof msg.C2GW_ReqDeliveryDiamond
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        C2GW_ReqDeliveryDiamond.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return C2GW_ReqDeliveryDiamond;
    })();

    msg.GW2C_RetDeliveryDiamond = (function() {

        /**
         * Properties of a GW2C_RetDeliveryDiamond.
         * @memberof msg
         * @interface IGW2C_RetDeliveryDiamond
         * @property {number|null} [diamond] GW2C_RetDeliveryDiamond diamond
         * @property {number|null} [diamondparts] GW2C_RetDeliveryDiamond diamondparts
         * @property {number|null} [total] GW2C_RetDeliveryDiamond total
         */

        /**
         * Constructs a new GW2C_RetDeliveryDiamond.
         * @memberof msg
         * @classdesc Represents a GW2C_RetDeliveryDiamond.
         * @implements IGW2C_RetDeliveryDiamond
         * @constructor
         * @param {msg.IGW2C_RetDeliveryDiamond=} [properties] Properties to set
         */
        function GW2C_RetDeliveryDiamond(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GW2C_RetDeliveryDiamond diamond.
         * @member {number} diamond
         * @memberof msg.GW2C_RetDeliveryDiamond
         * @instance
         */
        GW2C_RetDeliveryDiamond.prototype.diamond = 0;

        /**
         * GW2C_RetDeliveryDiamond diamondparts.
         * @member {number} diamondparts
         * @memberof msg.GW2C_RetDeliveryDiamond
         * @instance
         */
        GW2C_RetDeliveryDiamond.prototype.diamondparts = 0;

        /**
         * GW2C_RetDeliveryDiamond total.
         * @member {number} total
         * @memberof msg.GW2C_RetDeliveryDiamond
         * @instance
         */
        GW2C_RetDeliveryDiamond.prototype.total = 0;

        /**
         * Creates a new GW2C_RetDeliveryDiamond instance using the specified properties.
         * @function create
         * @memberof msg.GW2C_RetDeliveryDiamond
         * @static
         * @param {msg.IGW2C_RetDeliveryDiamond=} [properties] Properties to set
         * @returns {msg.GW2C_RetDeliveryDiamond} GW2C_RetDeliveryDiamond instance
         */
        GW2C_RetDeliveryDiamond.create = function create(properties) {
            return new GW2C_RetDeliveryDiamond(properties);
        };

        /**
         * Encodes the specified GW2C_RetDeliveryDiamond message. Does not implicitly {@link msg.GW2C_RetDeliveryDiamond.verify|verify} messages.
         * @function encode
         * @memberof msg.GW2C_RetDeliveryDiamond
         * @static
         * @param {msg.IGW2C_RetDeliveryDiamond} message GW2C_RetDeliveryDiamond message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_RetDeliveryDiamond.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.diamond != null && message.hasOwnProperty("diamond"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.diamond);
            if (message.diamondparts != null && message.hasOwnProperty("diamondparts"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.diamondparts);
            if (message.total != null && message.hasOwnProperty("total"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.total);
            return writer;
        };

        /**
         * Encodes the specified GW2C_RetDeliveryDiamond message, length delimited. Does not implicitly {@link msg.GW2C_RetDeliveryDiamond.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.GW2C_RetDeliveryDiamond
         * @static
         * @param {msg.IGW2C_RetDeliveryDiamond} message GW2C_RetDeliveryDiamond message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_RetDeliveryDiamond.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GW2C_RetDeliveryDiamond message from the specified reader or buffer.
         * @function decode
         * @memberof msg.GW2C_RetDeliveryDiamond
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.GW2C_RetDeliveryDiamond} GW2C_RetDeliveryDiamond
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_RetDeliveryDiamond.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.GW2C_RetDeliveryDiamond();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.diamond = reader.int32();
                    break;
                case 2:
                    message.diamondparts = reader.int32();
                    break;
                case 3:
                    message.total = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GW2C_RetDeliveryDiamond message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.GW2C_RetDeliveryDiamond
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.GW2C_RetDeliveryDiamond} GW2C_RetDeliveryDiamond
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_RetDeliveryDiamond.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GW2C_RetDeliveryDiamond message.
         * @function verify
         * @memberof msg.GW2C_RetDeliveryDiamond
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GW2C_RetDeliveryDiamond.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.diamond != null && message.hasOwnProperty("diamond"))
                if (!$util.isInteger(message.diamond))
                    return "diamond: integer expected";
            if (message.diamondparts != null && message.hasOwnProperty("diamondparts"))
                if (!$util.isInteger(message.diamondparts))
                    return "diamondparts: integer expected";
            if (message.total != null && message.hasOwnProperty("total"))
                if (!$util.isInteger(message.total))
                    return "total: integer expected";
            return null;
        };

        /**
         * Creates a GW2C_RetDeliveryDiamond message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.GW2C_RetDeliveryDiamond
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.GW2C_RetDeliveryDiamond} GW2C_RetDeliveryDiamond
         */
        GW2C_RetDeliveryDiamond.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.GW2C_RetDeliveryDiamond)
                return object;
            var message = new $root.msg.GW2C_RetDeliveryDiamond();
            if (object.diamond != null)
                message.diamond = object.diamond | 0;
            if (object.diamondparts != null)
                message.diamondparts = object.diamondparts | 0;
            if (object.total != null)
                message.total = object.total | 0;
            return message;
        };

        /**
         * Creates a plain object from a GW2C_RetDeliveryDiamond message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.GW2C_RetDeliveryDiamond
         * @static
         * @param {msg.GW2C_RetDeliveryDiamond} message GW2C_RetDeliveryDiamond
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GW2C_RetDeliveryDiamond.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.diamond = 0;
                object.diamondparts = 0;
                object.total = 0;
            }
            if (message.diamond != null && message.hasOwnProperty("diamond"))
                object.diamond = message.diamond;
            if (message.diamondparts != null && message.hasOwnProperty("diamondparts"))
                object.diamondparts = message.diamondparts;
            if (message.total != null && message.hasOwnProperty("total"))
                object.total = message.total;
            return object;
        };

        /**
         * Converts this GW2C_RetDeliveryDiamond to JSON.
         * @function toJSON
         * @memberof msg.GW2C_RetDeliveryDiamond
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GW2C_RetDeliveryDiamond.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GW2C_RetDeliveryDiamond;
    })();

    msg.BigRewardItem = (function() {

        /**
         * Properties of a BigRewardItem.
         * @memberof msg
         * @interface IBigRewardItem
         * @property {number|null} [id] BigRewardItem id
         * @property {number|null} [num] BigRewardItem num
         */

        /**
         * Constructs a new BigRewardItem.
         * @memberof msg
         * @classdesc Represents a BigRewardItem.
         * @implements IBigRewardItem
         * @constructor
         * @param {msg.IBigRewardItem=} [properties] Properties to set
         */
        function BigRewardItem(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * BigRewardItem id.
         * @member {number} id
         * @memberof msg.BigRewardItem
         * @instance
         */
        BigRewardItem.prototype.id = 0;

        /**
         * BigRewardItem num.
         * @member {number} num
         * @memberof msg.BigRewardItem
         * @instance
         */
        BigRewardItem.prototype.num = 0;

        /**
         * Creates a new BigRewardItem instance using the specified properties.
         * @function create
         * @memberof msg.BigRewardItem
         * @static
         * @param {msg.IBigRewardItem=} [properties] Properties to set
         * @returns {msg.BigRewardItem} BigRewardItem instance
         */
        BigRewardItem.create = function create(properties) {
            return new BigRewardItem(properties);
        };

        /**
         * Encodes the specified BigRewardItem message. Does not implicitly {@link msg.BigRewardItem.verify|verify} messages.
         * @function encode
         * @memberof msg.BigRewardItem
         * @static
         * @param {msg.IBigRewardItem} message BigRewardItem message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        BigRewardItem.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.id != null && message.hasOwnProperty("id"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.id);
            if (message.num != null && message.hasOwnProperty("num"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.num);
            return writer;
        };

        /**
         * Encodes the specified BigRewardItem message, length delimited. Does not implicitly {@link msg.BigRewardItem.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.BigRewardItem
         * @static
         * @param {msg.IBigRewardItem} message BigRewardItem message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        BigRewardItem.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a BigRewardItem message from the specified reader or buffer.
         * @function decode
         * @memberof msg.BigRewardItem
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.BigRewardItem} BigRewardItem
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        BigRewardItem.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.BigRewardItem();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.id = reader.uint32();
                    break;
                case 2:
                    message.num = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a BigRewardItem message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.BigRewardItem
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.BigRewardItem} BigRewardItem
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        BigRewardItem.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a BigRewardItem message.
         * @function verify
         * @memberof msg.BigRewardItem
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        BigRewardItem.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.id != null && message.hasOwnProperty("id"))
                if (!$util.isInteger(message.id))
                    return "id: integer expected";
            if (message.num != null && message.hasOwnProperty("num"))
                if (!$util.isInteger(message.num))
                    return "num: integer expected";
            return null;
        };

        /**
         * Creates a BigRewardItem message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.BigRewardItem
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.BigRewardItem} BigRewardItem
         */
        BigRewardItem.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.BigRewardItem)
                return object;
            var message = new $root.msg.BigRewardItem();
            if (object.id != null)
                message.id = object.id >>> 0;
            if (object.num != null)
                message.num = object.num >>> 0;
            return message;
        };

        /**
         * Creates a plain object from a BigRewardItem message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.BigRewardItem
         * @static
         * @param {msg.BigRewardItem} message BigRewardItem
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        BigRewardItem.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.id = 0;
                object.num = 0;
            }
            if (message.id != null && message.hasOwnProperty("id"))
                object.id = message.id;
            if (message.num != null && message.hasOwnProperty("num"))
                object.num = message.num;
            return object;
        };

        /**
         * Converts this BigRewardItem to JSON.
         * @function toJSON
         * @memberof msg.BigRewardItem
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        BigRewardItem.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return BigRewardItem;
    })();

    msg.Sync_BigRewardPickNum = (function() {

        /**
         * Properties of a Sync_BigRewardPickNum.
         * @memberof msg
         * @interface ISync_BigRewardPickNum
         * @property {Array.<msg.IBigRewardItem>|null} [list] Sync_BigRewardPickNum list
         */

        /**
         * Constructs a new Sync_BigRewardPickNum.
         * @memberof msg
         * @classdesc Represents a Sync_BigRewardPickNum.
         * @implements ISync_BigRewardPickNum
         * @constructor
         * @param {msg.ISync_BigRewardPickNum=} [properties] Properties to set
         */
        function Sync_BigRewardPickNum(properties) {
            this.list = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Sync_BigRewardPickNum list.
         * @member {Array.<msg.IBigRewardItem>} list
         * @memberof msg.Sync_BigRewardPickNum
         * @instance
         */
        Sync_BigRewardPickNum.prototype.list = $util.emptyArray;

        /**
         * Creates a new Sync_BigRewardPickNum instance using the specified properties.
         * @function create
         * @memberof msg.Sync_BigRewardPickNum
         * @static
         * @param {msg.ISync_BigRewardPickNum=} [properties] Properties to set
         * @returns {msg.Sync_BigRewardPickNum} Sync_BigRewardPickNum instance
         */
        Sync_BigRewardPickNum.create = function create(properties) {
            return new Sync_BigRewardPickNum(properties);
        };

        /**
         * Encodes the specified Sync_BigRewardPickNum message. Does not implicitly {@link msg.Sync_BigRewardPickNum.verify|verify} messages.
         * @function encode
         * @memberof msg.Sync_BigRewardPickNum
         * @static
         * @param {msg.ISync_BigRewardPickNum} message Sync_BigRewardPickNum message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Sync_BigRewardPickNum.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.list != null && message.list.length)
                for (var i = 0; i < message.list.length; ++i)
                    $root.msg.BigRewardItem.encode(message.list[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified Sync_BigRewardPickNum message, length delimited. Does not implicitly {@link msg.Sync_BigRewardPickNum.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.Sync_BigRewardPickNum
         * @static
         * @param {msg.ISync_BigRewardPickNum} message Sync_BigRewardPickNum message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Sync_BigRewardPickNum.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a Sync_BigRewardPickNum message from the specified reader or buffer.
         * @function decode
         * @memberof msg.Sync_BigRewardPickNum
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.Sync_BigRewardPickNum} Sync_BigRewardPickNum
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Sync_BigRewardPickNum.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.Sync_BigRewardPickNum();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.list && message.list.length))
                        message.list = [];
                    message.list.push($root.msg.BigRewardItem.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a Sync_BigRewardPickNum message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.Sync_BigRewardPickNum
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.Sync_BigRewardPickNum} Sync_BigRewardPickNum
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Sync_BigRewardPickNum.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a Sync_BigRewardPickNum message.
         * @function verify
         * @memberof msg.Sync_BigRewardPickNum
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Sync_BigRewardPickNum.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.list != null && message.hasOwnProperty("list")) {
                if (!Array.isArray(message.list))
                    return "list: array expected";
                for (var i = 0; i < message.list.length; ++i) {
                    var error = $root.msg.BigRewardItem.verify(message.list[i]);
                    if (error)
                        return "list." + error;
                }
            }
            return null;
        };

        /**
         * Creates a Sync_BigRewardPickNum message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.Sync_BigRewardPickNum
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.Sync_BigRewardPickNum} Sync_BigRewardPickNum
         */
        Sync_BigRewardPickNum.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.Sync_BigRewardPickNum)
                return object;
            var message = new $root.msg.Sync_BigRewardPickNum();
            if (object.list) {
                if (!Array.isArray(object.list))
                    throw TypeError(".msg.Sync_BigRewardPickNum.list: array expected");
                message.list = [];
                for (var i = 0; i < object.list.length; ++i) {
                    if (typeof object.list[i] !== "object")
                        throw TypeError(".msg.Sync_BigRewardPickNum.list: object expected");
                    message.list[i] = $root.msg.BigRewardItem.fromObject(object.list[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a Sync_BigRewardPickNum message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.Sync_BigRewardPickNum
         * @static
         * @param {msg.Sync_BigRewardPickNum} message Sync_BigRewardPickNum
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        Sync_BigRewardPickNum.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.list = [];
            if (message.list && message.list.length) {
                object.list = [];
                for (var j = 0; j < message.list.length; ++j)
                    object.list[j] = $root.msg.BigRewardItem.toObject(message.list[j], options);
            }
            return object;
        };

        /**
         * Converts this Sync_BigRewardPickNum to JSON.
         * @function toJSON
         * @memberof msg.Sync_BigRewardPickNum
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        Sync_BigRewardPickNum.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return Sync_BigRewardPickNum;
    })();

    msg.C2GW_UseBagItem = (function() {

        /**
         * Properties of a C2GW_UseBagItem.
         * @memberof msg
         * @interface IC2GW_UseBagItem
         * @property {number|null} [itemid] C2GW_UseBagItem itemid
         * @property {number|null} [num] C2GW_UseBagItem num
         */

        /**
         * Constructs a new C2GW_UseBagItem.
         * @memberof msg
         * @classdesc Represents a C2GW_UseBagItem.
         * @implements IC2GW_UseBagItem
         * @constructor
         * @param {msg.IC2GW_UseBagItem=} [properties] Properties to set
         */
        function C2GW_UseBagItem(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * C2GW_UseBagItem itemid.
         * @member {number} itemid
         * @memberof msg.C2GW_UseBagItem
         * @instance
         */
        C2GW_UseBagItem.prototype.itemid = 0;

        /**
         * C2GW_UseBagItem num.
         * @member {number} num
         * @memberof msg.C2GW_UseBagItem
         * @instance
         */
        C2GW_UseBagItem.prototype.num = 0;

        /**
         * Creates a new C2GW_UseBagItem instance using the specified properties.
         * @function create
         * @memberof msg.C2GW_UseBagItem
         * @static
         * @param {msg.IC2GW_UseBagItem=} [properties] Properties to set
         * @returns {msg.C2GW_UseBagItem} C2GW_UseBagItem instance
         */
        C2GW_UseBagItem.create = function create(properties) {
            return new C2GW_UseBagItem(properties);
        };

        /**
         * Encodes the specified C2GW_UseBagItem message. Does not implicitly {@link msg.C2GW_UseBagItem.verify|verify} messages.
         * @function encode
         * @memberof msg.C2GW_UseBagItem
         * @static
         * @param {msg.IC2GW_UseBagItem} message C2GW_UseBagItem message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_UseBagItem.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.itemid != null && message.hasOwnProperty("itemid"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.itemid);
            if (message.num != null && message.hasOwnProperty("num"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.num);
            return writer;
        };

        /**
         * Encodes the specified C2GW_UseBagItem message, length delimited. Does not implicitly {@link msg.C2GW_UseBagItem.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.C2GW_UseBagItem
         * @static
         * @param {msg.IC2GW_UseBagItem} message C2GW_UseBagItem message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_UseBagItem.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a C2GW_UseBagItem message from the specified reader or buffer.
         * @function decode
         * @memberof msg.C2GW_UseBagItem
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.C2GW_UseBagItem} C2GW_UseBagItem
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_UseBagItem.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.C2GW_UseBagItem();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.itemid = reader.uint32();
                    break;
                case 2:
                    message.num = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a C2GW_UseBagItem message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.C2GW_UseBagItem
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.C2GW_UseBagItem} C2GW_UseBagItem
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_UseBagItem.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a C2GW_UseBagItem message.
         * @function verify
         * @memberof msg.C2GW_UseBagItem
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        C2GW_UseBagItem.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.itemid != null && message.hasOwnProperty("itemid"))
                if (!$util.isInteger(message.itemid))
                    return "itemid: integer expected";
            if (message.num != null && message.hasOwnProperty("num"))
                if (!$util.isInteger(message.num))
                    return "num: integer expected";
            return null;
        };

        /**
         * Creates a C2GW_UseBagItem message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.C2GW_UseBagItem
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.C2GW_UseBagItem} C2GW_UseBagItem
         */
        C2GW_UseBagItem.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.C2GW_UseBagItem)
                return object;
            var message = new $root.msg.C2GW_UseBagItem();
            if (object.itemid != null)
                message.itemid = object.itemid >>> 0;
            if (object.num != null)
                message.num = object.num >>> 0;
            return message;
        };

        /**
         * Creates a plain object from a C2GW_UseBagItem message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.C2GW_UseBagItem
         * @static
         * @param {msg.C2GW_UseBagItem} message C2GW_UseBagItem
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        C2GW_UseBagItem.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.itemid = 0;
                object.num = 0;
            }
            if (message.itemid != null && message.hasOwnProperty("itemid"))
                object.itemid = message.itemid;
            if (message.num != null && message.hasOwnProperty("num"))
                object.num = message.num;
            return object;
        };

        /**
         * Converts this C2GW_UseBagItem to JSON.
         * @function toJSON
         * @memberof msg.C2GW_UseBagItem
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        C2GW_UseBagItem.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return C2GW_UseBagItem;
    })();

    msg.C2GW_SellBagItem = (function() {

        /**
         * Properties of a C2GW_SellBagItem.
         * @memberof msg
         * @interface IC2GW_SellBagItem
         * @property {Array.<msg.IPairNumItem>|null} [list] C2GW_SellBagItem list
         */

        /**
         * Constructs a new C2GW_SellBagItem.
         * @memberof msg
         * @classdesc Represents a C2GW_SellBagItem.
         * @implements IC2GW_SellBagItem
         * @constructor
         * @param {msg.IC2GW_SellBagItem=} [properties] Properties to set
         */
        function C2GW_SellBagItem(properties) {
            this.list = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * C2GW_SellBagItem list.
         * @member {Array.<msg.IPairNumItem>} list
         * @memberof msg.C2GW_SellBagItem
         * @instance
         */
        C2GW_SellBagItem.prototype.list = $util.emptyArray;

        /**
         * Creates a new C2GW_SellBagItem instance using the specified properties.
         * @function create
         * @memberof msg.C2GW_SellBagItem
         * @static
         * @param {msg.IC2GW_SellBagItem=} [properties] Properties to set
         * @returns {msg.C2GW_SellBagItem} C2GW_SellBagItem instance
         */
        C2GW_SellBagItem.create = function create(properties) {
            return new C2GW_SellBagItem(properties);
        };

        /**
         * Encodes the specified C2GW_SellBagItem message. Does not implicitly {@link msg.C2GW_SellBagItem.verify|verify} messages.
         * @function encode
         * @memberof msg.C2GW_SellBagItem
         * @static
         * @param {msg.IC2GW_SellBagItem} message C2GW_SellBagItem message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_SellBagItem.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.list != null && message.list.length)
                for (var i = 0; i < message.list.length; ++i)
                    $root.msg.PairNumItem.encode(message.list[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified C2GW_SellBagItem message, length delimited. Does not implicitly {@link msg.C2GW_SellBagItem.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.C2GW_SellBagItem
         * @static
         * @param {msg.IC2GW_SellBagItem} message C2GW_SellBagItem message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_SellBagItem.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a C2GW_SellBagItem message from the specified reader or buffer.
         * @function decode
         * @memberof msg.C2GW_SellBagItem
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.C2GW_SellBagItem} C2GW_SellBagItem
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_SellBagItem.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.C2GW_SellBagItem();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.list && message.list.length))
                        message.list = [];
                    message.list.push($root.msg.PairNumItem.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a C2GW_SellBagItem message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.C2GW_SellBagItem
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.C2GW_SellBagItem} C2GW_SellBagItem
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_SellBagItem.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a C2GW_SellBagItem message.
         * @function verify
         * @memberof msg.C2GW_SellBagItem
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        C2GW_SellBagItem.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.list != null && message.hasOwnProperty("list")) {
                if (!Array.isArray(message.list))
                    return "list: array expected";
                for (var i = 0; i < message.list.length; ++i) {
                    var error = $root.msg.PairNumItem.verify(message.list[i]);
                    if (error)
                        return "list." + error;
                }
            }
            return null;
        };

        /**
         * Creates a C2GW_SellBagItem message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.C2GW_SellBagItem
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.C2GW_SellBagItem} C2GW_SellBagItem
         */
        C2GW_SellBagItem.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.C2GW_SellBagItem)
                return object;
            var message = new $root.msg.C2GW_SellBagItem();
            if (object.list) {
                if (!Array.isArray(object.list))
                    throw TypeError(".msg.C2GW_SellBagItem.list: array expected");
                message.list = [];
                for (var i = 0; i < object.list.length; ++i) {
                    if (typeof object.list[i] !== "object")
                        throw TypeError(".msg.C2GW_SellBagItem.list: object expected");
                    message.list[i] = $root.msg.PairNumItem.fromObject(object.list[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a C2GW_SellBagItem message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.C2GW_SellBagItem
         * @static
         * @param {msg.C2GW_SellBagItem} message C2GW_SellBagItem
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        C2GW_SellBagItem.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.list = [];
            if (message.list && message.list.length) {
                object.list = [];
                for (var j = 0; j < message.list.length; ++j)
                    object.list[j] = $root.msg.PairNumItem.toObject(message.list[j], options);
            }
            return object;
        };

        /**
         * Converts this C2GW_SellBagItem to JSON.
         * @function toJSON
         * @memberof msg.C2GW_SellBagItem
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        C2GW_SellBagItem.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return C2GW_SellBagItem;
    })();

    msg.RS2MS_ReqRegist = (function() {

        /**
         * Properties of a RS2MS_ReqRegist.
         * @memberof msg
         * @interface IRS2MS_ReqRegist
         * @property {string|null} [account] RS2MS_ReqRegist account
         * @property {string|null} [passwd] RS2MS_ReqRegist passwd
         * @property {string|null} [name] RS2MS_ReqRegist name
         */

        /**
         * Constructs a new RS2MS_ReqRegist.
         * @memberof msg
         * @classdesc Represents a RS2MS_ReqRegist.
         * @implements IRS2MS_ReqRegist
         * @constructor
         * @param {msg.IRS2MS_ReqRegist=} [properties] Properties to set
         */
        function RS2MS_ReqRegist(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * RS2MS_ReqRegist account.
         * @member {string} account
         * @memberof msg.RS2MS_ReqRegist
         * @instance
         */
        RS2MS_ReqRegist.prototype.account = "";

        /**
         * RS2MS_ReqRegist passwd.
         * @member {string} passwd
         * @memberof msg.RS2MS_ReqRegist
         * @instance
         */
        RS2MS_ReqRegist.prototype.passwd = "";

        /**
         * RS2MS_ReqRegist name.
         * @member {string} name
         * @memberof msg.RS2MS_ReqRegist
         * @instance
         */
        RS2MS_ReqRegist.prototype.name = "";

        /**
         * Creates a new RS2MS_ReqRegist instance using the specified properties.
         * @function create
         * @memberof msg.RS2MS_ReqRegist
         * @static
         * @param {msg.IRS2MS_ReqRegist=} [properties] Properties to set
         * @returns {msg.RS2MS_ReqRegist} RS2MS_ReqRegist instance
         */
        RS2MS_ReqRegist.create = function create(properties) {
            return new RS2MS_ReqRegist(properties);
        };

        /**
         * Encodes the specified RS2MS_ReqRegist message. Does not implicitly {@link msg.RS2MS_ReqRegist.verify|verify} messages.
         * @function encode
         * @memberof msg.RS2MS_ReqRegist
         * @static
         * @param {msg.IRS2MS_ReqRegist} message RS2MS_ReqRegist message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RS2MS_ReqRegist.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.account != null && message.hasOwnProperty("account"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.account);
            if (message.passwd != null && message.hasOwnProperty("passwd"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.passwd);
            if (message.name != null && message.hasOwnProperty("name"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.name);
            return writer;
        };

        /**
         * Encodes the specified RS2MS_ReqRegist message, length delimited. Does not implicitly {@link msg.RS2MS_ReqRegist.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.RS2MS_ReqRegist
         * @static
         * @param {msg.IRS2MS_ReqRegist} message RS2MS_ReqRegist message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RS2MS_ReqRegist.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a RS2MS_ReqRegist message from the specified reader or buffer.
         * @function decode
         * @memberof msg.RS2MS_ReqRegist
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.RS2MS_ReqRegist} RS2MS_ReqRegist
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RS2MS_ReqRegist.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.RS2MS_ReqRegist();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.account = reader.string();
                    break;
                case 2:
                    message.passwd = reader.string();
                    break;
                case 3:
                    message.name = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a RS2MS_ReqRegist message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.RS2MS_ReqRegist
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.RS2MS_ReqRegist} RS2MS_ReqRegist
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RS2MS_ReqRegist.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a RS2MS_ReqRegist message.
         * @function verify
         * @memberof msg.RS2MS_ReqRegist
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        RS2MS_ReqRegist.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.account != null && message.hasOwnProperty("account"))
                if (!$util.isString(message.account))
                    return "account: string expected";
            if (message.passwd != null && message.hasOwnProperty("passwd"))
                if (!$util.isString(message.passwd))
                    return "passwd: string expected";
            if (message.name != null && message.hasOwnProperty("name"))
                if (!$util.isString(message.name))
                    return "name: string expected";
            return null;
        };

        /**
         * Creates a RS2MS_ReqRegist message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.RS2MS_ReqRegist
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.RS2MS_ReqRegist} RS2MS_ReqRegist
         */
        RS2MS_ReqRegist.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.RS2MS_ReqRegist)
                return object;
            var message = new $root.msg.RS2MS_ReqRegist();
            if (object.account != null)
                message.account = String(object.account);
            if (object.passwd != null)
                message.passwd = String(object.passwd);
            if (object.name != null)
                message.name = String(object.name);
            return message;
        };

        /**
         * Creates a plain object from a RS2MS_ReqRegist message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.RS2MS_ReqRegist
         * @static
         * @param {msg.RS2MS_ReqRegist} message RS2MS_ReqRegist
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        RS2MS_ReqRegist.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.account = "";
                object.passwd = "";
                object.name = "";
            }
            if (message.account != null && message.hasOwnProperty("account"))
                object.account = message.account;
            if (message.passwd != null && message.hasOwnProperty("passwd"))
                object.passwd = message.passwd;
            if (message.name != null && message.hasOwnProperty("name"))
                object.name = message.name;
            return object;
        };

        /**
         * Converts this RS2MS_ReqRegist to JSON.
         * @function toJSON
         * @memberof msg.RS2MS_ReqRegist
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        RS2MS_ReqRegist.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RS2MS_ReqRegist;
    })();

    msg.MS2RS_RetRegist = (function() {

        /**
         * Properties of a MS2RS_RetRegist.
         * @memberof msg
         * @interface IMS2RS_RetRegist
         * @property {string|null} [errcode] MS2RS_RetRegist errcode
         */

        /**
         * Constructs a new MS2RS_RetRegist.
         * @memberof msg
         * @classdesc Represents a MS2RS_RetRegist.
         * @implements IMS2RS_RetRegist
         * @constructor
         * @param {msg.IMS2RS_RetRegist=} [properties] Properties to set
         */
        function MS2RS_RetRegist(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * MS2RS_RetRegist errcode.
         * @member {string} errcode
         * @memberof msg.MS2RS_RetRegist
         * @instance
         */
        MS2RS_RetRegist.prototype.errcode = "";

        /**
         * Creates a new MS2RS_RetRegist instance using the specified properties.
         * @function create
         * @memberof msg.MS2RS_RetRegist
         * @static
         * @param {msg.IMS2RS_RetRegist=} [properties] Properties to set
         * @returns {msg.MS2RS_RetRegist} MS2RS_RetRegist instance
         */
        MS2RS_RetRegist.create = function create(properties) {
            return new MS2RS_RetRegist(properties);
        };

        /**
         * Encodes the specified MS2RS_RetRegist message. Does not implicitly {@link msg.MS2RS_RetRegist.verify|verify} messages.
         * @function encode
         * @memberof msg.MS2RS_RetRegist
         * @static
         * @param {msg.IMS2RS_RetRegist} message MS2RS_RetRegist message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        MS2RS_RetRegist.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.errcode != null && message.hasOwnProperty("errcode"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.errcode);
            return writer;
        };

        /**
         * Encodes the specified MS2RS_RetRegist message, length delimited. Does not implicitly {@link msg.MS2RS_RetRegist.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.MS2RS_RetRegist
         * @static
         * @param {msg.IMS2RS_RetRegist} message MS2RS_RetRegist message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        MS2RS_RetRegist.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a MS2RS_RetRegist message from the specified reader or buffer.
         * @function decode
         * @memberof msg.MS2RS_RetRegist
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.MS2RS_RetRegist} MS2RS_RetRegist
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        MS2RS_RetRegist.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.MS2RS_RetRegist();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.errcode = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a MS2RS_RetRegist message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.MS2RS_RetRegist
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.MS2RS_RetRegist} MS2RS_RetRegist
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        MS2RS_RetRegist.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a MS2RS_RetRegist message.
         * @function verify
         * @memberof msg.MS2RS_RetRegist
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        MS2RS_RetRegist.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.errcode != null && message.hasOwnProperty("errcode"))
                if (!$util.isString(message.errcode))
                    return "errcode: string expected";
            return null;
        };

        /**
         * Creates a MS2RS_RetRegist message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.MS2RS_RetRegist
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.MS2RS_RetRegist} MS2RS_RetRegist
         */
        MS2RS_RetRegist.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.MS2RS_RetRegist)
                return object;
            var message = new $root.msg.MS2RS_RetRegist();
            if (object.errcode != null)
                message.errcode = String(object.errcode);
            return message;
        };

        /**
         * Creates a plain object from a MS2RS_RetRegist message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.MS2RS_RetRegist
         * @static
         * @param {msg.MS2RS_RetRegist} message MS2RS_RetRegist
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        MS2RS_RetRegist.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.errcode = "";
            if (message.errcode != null && message.hasOwnProperty("errcode"))
                object.errcode = message.errcode;
            return object;
        };

        /**
         * Converts this MS2RS_RetRegist to JSON.
         * @function toJSON
         * @memberof msg.MS2RS_RetRegist
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        MS2RS_RetRegist.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return MS2RS_RetRegist;
    })();

    msg.RS2MS_HeartBeat = (function() {

        /**
         * Properties of a RS2MS_HeartBeat.
         * @memberof msg
         * @interface IRS2MS_HeartBeat
         */

        /**
         * Constructs a new RS2MS_HeartBeat.
         * @memberof msg
         * @classdesc Represents a RS2MS_HeartBeat.
         * @implements IRS2MS_HeartBeat
         * @constructor
         * @param {msg.IRS2MS_HeartBeat=} [properties] Properties to set
         */
        function RS2MS_HeartBeat(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Creates a new RS2MS_HeartBeat instance using the specified properties.
         * @function create
         * @memberof msg.RS2MS_HeartBeat
         * @static
         * @param {msg.IRS2MS_HeartBeat=} [properties] Properties to set
         * @returns {msg.RS2MS_HeartBeat} RS2MS_HeartBeat instance
         */
        RS2MS_HeartBeat.create = function create(properties) {
            return new RS2MS_HeartBeat(properties);
        };

        /**
         * Encodes the specified RS2MS_HeartBeat message. Does not implicitly {@link msg.RS2MS_HeartBeat.verify|verify} messages.
         * @function encode
         * @memberof msg.RS2MS_HeartBeat
         * @static
         * @param {msg.IRS2MS_HeartBeat} message RS2MS_HeartBeat message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RS2MS_HeartBeat.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };

        /**
         * Encodes the specified RS2MS_HeartBeat message, length delimited. Does not implicitly {@link msg.RS2MS_HeartBeat.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.RS2MS_HeartBeat
         * @static
         * @param {msg.IRS2MS_HeartBeat} message RS2MS_HeartBeat message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RS2MS_HeartBeat.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a RS2MS_HeartBeat message from the specified reader or buffer.
         * @function decode
         * @memberof msg.RS2MS_HeartBeat
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.RS2MS_HeartBeat} RS2MS_HeartBeat
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RS2MS_HeartBeat.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.RS2MS_HeartBeat();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a RS2MS_HeartBeat message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.RS2MS_HeartBeat
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.RS2MS_HeartBeat} RS2MS_HeartBeat
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RS2MS_HeartBeat.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a RS2MS_HeartBeat message.
         * @function verify
         * @memberof msg.RS2MS_HeartBeat
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        RS2MS_HeartBeat.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            return null;
        };

        /**
         * Creates a RS2MS_HeartBeat message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.RS2MS_HeartBeat
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.RS2MS_HeartBeat} RS2MS_HeartBeat
         */
        RS2MS_HeartBeat.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.RS2MS_HeartBeat)
                return object;
            return new $root.msg.RS2MS_HeartBeat();
        };

        /**
         * Creates a plain object from a RS2MS_HeartBeat message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.RS2MS_HeartBeat
         * @static
         * @param {msg.RS2MS_HeartBeat} message RS2MS_HeartBeat
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        RS2MS_HeartBeat.toObject = function toObject() {
            return {};
        };

        /**
         * Converts this RS2MS_HeartBeat to JSON.
         * @function toJSON
         * @memberof msg.RS2MS_HeartBeat
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        RS2MS_HeartBeat.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RS2MS_HeartBeat;
    })();

    msg.MS2RS_HeartBeat = (function() {

        /**
         * Properties of a MS2RS_HeartBeat.
         * @memberof msg
         * @interface IMS2RS_HeartBeat
         */

        /**
         * Constructs a new MS2RS_HeartBeat.
         * @memberof msg
         * @classdesc Represents a MS2RS_HeartBeat.
         * @implements IMS2RS_HeartBeat
         * @constructor
         * @param {msg.IMS2RS_HeartBeat=} [properties] Properties to set
         */
        function MS2RS_HeartBeat(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Creates a new MS2RS_HeartBeat instance using the specified properties.
         * @function create
         * @memberof msg.MS2RS_HeartBeat
         * @static
         * @param {msg.IMS2RS_HeartBeat=} [properties] Properties to set
         * @returns {msg.MS2RS_HeartBeat} MS2RS_HeartBeat instance
         */
        MS2RS_HeartBeat.create = function create(properties) {
            return new MS2RS_HeartBeat(properties);
        };

        /**
         * Encodes the specified MS2RS_HeartBeat message. Does not implicitly {@link msg.MS2RS_HeartBeat.verify|verify} messages.
         * @function encode
         * @memberof msg.MS2RS_HeartBeat
         * @static
         * @param {msg.IMS2RS_HeartBeat} message MS2RS_HeartBeat message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        MS2RS_HeartBeat.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };

        /**
         * Encodes the specified MS2RS_HeartBeat message, length delimited. Does not implicitly {@link msg.MS2RS_HeartBeat.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.MS2RS_HeartBeat
         * @static
         * @param {msg.IMS2RS_HeartBeat} message MS2RS_HeartBeat message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        MS2RS_HeartBeat.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a MS2RS_HeartBeat message from the specified reader or buffer.
         * @function decode
         * @memberof msg.MS2RS_HeartBeat
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.MS2RS_HeartBeat} MS2RS_HeartBeat
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        MS2RS_HeartBeat.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.MS2RS_HeartBeat();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a MS2RS_HeartBeat message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.MS2RS_HeartBeat
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.MS2RS_HeartBeat} MS2RS_HeartBeat
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        MS2RS_HeartBeat.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a MS2RS_HeartBeat message.
         * @function verify
         * @memberof msg.MS2RS_HeartBeat
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        MS2RS_HeartBeat.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            return null;
        };

        /**
         * Creates a MS2RS_HeartBeat message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.MS2RS_HeartBeat
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.MS2RS_HeartBeat} MS2RS_HeartBeat
         */
        MS2RS_HeartBeat.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.MS2RS_HeartBeat)
                return object;
            return new $root.msg.MS2RS_HeartBeat();
        };

        /**
         * Creates a plain object from a MS2RS_HeartBeat message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.MS2RS_HeartBeat
         * @static
         * @param {msg.MS2RS_HeartBeat} message MS2RS_HeartBeat
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        MS2RS_HeartBeat.toObject = function toObject() {
            return {};
        };

        /**
         * Converts this MS2RS_HeartBeat to JSON.
         * @function toJSON
         * @memberof msg.MS2RS_HeartBeat
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        MS2RS_HeartBeat.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return MS2RS_HeartBeat;
    })();

    msg.GateSimpleInfo = (function() {

        /**
         * Properties of a GateSimpleInfo.
         * @memberof msg
         * @interface IGateSimpleInfo
         * @property {string|null} [name] GateSimpleInfo name
         * @property {msg.IIpHost|null} [host] GateSimpleInfo host
         */

        /**
         * Constructs a new GateSimpleInfo.
         * @memberof msg
         * @classdesc Represents a GateSimpleInfo.
         * @implements IGateSimpleInfo
         * @constructor
         * @param {msg.IGateSimpleInfo=} [properties] Properties to set
         */
        function GateSimpleInfo(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GateSimpleInfo name.
         * @member {string} name
         * @memberof msg.GateSimpleInfo
         * @instance
         */
        GateSimpleInfo.prototype.name = "";

        /**
         * GateSimpleInfo host.
         * @member {msg.IIpHost|null|undefined} host
         * @memberof msg.GateSimpleInfo
         * @instance
         */
        GateSimpleInfo.prototype.host = null;

        /**
         * Creates a new GateSimpleInfo instance using the specified properties.
         * @function create
         * @memberof msg.GateSimpleInfo
         * @static
         * @param {msg.IGateSimpleInfo=} [properties] Properties to set
         * @returns {msg.GateSimpleInfo} GateSimpleInfo instance
         */
        GateSimpleInfo.create = function create(properties) {
            return new GateSimpleInfo(properties);
        };

        /**
         * Encodes the specified GateSimpleInfo message. Does not implicitly {@link msg.GateSimpleInfo.verify|verify} messages.
         * @function encode
         * @memberof msg.GateSimpleInfo
         * @static
         * @param {msg.IGateSimpleInfo} message GateSimpleInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GateSimpleInfo.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.name != null && message.hasOwnProperty("name"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
            if (message.host != null && message.hasOwnProperty("host"))
                $root.msg.IpHost.encode(message.host, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified GateSimpleInfo message, length delimited. Does not implicitly {@link msg.GateSimpleInfo.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.GateSimpleInfo
         * @static
         * @param {msg.IGateSimpleInfo} message GateSimpleInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GateSimpleInfo.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GateSimpleInfo message from the specified reader or buffer.
         * @function decode
         * @memberof msg.GateSimpleInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.GateSimpleInfo} GateSimpleInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GateSimpleInfo.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.GateSimpleInfo();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.name = reader.string();
                    break;
                case 2:
                    message.host = $root.msg.IpHost.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GateSimpleInfo message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.GateSimpleInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.GateSimpleInfo} GateSimpleInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GateSimpleInfo.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GateSimpleInfo message.
         * @function verify
         * @memberof msg.GateSimpleInfo
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GateSimpleInfo.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.name != null && message.hasOwnProperty("name"))
                if (!$util.isString(message.name))
                    return "name: string expected";
            if (message.host != null && message.hasOwnProperty("host")) {
                var error = $root.msg.IpHost.verify(message.host);
                if (error)
                    return "host." + error;
            }
            return null;
        };

        /**
         * Creates a GateSimpleInfo message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.GateSimpleInfo
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.GateSimpleInfo} GateSimpleInfo
         */
        GateSimpleInfo.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.GateSimpleInfo)
                return object;
            var message = new $root.msg.GateSimpleInfo();
            if (object.name != null)
                message.name = String(object.name);
            if (object.host != null) {
                if (typeof object.host !== "object")
                    throw TypeError(".msg.GateSimpleInfo.host: object expected");
                message.host = $root.msg.IpHost.fromObject(object.host);
            }
            return message;
        };

        /**
         * Creates a plain object from a GateSimpleInfo message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.GateSimpleInfo
         * @static
         * @param {msg.GateSimpleInfo} message GateSimpleInfo
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GateSimpleInfo.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.name = "";
                object.host = null;
            }
            if (message.name != null && message.hasOwnProperty("name"))
                object.name = message.name;
            if (message.host != null && message.hasOwnProperty("host"))
                object.host = $root.msg.IpHost.toObject(message.host, options);
            return object;
        };

        /**
         * Converts this GateSimpleInfo to JSON.
         * @function toJSON
         * @memberof msg.GateSimpleInfo
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GateSimpleInfo.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GateSimpleInfo;
    })();

    msg.MS2RS_GateInfo = (function() {

        /**
         * Properties of a MS2RS_GateInfo.
         * @memberof msg
         * @interface IMS2RS_GateInfo
         * @property {Array.<msg.IGateSimpleInfo>|null} [gates] MS2RS_GateInfo gates
         */

        /**
         * Constructs a new MS2RS_GateInfo.
         * @memberof msg
         * @classdesc Represents a MS2RS_GateInfo.
         * @implements IMS2RS_GateInfo
         * @constructor
         * @param {msg.IMS2RS_GateInfo=} [properties] Properties to set
         */
        function MS2RS_GateInfo(properties) {
            this.gates = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * MS2RS_GateInfo gates.
         * @member {Array.<msg.IGateSimpleInfo>} gates
         * @memberof msg.MS2RS_GateInfo
         * @instance
         */
        MS2RS_GateInfo.prototype.gates = $util.emptyArray;

        /**
         * Creates a new MS2RS_GateInfo instance using the specified properties.
         * @function create
         * @memberof msg.MS2RS_GateInfo
         * @static
         * @param {msg.IMS2RS_GateInfo=} [properties] Properties to set
         * @returns {msg.MS2RS_GateInfo} MS2RS_GateInfo instance
         */
        MS2RS_GateInfo.create = function create(properties) {
            return new MS2RS_GateInfo(properties);
        };

        /**
         * Encodes the specified MS2RS_GateInfo message. Does not implicitly {@link msg.MS2RS_GateInfo.verify|verify} messages.
         * @function encode
         * @memberof msg.MS2RS_GateInfo
         * @static
         * @param {msg.IMS2RS_GateInfo} message MS2RS_GateInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        MS2RS_GateInfo.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.gates != null && message.gates.length)
                for (var i = 0; i < message.gates.length; ++i)
                    $root.msg.GateSimpleInfo.encode(message.gates[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified MS2RS_GateInfo message, length delimited. Does not implicitly {@link msg.MS2RS_GateInfo.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.MS2RS_GateInfo
         * @static
         * @param {msg.IMS2RS_GateInfo} message MS2RS_GateInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        MS2RS_GateInfo.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a MS2RS_GateInfo message from the specified reader or buffer.
         * @function decode
         * @memberof msg.MS2RS_GateInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.MS2RS_GateInfo} MS2RS_GateInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        MS2RS_GateInfo.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.MS2RS_GateInfo();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.gates && message.gates.length))
                        message.gates = [];
                    message.gates.push($root.msg.GateSimpleInfo.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a MS2RS_GateInfo message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.MS2RS_GateInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.MS2RS_GateInfo} MS2RS_GateInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        MS2RS_GateInfo.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a MS2RS_GateInfo message.
         * @function verify
         * @memberof msg.MS2RS_GateInfo
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        MS2RS_GateInfo.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.gates != null && message.hasOwnProperty("gates")) {
                if (!Array.isArray(message.gates))
                    return "gates: array expected";
                for (var i = 0; i < message.gates.length; ++i) {
                    var error = $root.msg.GateSimpleInfo.verify(message.gates[i]);
                    if (error)
                        return "gates." + error;
                }
            }
            return null;
        };

        /**
         * Creates a MS2RS_GateInfo message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.MS2RS_GateInfo
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.MS2RS_GateInfo} MS2RS_GateInfo
         */
        MS2RS_GateInfo.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.MS2RS_GateInfo)
                return object;
            var message = new $root.msg.MS2RS_GateInfo();
            if (object.gates) {
                if (!Array.isArray(object.gates))
                    throw TypeError(".msg.MS2RS_GateInfo.gates: array expected");
                message.gates = [];
                for (var i = 0; i < object.gates.length; ++i) {
                    if (typeof object.gates[i] !== "object")
                        throw TypeError(".msg.MS2RS_GateInfo.gates: object expected");
                    message.gates[i] = $root.msg.GateSimpleInfo.fromObject(object.gates[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a MS2RS_GateInfo message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.MS2RS_GateInfo
         * @static
         * @param {msg.MS2RS_GateInfo} message MS2RS_GateInfo
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        MS2RS_GateInfo.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.gates = [];
            if (message.gates && message.gates.length) {
                object.gates = [];
                for (var j = 0; j < message.gates.length; ++j)
                    object.gates[j] = $root.msg.GateSimpleInfo.toObject(message.gates[j], options);
            }
            return object;
        };

        /**
         * Converts this MS2RS_GateInfo to JSON.
         * @function toJSON
         * @memberof msg.MS2RS_GateInfo
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        MS2RS_GateInfo.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return MS2RS_GateInfo;
    })();

    msg.MS2RS_CreateRoom = (function() {

        /**
         * Properties of a MS2RS_CreateRoom.
         * @memberof msg
         * @interface IMS2RS_CreateRoom
         * @property {number|Long|null} [userid] MS2RS_CreateRoom userid
         * @property {number|Long|null} [roomid] MS2RS_CreateRoom roomid
         * @property {number|null} [gamekind] MS2RS_CreateRoom gamekind
         * @property {number|null} [gridnum] MS2RS_CreateRoom gridnum
         * @property {number|null} [sidgate] MS2RS_CreateRoom sidgate
         * @property {boolean|null} [quotaflag] MS2RS_CreateRoom quotaflag
         */

        /**
         * Constructs a new MS2RS_CreateRoom.
         * @memberof msg
         * @classdesc Represents a MS2RS_CreateRoom.
         * @implements IMS2RS_CreateRoom
         * @constructor
         * @param {msg.IMS2RS_CreateRoom=} [properties] Properties to set
         */
        function MS2RS_CreateRoom(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * MS2RS_CreateRoom userid.
         * @member {number|Long} userid
         * @memberof msg.MS2RS_CreateRoom
         * @instance
         */
        MS2RS_CreateRoom.prototype.userid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * MS2RS_CreateRoom roomid.
         * @member {number|Long} roomid
         * @memberof msg.MS2RS_CreateRoom
         * @instance
         */
        MS2RS_CreateRoom.prototype.roomid = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * MS2RS_CreateRoom gamekind.
         * @member {number} gamekind
         * @memberof msg.MS2RS_CreateRoom
         * @instance
         */
        MS2RS_CreateRoom.prototype.gamekind = 0;

        /**
         * MS2RS_CreateRoom gridnum.
         * @member {number} gridnum
         * @memberof msg.MS2RS_CreateRoom
         * @instance
         */
        MS2RS_CreateRoom.prototype.gridnum = 0;

        /**
         * MS2RS_CreateRoom sidgate.
         * @member {number} sidgate
         * @memberof msg.MS2RS_CreateRoom
         * @instance
         */
        MS2RS_CreateRoom.prototype.sidgate = 0;

        /**
         * MS2RS_CreateRoom quotaflag.
         * @member {boolean} quotaflag
         * @memberof msg.MS2RS_CreateRoom
         * @instance
         */
        MS2RS_CreateRoom.prototype.quotaflag = false;

        /**
         * Creates a new MS2RS_CreateRoom instance using the specified properties.
         * @function create
         * @memberof msg.MS2RS_CreateRoom
         * @static
         * @param {msg.IMS2RS_CreateRoom=} [properties] Properties to set
         * @returns {msg.MS2RS_CreateRoom} MS2RS_CreateRoom instance
         */
        MS2RS_CreateRoom.create = function create(properties) {
            return new MS2RS_CreateRoom(properties);
        };

        /**
         * Encodes the specified MS2RS_CreateRoom message. Does not implicitly {@link msg.MS2RS_CreateRoom.verify|verify} messages.
         * @function encode
         * @memberof msg.MS2RS_CreateRoom
         * @static
         * @param {msg.IMS2RS_CreateRoom} message MS2RS_CreateRoom message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        MS2RS_CreateRoom.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.userid != null && message.hasOwnProperty("userid"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.userid);
            if (message.roomid != null && message.hasOwnProperty("roomid"))
                writer.uint32(/* id 2, wireType 0 =*/16).int64(message.roomid);
            if (message.gamekind != null && message.hasOwnProperty("gamekind"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.gamekind);
            if (message.gridnum != null && message.hasOwnProperty("gridnum"))
                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.gridnum);
            if (message.sidgate != null && message.hasOwnProperty("sidgate"))
                writer.uint32(/* id 5, wireType 0 =*/40).int32(message.sidgate);
            if (message.quotaflag != null && message.hasOwnProperty("quotaflag"))
                writer.uint32(/* id 6, wireType 0 =*/48).bool(message.quotaflag);
            return writer;
        };

        /**
         * Encodes the specified MS2RS_CreateRoom message, length delimited. Does not implicitly {@link msg.MS2RS_CreateRoom.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.MS2RS_CreateRoom
         * @static
         * @param {msg.IMS2RS_CreateRoom} message MS2RS_CreateRoom message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        MS2RS_CreateRoom.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a MS2RS_CreateRoom message from the specified reader or buffer.
         * @function decode
         * @memberof msg.MS2RS_CreateRoom
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.MS2RS_CreateRoom} MS2RS_CreateRoom
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        MS2RS_CreateRoom.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.MS2RS_CreateRoom();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.userid = reader.uint64();
                    break;
                case 2:
                    message.roomid = reader.int64();
                    break;
                case 3:
                    message.gamekind = reader.int32();
                    break;
                case 4:
                    message.gridnum = reader.int32();
                    break;
                case 5:
                    message.sidgate = reader.int32();
                    break;
                case 6:
                    message.quotaflag = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a MS2RS_CreateRoom message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.MS2RS_CreateRoom
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.MS2RS_CreateRoom} MS2RS_CreateRoom
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        MS2RS_CreateRoom.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a MS2RS_CreateRoom message.
         * @function verify
         * @memberof msg.MS2RS_CreateRoom
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        MS2RS_CreateRoom.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.userid != null && message.hasOwnProperty("userid"))
                if (!$util.isInteger(message.userid) && !(message.userid && $util.isInteger(message.userid.low) && $util.isInteger(message.userid.high)))
                    return "userid: integer|Long expected";
            if (message.roomid != null && message.hasOwnProperty("roomid"))
                if (!$util.isInteger(message.roomid) && !(message.roomid && $util.isInteger(message.roomid.low) && $util.isInteger(message.roomid.high)))
                    return "roomid: integer|Long expected";
            if (message.gamekind != null && message.hasOwnProperty("gamekind"))
                if (!$util.isInteger(message.gamekind))
                    return "gamekind: integer expected";
            if (message.gridnum != null && message.hasOwnProperty("gridnum"))
                if (!$util.isInteger(message.gridnum))
                    return "gridnum: integer expected";
            if (message.sidgate != null && message.hasOwnProperty("sidgate"))
                if (!$util.isInteger(message.sidgate))
                    return "sidgate: integer expected";
            if (message.quotaflag != null && message.hasOwnProperty("quotaflag"))
                if (typeof message.quotaflag !== "boolean")
                    return "quotaflag: boolean expected";
            return null;
        };

        /**
         * Creates a MS2RS_CreateRoom message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.MS2RS_CreateRoom
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.MS2RS_CreateRoom} MS2RS_CreateRoom
         */
        MS2RS_CreateRoom.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.MS2RS_CreateRoom)
                return object;
            var message = new $root.msg.MS2RS_CreateRoom();
            if (object.userid != null)
                if ($util.Long)
                    (message.userid = $util.Long.fromValue(object.userid)).unsigned = true;
                else if (typeof object.userid === "string")
                    message.userid = parseInt(object.userid, 10);
                else if (typeof object.userid === "number")
                    message.userid = object.userid;
                else if (typeof object.userid === "object")
                    message.userid = new $util.LongBits(object.userid.low >>> 0, object.userid.high >>> 0).toNumber(true);
            if (object.roomid != null)
                if ($util.Long)
                    (message.roomid = $util.Long.fromValue(object.roomid)).unsigned = false;
                else if (typeof object.roomid === "string")
                    message.roomid = parseInt(object.roomid, 10);
                else if (typeof object.roomid === "number")
                    message.roomid = object.roomid;
                else if (typeof object.roomid === "object")
                    message.roomid = new $util.LongBits(object.roomid.low >>> 0, object.roomid.high >>> 0).toNumber();
            if (object.gamekind != null)
                message.gamekind = object.gamekind | 0;
            if (object.gridnum != null)
                message.gridnum = object.gridnum | 0;
            if (object.sidgate != null)
                message.sidgate = object.sidgate | 0;
            if (object.quotaflag != null)
                message.quotaflag = Boolean(object.quotaflag);
            return message;
        };

        /**
         * Creates a plain object from a MS2RS_CreateRoom message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.MS2RS_CreateRoom
         * @static
         * @param {msg.MS2RS_CreateRoom} message MS2RS_CreateRoom
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        MS2RS_CreateRoom.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.userid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.userid = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.roomid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.roomid = options.longs === String ? "0" : 0;
                object.gamekind = 0;
                object.gridnum = 0;
                object.sidgate = 0;
                object.quotaflag = false;
            }
            if (message.userid != null && message.hasOwnProperty("userid"))
                if (typeof message.userid === "number")
                    object.userid = options.longs === String ? String(message.userid) : message.userid;
                else
                    object.userid = options.longs === String ? $util.Long.prototype.toString.call(message.userid) : options.longs === Number ? new $util.LongBits(message.userid.low >>> 0, message.userid.high >>> 0).toNumber(true) : message.userid;
            if (message.roomid != null && message.hasOwnProperty("roomid"))
                if (typeof message.roomid === "number")
                    object.roomid = options.longs === String ? String(message.roomid) : message.roomid;
                else
                    object.roomid = options.longs === String ? $util.Long.prototype.toString.call(message.roomid) : options.longs === Number ? new $util.LongBits(message.roomid.low >>> 0, message.roomid.high >>> 0).toNumber() : message.roomid;
            if (message.gamekind != null && message.hasOwnProperty("gamekind"))
                object.gamekind = message.gamekind;
            if (message.gridnum != null && message.hasOwnProperty("gridnum"))
                object.gridnum = message.gridnum;
            if (message.sidgate != null && message.hasOwnProperty("sidgate"))
                object.sidgate = message.sidgate;
            if (message.quotaflag != null && message.hasOwnProperty("quotaflag"))
                object.quotaflag = message.quotaflag;
            return object;
        };

        /**
         * Converts this MS2RS_CreateRoom to JSON.
         * @function toJSON
         * @memberof msg.MS2RS_CreateRoom
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        MS2RS_CreateRoom.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return MS2RS_CreateRoom;
    })();

    msg.RS2MS_RetCreateRoom = (function() {

        /**
         * Properties of a RS2MS_RetCreateRoom.
         * @memberof msg
         * @interface IRS2MS_RetCreateRoom
         * @property {number|Long|null} [roomid] RS2MS_RetCreateRoom roomid
         * @property {number|Long|null} [userid] RS2MS_RetCreateRoom userid
         * @property {number|null} [sidgate] RS2MS_RetCreateRoom sidgate
         * @property {string|null} [errcode] RS2MS_RetCreateRoom errcode
         */

        /**
         * Constructs a new RS2MS_RetCreateRoom.
         * @memberof msg
         * @classdesc Represents a RS2MS_RetCreateRoom.
         * @implements IRS2MS_RetCreateRoom
         * @constructor
         * @param {msg.IRS2MS_RetCreateRoom=} [properties] Properties to set
         */
        function RS2MS_RetCreateRoom(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * RS2MS_RetCreateRoom roomid.
         * @member {number|Long} roomid
         * @memberof msg.RS2MS_RetCreateRoom
         * @instance
         */
        RS2MS_RetCreateRoom.prototype.roomid = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * RS2MS_RetCreateRoom userid.
         * @member {number|Long} userid
         * @memberof msg.RS2MS_RetCreateRoom
         * @instance
         */
        RS2MS_RetCreateRoom.prototype.userid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * RS2MS_RetCreateRoom sidgate.
         * @member {number} sidgate
         * @memberof msg.RS2MS_RetCreateRoom
         * @instance
         */
        RS2MS_RetCreateRoom.prototype.sidgate = 0;

        /**
         * RS2MS_RetCreateRoom errcode.
         * @member {string} errcode
         * @memberof msg.RS2MS_RetCreateRoom
         * @instance
         */
        RS2MS_RetCreateRoom.prototype.errcode = "";

        /**
         * Creates a new RS2MS_RetCreateRoom instance using the specified properties.
         * @function create
         * @memberof msg.RS2MS_RetCreateRoom
         * @static
         * @param {msg.IRS2MS_RetCreateRoom=} [properties] Properties to set
         * @returns {msg.RS2MS_RetCreateRoom} RS2MS_RetCreateRoom instance
         */
        RS2MS_RetCreateRoom.create = function create(properties) {
            return new RS2MS_RetCreateRoom(properties);
        };

        /**
         * Encodes the specified RS2MS_RetCreateRoom message. Does not implicitly {@link msg.RS2MS_RetCreateRoom.verify|verify} messages.
         * @function encode
         * @memberof msg.RS2MS_RetCreateRoom
         * @static
         * @param {msg.IRS2MS_RetCreateRoom} message RS2MS_RetCreateRoom message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RS2MS_RetCreateRoom.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.roomid != null && message.hasOwnProperty("roomid"))
                writer.uint32(/* id 1, wireType 0 =*/8).int64(message.roomid);
            if (message.userid != null && message.hasOwnProperty("userid"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.userid);
            if (message.sidgate != null && message.hasOwnProperty("sidgate"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.sidgate);
            if (message.errcode != null && message.hasOwnProperty("errcode"))
                writer.uint32(/* id 4, wireType 2 =*/34).string(message.errcode);
            return writer;
        };

        /**
         * Encodes the specified RS2MS_RetCreateRoom message, length delimited. Does not implicitly {@link msg.RS2MS_RetCreateRoom.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.RS2MS_RetCreateRoom
         * @static
         * @param {msg.IRS2MS_RetCreateRoom} message RS2MS_RetCreateRoom message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RS2MS_RetCreateRoom.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a RS2MS_RetCreateRoom message from the specified reader or buffer.
         * @function decode
         * @memberof msg.RS2MS_RetCreateRoom
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.RS2MS_RetCreateRoom} RS2MS_RetCreateRoom
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RS2MS_RetCreateRoom.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.RS2MS_RetCreateRoom();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.roomid = reader.int64();
                    break;
                case 2:
                    message.userid = reader.uint64();
                    break;
                case 3:
                    message.sidgate = reader.int32();
                    break;
                case 4:
                    message.errcode = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a RS2MS_RetCreateRoom message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.RS2MS_RetCreateRoom
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.RS2MS_RetCreateRoom} RS2MS_RetCreateRoom
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RS2MS_RetCreateRoom.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a RS2MS_RetCreateRoom message.
         * @function verify
         * @memberof msg.RS2MS_RetCreateRoom
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        RS2MS_RetCreateRoom.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.roomid != null && message.hasOwnProperty("roomid"))
                if (!$util.isInteger(message.roomid) && !(message.roomid && $util.isInteger(message.roomid.low) && $util.isInteger(message.roomid.high)))
                    return "roomid: integer|Long expected";
            if (message.userid != null && message.hasOwnProperty("userid"))
                if (!$util.isInteger(message.userid) && !(message.userid && $util.isInteger(message.userid.low) && $util.isInteger(message.userid.high)))
                    return "userid: integer|Long expected";
            if (message.sidgate != null && message.hasOwnProperty("sidgate"))
                if (!$util.isInteger(message.sidgate))
                    return "sidgate: integer expected";
            if (message.errcode != null && message.hasOwnProperty("errcode"))
                if (!$util.isString(message.errcode))
                    return "errcode: string expected";
            return null;
        };

        /**
         * Creates a RS2MS_RetCreateRoom message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.RS2MS_RetCreateRoom
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.RS2MS_RetCreateRoom} RS2MS_RetCreateRoom
         */
        RS2MS_RetCreateRoom.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.RS2MS_RetCreateRoom)
                return object;
            var message = new $root.msg.RS2MS_RetCreateRoom();
            if (object.roomid != null)
                if ($util.Long)
                    (message.roomid = $util.Long.fromValue(object.roomid)).unsigned = false;
                else if (typeof object.roomid === "string")
                    message.roomid = parseInt(object.roomid, 10);
                else if (typeof object.roomid === "number")
                    message.roomid = object.roomid;
                else if (typeof object.roomid === "object")
                    message.roomid = new $util.LongBits(object.roomid.low >>> 0, object.roomid.high >>> 0).toNumber();
            if (object.userid != null)
                if ($util.Long)
                    (message.userid = $util.Long.fromValue(object.userid)).unsigned = true;
                else if (typeof object.userid === "string")
                    message.userid = parseInt(object.userid, 10);
                else if (typeof object.userid === "number")
                    message.userid = object.userid;
                else if (typeof object.userid === "object")
                    message.userid = new $util.LongBits(object.userid.low >>> 0, object.userid.high >>> 0).toNumber(true);
            if (object.sidgate != null)
                message.sidgate = object.sidgate | 0;
            if (object.errcode != null)
                message.errcode = String(object.errcode);
            return message;
        };

        /**
         * Creates a plain object from a RS2MS_RetCreateRoom message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.RS2MS_RetCreateRoom
         * @static
         * @param {msg.RS2MS_RetCreateRoom} message RS2MS_RetCreateRoom
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        RS2MS_RetCreateRoom.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.roomid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.roomid = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.userid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.userid = options.longs === String ? "0" : 0;
                object.sidgate = 0;
                object.errcode = "";
            }
            if (message.roomid != null && message.hasOwnProperty("roomid"))
                if (typeof message.roomid === "number")
                    object.roomid = options.longs === String ? String(message.roomid) : message.roomid;
                else
                    object.roomid = options.longs === String ? $util.Long.prototype.toString.call(message.roomid) : options.longs === Number ? new $util.LongBits(message.roomid.low >>> 0, message.roomid.high >>> 0).toNumber() : message.roomid;
            if (message.userid != null && message.hasOwnProperty("userid"))
                if (typeof message.userid === "number")
                    object.userid = options.longs === String ? String(message.userid) : message.userid;
                else
                    object.userid = options.longs === String ? $util.Long.prototype.toString.call(message.userid) : options.longs === Number ? new $util.LongBits(message.userid.low >>> 0, message.userid.high >>> 0).toNumber(true) : message.userid;
            if (message.sidgate != null && message.hasOwnProperty("sidgate"))
                object.sidgate = message.sidgate;
            if (message.errcode != null && message.hasOwnProperty("errcode"))
                object.errcode = message.errcode;
            return object;
        };

        /**
         * Converts this RS2MS_RetCreateRoom to JSON.
         * @function toJSON
         * @memberof msg.RS2MS_RetCreateRoom
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        RS2MS_RetCreateRoom.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RS2MS_RetCreateRoom;
    })();

    msg.RS2MS_DeleteRoom = (function() {

        /**
         * Properties of a RS2MS_DeleteRoom.
         * @memberof msg
         * @interface IRS2MS_DeleteRoom
         * @property {number|Long|null} [roomid] RS2MS_DeleteRoom roomid
         */

        /**
         * Constructs a new RS2MS_DeleteRoom.
         * @memberof msg
         * @classdesc Represents a RS2MS_DeleteRoom.
         * @implements IRS2MS_DeleteRoom
         * @constructor
         * @param {msg.IRS2MS_DeleteRoom=} [properties] Properties to set
         */
        function RS2MS_DeleteRoom(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * RS2MS_DeleteRoom roomid.
         * @member {number|Long} roomid
         * @memberof msg.RS2MS_DeleteRoom
         * @instance
         */
        RS2MS_DeleteRoom.prototype.roomid = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * Creates a new RS2MS_DeleteRoom instance using the specified properties.
         * @function create
         * @memberof msg.RS2MS_DeleteRoom
         * @static
         * @param {msg.IRS2MS_DeleteRoom=} [properties] Properties to set
         * @returns {msg.RS2MS_DeleteRoom} RS2MS_DeleteRoom instance
         */
        RS2MS_DeleteRoom.create = function create(properties) {
            return new RS2MS_DeleteRoom(properties);
        };

        /**
         * Encodes the specified RS2MS_DeleteRoom message. Does not implicitly {@link msg.RS2MS_DeleteRoom.verify|verify} messages.
         * @function encode
         * @memberof msg.RS2MS_DeleteRoom
         * @static
         * @param {msg.IRS2MS_DeleteRoom} message RS2MS_DeleteRoom message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RS2MS_DeleteRoom.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.roomid != null && message.hasOwnProperty("roomid"))
                writer.uint32(/* id 1, wireType 0 =*/8).int64(message.roomid);
            return writer;
        };

        /**
         * Encodes the specified RS2MS_DeleteRoom message, length delimited. Does not implicitly {@link msg.RS2MS_DeleteRoom.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.RS2MS_DeleteRoom
         * @static
         * @param {msg.IRS2MS_DeleteRoom} message RS2MS_DeleteRoom message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RS2MS_DeleteRoom.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a RS2MS_DeleteRoom message from the specified reader or buffer.
         * @function decode
         * @memberof msg.RS2MS_DeleteRoom
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.RS2MS_DeleteRoom} RS2MS_DeleteRoom
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RS2MS_DeleteRoom.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.RS2MS_DeleteRoom();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.roomid = reader.int64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a RS2MS_DeleteRoom message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.RS2MS_DeleteRoom
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.RS2MS_DeleteRoom} RS2MS_DeleteRoom
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RS2MS_DeleteRoom.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a RS2MS_DeleteRoom message.
         * @function verify
         * @memberof msg.RS2MS_DeleteRoom
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        RS2MS_DeleteRoom.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.roomid != null && message.hasOwnProperty("roomid"))
                if (!$util.isInteger(message.roomid) && !(message.roomid && $util.isInteger(message.roomid.low) && $util.isInteger(message.roomid.high)))
                    return "roomid: integer|Long expected";
            return null;
        };

        /**
         * Creates a RS2MS_DeleteRoom message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.RS2MS_DeleteRoom
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.RS2MS_DeleteRoom} RS2MS_DeleteRoom
         */
        RS2MS_DeleteRoom.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.RS2MS_DeleteRoom)
                return object;
            var message = new $root.msg.RS2MS_DeleteRoom();
            if (object.roomid != null)
                if ($util.Long)
                    (message.roomid = $util.Long.fromValue(object.roomid)).unsigned = false;
                else if (typeof object.roomid === "string")
                    message.roomid = parseInt(object.roomid, 10);
                else if (typeof object.roomid === "number")
                    message.roomid = object.roomid;
                else if (typeof object.roomid === "object")
                    message.roomid = new $util.LongBits(object.roomid.low >>> 0, object.roomid.high >>> 0).toNumber();
            return message;
        };

        /**
         * Creates a plain object from a RS2MS_DeleteRoom message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.RS2MS_DeleteRoom
         * @static
         * @param {msg.RS2MS_DeleteRoom} message RS2MS_DeleteRoom
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        RS2MS_DeleteRoom.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.roomid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.roomid = options.longs === String ? "0" : 0;
            if (message.roomid != null && message.hasOwnProperty("roomid"))
                if (typeof message.roomid === "number")
                    object.roomid = options.longs === String ? String(message.roomid) : message.roomid;
                else
                    object.roomid = options.longs === String ? $util.Long.prototype.toString.call(message.roomid) : options.longs === Number ? new $util.LongBits(message.roomid.low >>> 0, message.roomid.high >>> 0).toNumber() : message.roomid;
            return object;
        };

        /**
         * Converts this RS2MS_DeleteRoom to JSON.
         * @function toJSON
         * @memberof msg.RS2MS_DeleteRoom
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        RS2MS_DeleteRoom.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RS2MS_DeleteRoom;
    })();

    msg.RS2MS_UpdateRewardPool = (function() {

        /**
         * Properties of a RS2MS_UpdateRewardPool.
         * @memberof msg
         * @interface IRS2MS_UpdateRewardPool
         * @property {number|null} [mapid] RS2MS_UpdateRewardPool mapid
         * @property {number|null} [cost] RS2MS_UpdateRewardPool cost
         */

        /**
         * Constructs a new RS2MS_UpdateRewardPool.
         * @memberof msg
         * @classdesc Represents a RS2MS_UpdateRewardPool.
         * @implements IRS2MS_UpdateRewardPool
         * @constructor
         * @param {msg.IRS2MS_UpdateRewardPool=} [properties] Properties to set
         */
        function RS2MS_UpdateRewardPool(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * RS2MS_UpdateRewardPool mapid.
         * @member {number} mapid
         * @memberof msg.RS2MS_UpdateRewardPool
         * @instance
         */
        RS2MS_UpdateRewardPool.prototype.mapid = 0;

        /**
         * RS2MS_UpdateRewardPool cost.
         * @member {number} cost
         * @memberof msg.RS2MS_UpdateRewardPool
         * @instance
         */
        RS2MS_UpdateRewardPool.prototype.cost = 0;

        /**
         * Creates a new RS2MS_UpdateRewardPool instance using the specified properties.
         * @function create
         * @memberof msg.RS2MS_UpdateRewardPool
         * @static
         * @param {msg.IRS2MS_UpdateRewardPool=} [properties] Properties to set
         * @returns {msg.RS2MS_UpdateRewardPool} RS2MS_UpdateRewardPool instance
         */
        RS2MS_UpdateRewardPool.create = function create(properties) {
            return new RS2MS_UpdateRewardPool(properties);
        };

        /**
         * Encodes the specified RS2MS_UpdateRewardPool message. Does not implicitly {@link msg.RS2MS_UpdateRewardPool.verify|verify} messages.
         * @function encode
         * @memberof msg.RS2MS_UpdateRewardPool
         * @static
         * @param {msg.IRS2MS_UpdateRewardPool} message RS2MS_UpdateRewardPool message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RS2MS_UpdateRewardPool.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.mapid != null && message.hasOwnProperty("mapid"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.mapid);
            if (message.cost != null && message.hasOwnProperty("cost"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.cost);
            return writer;
        };

        /**
         * Encodes the specified RS2MS_UpdateRewardPool message, length delimited. Does not implicitly {@link msg.RS2MS_UpdateRewardPool.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.RS2MS_UpdateRewardPool
         * @static
         * @param {msg.IRS2MS_UpdateRewardPool} message RS2MS_UpdateRewardPool message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RS2MS_UpdateRewardPool.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a RS2MS_UpdateRewardPool message from the specified reader or buffer.
         * @function decode
         * @memberof msg.RS2MS_UpdateRewardPool
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.RS2MS_UpdateRewardPool} RS2MS_UpdateRewardPool
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RS2MS_UpdateRewardPool.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.RS2MS_UpdateRewardPool();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.mapid = reader.int32();
                    break;
                case 2:
                    message.cost = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a RS2MS_UpdateRewardPool message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.RS2MS_UpdateRewardPool
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.RS2MS_UpdateRewardPool} RS2MS_UpdateRewardPool
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RS2MS_UpdateRewardPool.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a RS2MS_UpdateRewardPool message.
         * @function verify
         * @memberof msg.RS2MS_UpdateRewardPool
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        RS2MS_UpdateRewardPool.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.mapid != null && message.hasOwnProperty("mapid"))
                if (!$util.isInteger(message.mapid))
                    return "mapid: integer expected";
            if (message.cost != null && message.hasOwnProperty("cost"))
                if (!$util.isInteger(message.cost))
                    return "cost: integer expected";
            return null;
        };

        /**
         * Creates a RS2MS_UpdateRewardPool message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.RS2MS_UpdateRewardPool
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.RS2MS_UpdateRewardPool} RS2MS_UpdateRewardPool
         */
        RS2MS_UpdateRewardPool.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.RS2MS_UpdateRewardPool)
                return object;
            var message = new $root.msg.RS2MS_UpdateRewardPool();
            if (object.mapid != null)
                message.mapid = object.mapid | 0;
            if (object.cost != null)
                message.cost = object.cost | 0;
            return message;
        };

        /**
         * Creates a plain object from a RS2MS_UpdateRewardPool message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.RS2MS_UpdateRewardPool
         * @static
         * @param {msg.RS2MS_UpdateRewardPool} message RS2MS_UpdateRewardPool
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        RS2MS_UpdateRewardPool.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.mapid = 0;
                object.cost = 0;
            }
            if (message.mapid != null && message.hasOwnProperty("mapid"))
                object.mapid = message.mapid;
            if (message.cost != null && message.hasOwnProperty("cost"))
                object.cost = message.cost;
            return object;
        };

        /**
         * Converts this RS2MS_UpdateRewardPool to JSON.
         * @function toJSON
         * @memberof msg.RS2MS_UpdateRewardPool
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        RS2MS_UpdateRewardPool.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RS2MS_UpdateRewardPool;
    })();

    msg.GW2C_MsgNotify = (function() {

        /**
         * Properties of a GW2C_MsgNotify.
         * @memberof msg
         * @interface IGW2C_MsgNotify
         * @property {number|Long|null} [userid] GW2C_MsgNotify userid
         * @property {string|null} [text] GW2C_MsgNotify text
         */

        /**
         * Constructs a new GW2C_MsgNotify.
         * @memberof msg
         * @classdesc Represents a GW2C_MsgNotify.
         * @implements IGW2C_MsgNotify
         * @constructor
         * @param {msg.IGW2C_MsgNotify=} [properties] Properties to set
         */
        function GW2C_MsgNotify(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GW2C_MsgNotify userid.
         * @member {number|Long} userid
         * @memberof msg.GW2C_MsgNotify
         * @instance
         */
        GW2C_MsgNotify.prototype.userid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * GW2C_MsgNotify text.
         * @member {string} text
         * @memberof msg.GW2C_MsgNotify
         * @instance
         */
        GW2C_MsgNotify.prototype.text = "";

        /**
         * Creates a new GW2C_MsgNotify instance using the specified properties.
         * @function create
         * @memberof msg.GW2C_MsgNotify
         * @static
         * @param {msg.IGW2C_MsgNotify=} [properties] Properties to set
         * @returns {msg.GW2C_MsgNotify} GW2C_MsgNotify instance
         */
        GW2C_MsgNotify.create = function create(properties) {
            return new GW2C_MsgNotify(properties);
        };

        /**
         * Encodes the specified GW2C_MsgNotify message. Does not implicitly {@link msg.GW2C_MsgNotify.verify|verify} messages.
         * @function encode
         * @memberof msg.GW2C_MsgNotify
         * @static
         * @param {msg.IGW2C_MsgNotify} message GW2C_MsgNotify message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_MsgNotify.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.userid != null && message.hasOwnProperty("userid"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.userid);
            if (message.text != null && message.hasOwnProperty("text"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.text);
            return writer;
        };

        /**
         * Encodes the specified GW2C_MsgNotify message, length delimited. Does not implicitly {@link msg.GW2C_MsgNotify.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.GW2C_MsgNotify
         * @static
         * @param {msg.IGW2C_MsgNotify} message GW2C_MsgNotify message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_MsgNotify.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GW2C_MsgNotify message from the specified reader or buffer.
         * @function decode
         * @memberof msg.GW2C_MsgNotify
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.GW2C_MsgNotify} GW2C_MsgNotify
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_MsgNotify.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.GW2C_MsgNotify();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.userid = reader.uint64();
                    break;
                case 2:
                    message.text = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GW2C_MsgNotify message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.GW2C_MsgNotify
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.GW2C_MsgNotify} GW2C_MsgNotify
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_MsgNotify.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GW2C_MsgNotify message.
         * @function verify
         * @memberof msg.GW2C_MsgNotify
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GW2C_MsgNotify.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.userid != null && message.hasOwnProperty("userid"))
                if (!$util.isInteger(message.userid) && !(message.userid && $util.isInteger(message.userid.low) && $util.isInteger(message.userid.high)))
                    return "userid: integer|Long expected";
            if (message.text != null && message.hasOwnProperty("text"))
                if (!$util.isString(message.text))
                    return "text: string expected";
            return null;
        };

        /**
         * Creates a GW2C_MsgNotify message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.GW2C_MsgNotify
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.GW2C_MsgNotify} GW2C_MsgNotify
         */
        GW2C_MsgNotify.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.GW2C_MsgNotify)
                return object;
            var message = new $root.msg.GW2C_MsgNotify();
            if (object.userid != null)
                if ($util.Long)
                    (message.userid = $util.Long.fromValue(object.userid)).unsigned = true;
                else if (typeof object.userid === "string")
                    message.userid = parseInt(object.userid, 10);
                else if (typeof object.userid === "number")
                    message.userid = object.userid;
                else if (typeof object.userid === "object")
                    message.userid = new $util.LongBits(object.userid.low >>> 0, object.userid.high >>> 0).toNumber(true);
            if (object.text != null)
                message.text = String(object.text);
            return message;
        };

        /**
         * Creates a plain object from a GW2C_MsgNotify message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.GW2C_MsgNotify
         * @static
         * @param {msg.GW2C_MsgNotify} message GW2C_MsgNotify
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GW2C_MsgNotify.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.userid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.userid = options.longs === String ? "0" : 0;
                object.text = "";
            }
            if (message.userid != null && message.hasOwnProperty("userid"))
                if (typeof message.userid === "number")
                    object.userid = options.longs === String ? String(message.userid) : message.userid;
                else
                    object.userid = options.longs === String ? $util.Long.prototype.toString.call(message.userid) : options.longs === Number ? new $util.LongBits(message.userid.low >>> 0, message.userid.high >>> 0).toNumber(true) : message.userid;
            if (message.text != null && message.hasOwnProperty("text"))
                object.text = message.text;
            return object;
        };

        /**
         * Converts this GW2C_MsgNotify to JSON.
         * @function toJSON
         * @memberof msg.GW2C_MsgNotify
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GW2C_MsgNotify.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GW2C_MsgNotify;
    })();

    /**
     * NoticeType enum.
     * @name msg.NoticeType
     * @enum {string}
     * @property {number} Suspension=1 Suspension value
     * @property {number} Marquee=2 Marquee value
     */
    msg.NoticeType = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[1] = "Suspension"] = 1;
        values[valuesById[2] = "Marquee"] = 2;
        return values;
    })();

    msg.GW2C_MsgNotice = (function() {

        /**
         * Properties of a GW2C_MsgNotice.
         * @memberof msg
         * @interface IGW2C_MsgNotice
         * @property {number|Long|null} [userid] GW2C_MsgNotice userid
         * @property {string|null} [face] GW2C_MsgNotice face
         * @property {string|null} [name] GW2C_MsgNotice name
         * @property {number|null} [type] GW2C_MsgNotice type
         * @property {string|null} [text] GW2C_MsgNotice text
         */

        /**
         * Constructs a new GW2C_MsgNotice.
         * @memberof msg
         * @classdesc Represents a GW2C_MsgNotice.
         * @implements IGW2C_MsgNotice
         * @constructor
         * @param {msg.IGW2C_MsgNotice=} [properties] Properties to set
         */
        function GW2C_MsgNotice(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GW2C_MsgNotice userid.
         * @member {number|Long} userid
         * @memberof msg.GW2C_MsgNotice
         * @instance
         */
        GW2C_MsgNotice.prototype.userid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * GW2C_MsgNotice face.
         * @member {string} face
         * @memberof msg.GW2C_MsgNotice
         * @instance
         */
        GW2C_MsgNotice.prototype.face = "";

        /**
         * GW2C_MsgNotice name.
         * @member {string} name
         * @memberof msg.GW2C_MsgNotice
         * @instance
         */
        GW2C_MsgNotice.prototype.name = "";

        /**
         * GW2C_MsgNotice type.
         * @member {number} type
         * @memberof msg.GW2C_MsgNotice
         * @instance
         */
        GW2C_MsgNotice.prototype.type = 0;

        /**
         * GW2C_MsgNotice text.
         * @member {string} text
         * @memberof msg.GW2C_MsgNotice
         * @instance
         */
        GW2C_MsgNotice.prototype.text = "";

        /**
         * Creates a new GW2C_MsgNotice instance using the specified properties.
         * @function create
         * @memberof msg.GW2C_MsgNotice
         * @static
         * @param {msg.IGW2C_MsgNotice=} [properties] Properties to set
         * @returns {msg.GW2C_MsgNotice} GW2C_MsgNotice instance
         */
        GW2C_MsgNotice.create = function create(properties) {
            return new GW2C_MsgNotice(properties);
        };

        /**
         * Encodes the specified GW2C_MsgNotice message. Does not implicitly {@link msg.GW2C_MsgNotice.verify|verify} messages.
         * @function encode
         * @memberof msg.GW2C_MsgNotice
         * @static
         * @param {msg.IGW2C_MsgNotice} message GW2C_MsgNotice message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_MsgNotice.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.userid != null && message.hasOwnProperty("userid"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.userid);
            if (message.face != null && message.hasOwnProperty("face"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.face);
            if (message.name != null && message.hasOwnProperty("name"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.name);
            if (message.type != null && message.hasOwnProperty("type"))
                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.type);
            if (message.text != null && message.hasOwnProperty("text"))
                writer.uint32(/* id 5, wireType 2 =*/42).string(message.text);
            return writer;
        };

        /**
         * Encodes the specified GW2C_MsgNotice message, length delimited. Does not implicitly {@link msg.GW2C_MsgNotice.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.GW2C_MsgNotice
         * @static
         * @param {msg.IGW2C_MsgNotice} message GW2C_MsgNotice message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_MsgNotice.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GW2C_MsgNotice message from the specified reader or buffer.
         * @function decode
         * @memberof msg.GW2C_MsgNotice
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.GW2C_MsgNotice} GW2C_MsgNotice
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_MsgNotice.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.GW2C_MsgNotice();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.userid = reader.uint64();
                    break;
                case 2:
                    message.face = reader.string();
                    break;
                case 3:
                    message.name = reader.string();
                    break;
                case 4:
                    message.type = reader.int32();
                    break;
                case 5:
                    message.text = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GW2C_MsgNotice message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.GW2C_MsgNotice
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.GW2C_MsgNotice} GW2C_MsgNotice
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_MsgNotice.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GW2C_MsgNotice message.
         * @function verify
         * @memberof msg.GW2C_MsgNotice
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GW2C_MsgNotice.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.userid != null && message.hasOwnProperty("userid"))
                if (!$util.isInteger(message.userid) && !(message.userid && $util.isInteger(message.userid.low) && $util.isInteger(message.userid.high)))
                    return "userid: integer|Long expected";
            if (message.face != null && message.hasOwnProperty("face"))
                if (!$util.isString(message.face))
                    return "face: string expected";
            if (message.name != null && message.hasOwnProperty("name"))
                if (!$util.isString(message.name))
                    return "name: string expected";
            if (message.type != null && message.hasOwnProperty("type"))
                if (!$util.isInteger(message.type))
                    return "type: integer expected";
            if (message.text != null && message.hasOwnProperty("text"))
                if (!$util.isString(message.text))
                    return "text: string expected";
            return null;
        };

        /**
         * Creates a GW2C_MsgNotice message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.GW2C_MsgNotice
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.GW2C_MsgNotice} GW2C_MsgNotice
         */
        GW2C_MsgNotice.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.GW2C_MsgNotice)
                return object;
            var message = new $root.msg.GW2C_MsgNotice();
            if (object.userid != null)
                if ($util.Long)
                    (message.userid = $util.Long.fromValue(object.userid)).unsigned = true;
                else if (typeof object.userid === "string")
                    message.userid = parseInt(object.userid, 10);
                else if (typeof object.userid === "number")
                    message.userid = object.userid;
                else if (typeof object.userid === "object")
                    message.userid = new $util.LongBits(object.userid.low >>> 0, object.userid.high >>> 0).toNumber(true);
            if (object.face != null)
                message.face = String(object.face);
            if (object.name != null)
                message.name = String(object.name);
            if (object.type != null)
                message.type = object.type | 0;
            if (object.text != null)
                message.text = String(object.text);
            return message;
        };

        /**
         * Creates a plain object from a GW2C_MsgNotice message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.GW2C_MsgNotice
         * @static
         * @param {msg.GW2C_MsgNotice} message GW2C_MsgNotice
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GW2C_MsgNotice.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.userid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.userid = options.longs === String ? "0" : 0;
                object.face = "";
                object.name = "";
                object.type = 0;
                object.text = "";
            }
            if (message.userid != null && message.hasOwnProperty("userid"))
                if (typeof message.userid === "number")
                    object.userid = options.longs === String ? String(message.userid) : message.userid;
                else
                    object.userid = options.longs === String ? $util.Long.prototype.toString.call(message.userid) : options.longs === Number ? new $util.LongBits(message.userid.low >>> 0, message.userid.high >>> 0).toNumber(true) : message.userid;
            if (message.face != null && message.hasOwnProperty("face"))
                object.face = message.face;
            if (message.name != null && message.hasOwnProperty("name"))
                object.name = message.name;
            if (message.type != null && message.hasOwnProperty("type"))
                object.type = message.type;
            if (message.text != null && message.hasOwnProperty("text"))
                object.text = message.text;
            return object;
        };

        /**
         * Converts this GW2C_MsgNotice to JSON.
         * @function toJSON
         * @memberof msg.GW2C_MsgNotice
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GW2C_MsgNotice.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GW2C_MsgNotice;
    })();

    msg.GW2MS_MsgNotice = (function() {

        /**
         * Properties of a GW2MS_MsgNotice.
         * @memberof msg
         * @interface IGW2MS_MsgNotice
         * @property {msg.IGW2C_MsgNotice|null} [notice] GW2MS_MsgNotice notice
         */

        /**
         * Constructs a new GW2MS_MsgNotice.
         * @memberof msg
         * @classdesc Represents a GW2MS_MsgNotice.
         * @implements IGW2MS_MsgNotice
         * @constructor
         * @param {msg.IGW2MS_MsgNotice=} [properties] Properties to set
         */
        function GW2MS_MsgNotice(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GW2MS_MsgNotice notice.
         * @member {msg.IGW2C_MsgNotice|null|undefined} notice
         * @memberof msg.GW2MS_MsgNotice
         * @instance
         */
        GW2MS_MsgNotice.prototype.notice = null;

        /**
         * Creates a new GW2MS_MsgNotice instance using the specified properties.
         * @function create
         * @memberof msg.GW2MS_MsgNotice
         * @static
         * @param {msg.IGW2MS_MsgNotice=} [properties] Properties to set
         * @returns {msg.GW2MS_MsgNotice} GW2MS_MsgNotice instance
         */
        GW2MS_MsgNotice.create = function create(properties) {
            return new GW2MS_MsgNotice(properties);
        };

        /**
         * Encodes the specified GW2MS_MsgNotice message. Does not implicitly {@link msg.GW2MS_MsgNotice.verify|verify} messages.
         * @function encode
         * @memberof msg.GW2MS_MsgNotice
         * @static
         * @param {msg.IGW2MS_MsgNotice} message GW2MS_MsgNotice message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2MS_MsgNotice.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.notice != null && message.hasOwnProperty("notice"))
                $root.msg.GW2C_MsgNotice.encode(message.notice, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified GW2MS_MsgNotice message, length delimited. Does not implicitly {@link msg.GW2MS_MsgNotice.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.GW2MS_MsgNotice
         * @static
         * @param {msg.IGW2MS_MsgNotice} message GW2MS_MsgNotice message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2MS_MsgNotice.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GW2MS_MsgNotice message from the specified reader or buffer.
         * @function decode
         * @memberof msg.GW2MS_MsgNotice
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.GW2MS_MsgNotice} GW2MS_MsgNotice
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2MS_MsgNotice.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.GW2MS_MsgNotice();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.notice = $root.msg.GW2C_MsgNotice.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GW2MS_MsgNotice message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.GW2MS_MsgNotice
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.GW2MS_MsgNotice} GW2MS_MsgNotice
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2MS_MsgNotice.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GW2MS_MsgNotice message.
         * @function verify
         * @memberof msg.GW2MS_MsgNotice
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GW2MS_MsgNotice.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.notice != null && message.hasOwnProperty("notice")) {
                var error = $root.msg.GW2C_MsgNotice.verify(message.notice);
                if (error)
                    return "notice." + error;
            }
            return null;
        };

        /**
         * Creates a GW2MS_MsgNotice message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.GW2MS_MsgNotice
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.GW2MS_MsgNotice} GW2MS_MsgNotice
         */
        GW2MS_MsgNotice.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.GW2MS_MsgNotice)
                return object;
            var message = new $root.msg.GW2MS_MsgNotice();
            if (object.notice != null) {
                if (typeof object.notice !== "object")
                    throw TypeError(".msg.GW2MS_MsgNotice.notice: object expected");
                message.notice = $root.msg.GW2C_MsgNotice.fromObject(object.notice);
            }
            return message;
        };

        /**
         * Creates a plain object from a GW2MS_MsgNotice message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.GW2MS_MsgNotice
         * @static
         * @param {msg.GW2MS_MsgNotice} message GW2MS_MsgNotice
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GW2MS_MsgNotice.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.notice = null;
            if (message.notice != null && message.hasOwnProperty("notice"))
                object.notice = $root.msg.GW2C_MsgNotice.toObject(message.notice, options);
            return object;
        };

        /**
         * Converts this GW2MS_MsgNotice to JSON.
         * @function toJSON
         * @memberof msg.GW2MS_MsgNotice
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GW2MS_MsgNotice.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GW2MS_MsgNotice;
    })();

    msg.RS2MS_MsgNotice = (function() {

        /**
         * Properties of a RS2MS_MsgNotice.
         * @memberof msg
         * @interface IRS2MS_MsgNotice
         * @property {msg.IGW2C_MsgNotice|null} [notice] RS2MS_MsgNotice notice
         */

        /**
         * Constructs a new RS2MS_MsgNotice.
         * @memberof msg
         * @classdesc Represents a RS2MS_MsgNotice.
         * @implements IRS2MS_MsgNotice
         * @constructor
         * @param {msg.IRS2MS_MsgNotice=} [properties] Properties to set
         */
        function RS2MS_MsgNotice(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * RS2MS_MsgNotice notice.
         * @member {msg.IGW2C_MsgNotice|null|undefined} notice
         * @memberof msg.RS2MS_MsgNotice
         * @instance
         */
        RS2MS_MsgNotice.prototype.notice = null;

        /**
         * Creates a new RS2MS_MsgNotice instance using the specified properties.
         * @function create
         * @memberof msg.RS2MS_MsgNotice
         * @static
         * @param {msg.IRS2MS_MsgNotice=} [properties] Properties to set
         * @returns {msg.RS2MS_MsgNotice} RS2MS_MsgNotice instance
         */
        RS2MS_MsgNotice.create = function create(properties) {
            return new RS2MS_MsgNotice(properties);
        };

        /**
         * Encodes the specified RS2MS_MsgNotice message. Does not implicitly {@link msg.RS2MS_MsgNotice.verify|verify} messages.
         * @function encode
         * @memberof msg.RS2MS_MsgNotice
         * @static
         * @param {msg.IRS2MS_MsgNotice} message RS2MS_MsgNotice message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RS2MS_MsgNotice.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.notice != null && message.hasOwnProperty("notice"))
                $root.msg.GW2C_MsgNotice.encode(message.notice, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified RS2MS_MsgNotice message, length delimited. Does not implicitly {@link msg.RS2MS_MsgNotice.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.RS2MS_MsgNotice
         * @static
         * @param {msg.IRS2MS_MsgNotice} message RS2MS_MsgNotice message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RS2MS_MsgNotice.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a RS2MS_MsgNotice message from the specified reader or buffer.
         * @function decode
         * @memberof msg.RS2MS_MsgNotice
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.RS2MS_MsgNotice} RS2MS_MsgNotice
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RS2MS_MsgNotice.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.RS2MS_MsgNotice();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.notice = $root.msg.GW2C_MsgNotice.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a RS2MS_MsgNotice message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.RS2MS_MsgNotice
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.RS2MS_MsgNotice} RS2MS_MsgNotice
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RS2MS_MsgNotice.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a RS2MS_MsgNotice message.
         * @function verify
         * @memberof msg.RS2MS_MsgNotice
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        RS2MS_MsgNotice.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.notice != null && message.hasOwnProperty("notice")) {
                var error = $root.msg.GW2C_MsgNotice.verify(message.notice);
                if (error)
                    return "notice." + error;
            }
            return null;
        };

        /**
         * Creates a RS2MS_MsgNotice message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.RS2MS_MsgNotice
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.RS2MS_MsgNotice} RS2MS_MsgNotice
         */
        RS2MS_MsgNotice.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.RS2MS_MsgNotice)
                return object;
            var message = new $root.msg.RS2MS_MsgNotice();
            if (object.notice != null) {
                if (typeof object.notice !== "object")
                    throw TypeError(".msg.RS2MS_MsgNotice.notice: object expected");
                message.notice = $root.msg.GW2C_MsgNotice.fromObject(object.notice);
            }
            return message;
        };

        /**
         * Creates a plain object from a RS2MS_MsgNotice message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.RS2MS_MsgNotice
         * @static
         * @param {msg.RS2MS_MsgNotice} message RS2MS_MsgNotice
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        RS2MS_MsgNotice.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.notice = null;
            if (message.notice != null && message.hasOwnProperty("notice"))
                object.notice = $root.msg.GW2C_MsgNotice.toObject(message.notice, options);
            return object;
        };

        /**
         * Converts this RS2MS_MsgNotice to JSON.
         * @function toJSON
         * @memberof msg.RS2MS_MsgNotice
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        RS2MS_MsgNotice.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RS2MS_MsgNotice;
    })();

    msg.MS2GW_MsgNotice = (function() {

        /**
         * Properties of a MS2GW_MsgNotice.
         * @memberof msg
         * @interface IMS2GW_MsgNotice
         * @property {msg.IGW2C_MsgNotice|null} [notice] MS2GW_MsgNotice notice
         */

        /**
         * Constructs a new MS2GW_MsgNotice.
         * @memberof msg
         * @classdesc Represents a MS2GW_MsgNotice.
         * @implements IMS2GW_MsgNotice
         * @constructor
         * @param {msg.IMS2GW_MsgNotice=} [properties] Properties to set
         */
        function MS2GW_MsgNotice(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * MS2GW_MsgNotice notice.
         * @member {msg.IGW2C_MsgNotice|null|undefined} notice
         * @memberof msg.MS2GW_MsgNotice
         * @instance
         */
        MS2GW_MsgNotice.prototype.notice = null;

        /**
         * Creates a new MS2GW_MsgNotice instance using the specified properties.
         * @function create
         * @memberof msg.MS2GW_MsgNotice
         * @static
         * @param {msg.IMS2GW_MsgNotice=} [properties] Properties to set
         * @returns {msg.MS2GW_MsgNotice} MS2GW_MsgNotice instance
         */
        MS2GW_MsgNotice.create = function create(properties) {
            return new MS2GW_MsgNotice(properties);
        };

        /**
         * Encodes the specified MS2GW_MsgNotice message. Does not implicitly {@link msg.MS2GW_MsgNotice.verify|verify} messages.
         * @function encode
         * @memberof msg.MS2GW_MsgNotice
         * @static
         * @param {msg.IMS2GW_MsgNotice} message MS2GW_MsgNotice message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        MS2GW_MsgNotice.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.notice != null && message.hasOwnProperty("notice"))
                $root.msg.GW2C_MsgNotice.encode(message.notice, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified MS2GW_MsgNotice message, length delimited. Does not implicitly {@link msg.MS2GW_MsgNotice.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.MS2GW_MsgNotice
         * @static
         * @param {msg.IMS2GW_MsgNotice} message MS2GW_MsgNotice message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        MS2GW_MsgNotice.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a MS2GW_MsgNotice message from the specified reader or buffer.
         * @function decode
         * @memberof msg.MS2GW_MsgNotice
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.MS2GW_MsgNotice} MS2GW_MsgNotice
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        MS2GW_MsgNotice.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.MS2GW_MsgNotice();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.notice = $root.msg.GW2C_MsgNotice.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a MS2GW_MsgNotice message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.MS2GW_MsgNotice
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.MS2GW_MsgNotice} MS2GW_MsgNotice
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        MS2GW_MsgNotice.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a MS2GW_MsgNotice message.
         * @function verify
         * @memberof msg.MS2GW_MsgNotice
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        MS2GW_MsgNotice.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.notice != null && message.hasOwnProperty("notice")) {
                var error = $root.msg.GW2C_MsgNotice.verify(message.notice);
                if (error)
                    return "notice." + error;
            }
            return null;
        };

        /**
         * Creates a MS2GW_MsgNotice message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.MS2GW_MsgNotice
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.MS2GW_MsgNotice} MS2GW_MsgNotice
         */
        MS2GW_MsgNotice.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.MS2GW_MsgNotice)
                return object;
            var message = new $root.msg.MS2GW_MsgNotice();
            if (object.notice != null) {
                if (typeof object.notice !== "object")
                    throw TypeError(".msg.MS2GW_MsgNotice.notice: object expected");
                message.notice = $root.msg.GW2C_MsgNotice.fromObject(object.notice);
            }
            return message;
        };

        /**
         * Creates a plain object from a MS2GW_MsgNotice message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.MS2GW_MsgNotice
         * @static
         * @param {msg.MS2GW_MsgNotice} message MS2GW_MsgNotice
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        MS2GW_MsgNotice.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.notice = null;
            if (message.notice != null && message.hasOwnProperty("notice"))
                object.notice = $root.msg.GW2C_MsgNotice.toObject(message.notice, options);
            return object;
        };

        /**
         * Converts this MS2GW_MsgNotice to JSON.
         * @function toJSON
         * @memberof msg.MS2GW_MsgNotice
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        MS2GW_MsgNotice.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return MS2GW_MsgNotice;
    })();

    msg.MS2Server_BroadCast = (function() {

        /**
         * Properties of a MS2Server_BroadCast.
         * @memberof msg
         * @interface IMS2Server_BroadCast
         * @property {string|null} [cmd] MS2Server_BroadCast cmd
         */

        /**
         * Constructs a new MS2Server_BroadCast.
         * @memberof msg
         * @classdesc Represents a MS2Server_BroadCast.
         * @implements IMS2Server_BroadCast
         * @constructor
         * @param {msg.IMS2Server_BroadCast=} [properties] Properties to set
         */
        function MS2Server_BroadCast(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * MS2Server_BroadCast cmd.
         * @member {string} cmd
         * @memberof msg.MS2Server_BroadCast
         * @instance
         */
        MS2Server_BroadCast.prototype.cmd = "";

        /**
         * Creates a new MS2Server_BroadCast instance using the specified properties.
         * @function create
         * @memberof msg.MS2Server_BroadCast
         * @static
         * @param {msg.IMS2Server_BroadCast=} [properties] Properties to set
         * @returns {msg.MS2Server_BroadCast} MS2Server_BroadCast instance
         */
        MS2Server_BroadCast.create = function create(properties) {
            return new MS2Server_BroadCast(properties);
        };

        /**
         * Encodes the specified MS2Server_BroadCast message. Does not implicitly {@link msg.MS2Server_BroadCast.verify|verify} messages.
         * @function encode
         * @memberof msg.MS2Server_BroadCast
         * @static
         * @param {msg.IMS2Server_BroadCast} message MS2Server_BroadCast message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        MS2Server_BroadCast.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.cmd != null && message.hasOwnProperty("cmd"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.cmd);
            return writer;
        };

        /**
         * Encodes the specified MS2Server_BroadCast message, length delimited. Does not implicitly {@link msg.MS2Server_BroadCast.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.MS2Server_BroadCast
         * @static
         * @param {msg.IMS2Server_BroadCast} message MS2Server_BroadCast message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        MS2Server_BroadCast.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a MS2Server_BroadCast message from the specified reader or buffer.
         * @function decode
         * @memberof msg.MS2Server_BroadCast
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.MS2Server_BroadCast} MS2Server_BroadCast
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        MS2Server_BroadCast.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.MS2Server_BroadCast();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.cmd = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a MS2Server_BroadCast message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.MS2Server_BroadCast
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.MS2Server_BroadCast} MS2Server_BroadCast
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        MS2Server_BroadCast.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a MS2Server_BroadCast message.
         * @function verify
         * @memberof msg.MS2Server_BroadCast
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        MS2Server_BroadCast.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.cmd != null && message.hasOwnProperty("cmd"))
                if (!$util.isString(message.cmd))
                    return "cmd: string expected";
            return null;
        };

        /**
         * Creates a MS2Server_BroadCast message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.MS2Server_BroadCast
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.MS2Server_BroadCast} MS2Server_BroadCast
         */
        MS2Server_BroadCast.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.MS2Server_BroadCast)
                return object;
            var message = new $root.msg.MS2Server_BroadCast();
            if (object.cmd != null)
                message.cmd = String(object.cmd);
            return message;
        };

        /**
         * Creates a plain object from a MS2Server_BroadCast message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.MS2Server_BroadCast
         * @static
         * @param {msg.MS2Server_BroadCast} message MS2Server_BroadCast
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        MS2Server_BroadCast.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.cmd = "";
            if (message.cmd != null && message.hasOwnProperty("cmd"))
                object.cmd = message.cmd;
            return object;
        };

        /**
         * Converts this MS2Server_BroadCast to JSON.
         * @function toJSON
         * @memberof msg.MS2Server_BroadCast
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        MS2Server_BroadCast.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return MS2Server_BroadCast;
    })();

    msg.C2GW_StartTiger = (function() {

        /**
         * Properties of a C2GW_StartTiger.
         * @memberof msg
         * @interface IC2GW_StartTiger
         * @property {number|null} [type] C2GW_StartTiger type
         */

        /**
         * Constructs a new C2GW_StartTiger.
         * @memberof msg
         * @classdesc Represents a C2GW_StartTiger.
         * @implements IC2GW_StartTiger
         * @constructor
         * @param {msg.IC2GW_StartTiger=} [properties] Properties to set
         */
        function C2GW_StartTiger(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * C2GW_StartTiger type.
         * @member {number} type
         * @memberof msg.C2GW_StartTiger
         * @instance
         */
        C2GW_StartTiger.prototype.type = 0;

        /**
         * Creates a new C2GW_StartTiger instance using the specified properties.
         * @function create
         * @memberof msg.C2GW_StartTiger
         * @static
         * @param {msg.IC2GW_StartTiger=} [properties] Properties to set
         * @returns {msg.C2GW_StartTiger} C2GW_StartTiger instance
         */
        C2GW_StartTiger.create = function create(properties) {
            return new C2GW_StartTiger(properties);
        };

        /**
         * Encodes the specified C2GW_StartTiger message. Does not implicitly {@link msg.C2GW_StartTiger.verify|verify} messages.
         * @function encode
         * @memberof msg.C2GW_StartTiger
         * @static
         * @param {msg.IC2GW_StartTiger} message C2GW_StartTiger message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_StartTiger.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.type != null && message.hasOwnProperty("type"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.type);
            return writer;
        };

        /**
         * Encodes the specified C2GW_StartTiger message, length delimited. Does not implicitly {@link msg.C2GW_StartTiger.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.C2GW_StartTiger
         * @static
         * @param {msg.IC2GW_StartTiger} message C2GW_StartTiger message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_StartTiger.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a C2GW_StartTiger message from the specified reader or buffer.
         * @function decode
         * @memberof msg.C2GW_StartTiger
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.C2GW_StartTiger} C2GW_StartTiger
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_StartTiger.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.C2GW_StartTiger();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.type = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a C2GW_StartTiger message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.C2GW_StartTiger
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.C2GW_StartTiger} C2GW_StartTiger
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_StartTiger.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a C2GW_StartTiger message.
         * @function verify
         * @memberof msg.C2GW_StartTiger
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        C2GW_StartTiger.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.type != null && message.hasOwnProperty("type"))
                if (!$util.isInteger(message.type))
                    return "type: integer expected";
            return null;
        };

        /**
         * Creates a C2GW_StartTiger message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.C2GW_StartTiger
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.C2GW_StartTiger} C2GW_StartTiger
         */
        C2GW_StartTiger.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.C2GW_StartTiger)
                return object;
            var message = new $root.msg.C2GW_StartTiger();
            if (object.type != null)
                message.type = object.type >>> 0;
            return message;
        };

        /**
         * Creates a plain object from a C2GW_StartTiger message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.C2GW_StartTiger
         * @static
         * @param {msg.C2GW_StartTiger} message C2GW_StartTiger
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        C2GW_StartTiger.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.type = 0;
            if (message.type != null && message.hasOwnProperty("type"))
                object.type = message.type;
            return object;
        };

        /**
         * Converts this C2GW_StartTiger to JSON.
         * @function toJSON
         * @memberof msg.C2GW_StartTiger
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        C2GW_StartTiger.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return C2GW_StartTiger;
    })();

    msg.GW2C_GameResult = (function() {

        /**
         * Properties of a GW2C_GameResult.
         * @memberof msg
         * @interface IGW2C_GameResult
         * @property {Array.<number>|null} [nums] GW2C_GameResult nums
         */

        /**
         * Constructs a new GW2C_GameResult.
         * @memberof msg
         * @classdesc Represents a GW2C_GameResult.
         * @implements IGW2C_GameResult
         * @constructor
         * @param {msg.IGW2C_GameResult=} [properties] Properties to set
         */
        function GW2C_GameResult(properties) {
            this.nums = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GW2C_GameResult nums.
         * @member {Array.<number>} nums
         * @memberof msg.GW2C_GameResult
         * @instance
         */
        GW2C_GameResult.prototype.nums = $util.emptyArray;

        /**
         * Creates a new GW2C_GameResult instance using the specified properties.
         * @function create
         * @memberof msg.GW2C_GameResult
         * @static
         * @param {msg.IGW2C_GameResult=} [properties] Properties to set
         * @returns {msg.GW2C_GameResult} GW2C_GameResult instance
         */
        GW2C_GameResult.create = function create(properties) {
            return new GW2C_GameResult(properties);
        };

        /**
         * Encodes the specified GW2C_GameResult message. Does not implicitly {@link msg.GW2C_GameResult.verify|verify} messages.
         * @function encode
         * @memberof msg.GW2C_GameResult
         * @static
         * @param {msg.IGW2C_GameResult} message GW2C_GameResult message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_GameResult.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.nums != null && message.nums.length)
                for (var i = 0; i < message.nums.length; ++i)
                    writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.nums[i]);
            return writer;
        };

        /**
         * Encodes the specified GW2C_GameResult message, length delimited. Does not implicitly {@link msg.GW2C_GameResult.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.GW2C_GameResult
         * @static
         * @param {msg.IGW2C_GameResult} message GW2C_GameResult message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_GameResult.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GW2C_GameResult message from the specified reader or buffer.
         * @function decode
         * @memberof msg.GW2C_GameResult
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.GW2C_GameResult} GW2C_GameResult
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_GameResult.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.GW2C_GameResult();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.nums && message.nums.length))
                        message.nums = [];
                    if ((tag & 7) === 2) {
                        var end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2)
                            message.nums.push(reader.uint32());
                    } else
                        message.nums.push(reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GW2C_GameResult message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.GW2C_GameResult
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.GW2C_GameResult} GW2C_GameResult
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_GameResult.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GW2C_GameResult message.
         * @function verify
         * @memberof msg.GW2C_GameResult
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GW2C_GameResult.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.nums != null && message.hasOwnProperty("nums")) {
                if (!Array.isArray(message.nums))
                    return "nums: array expected";
                for (var i = 0; i < message.nums.length; ++i)
                    if (!$util.isInteger(message.nums[i]))
                        return "nums: integer[] expected";
            }
            return null;
        };

        /**
         * Creates a GW2C_GameResult message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.GW2C_GameResult
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.GW2C_GameResult} GW2C_GameResult
         */
        GW2C_GameResult.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.GW2C_GameResult)
                return object;
            var message = new $root.msg.GW2C_GameResult();
            if (object.nums) {
                if (!Array.isArray(object.nums))
                    throw TypeError(".msg.GW2C_GameResult.nums: array expected");
                message.nums = [];
                for (var i = 0; i < object.nums.length; ++i)
                    message.nums[i] = object.nums[i] >>> 0;
            }
            return message;
        };

        /**
         * Creates a plain object from a GW2C_GameResult message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.GW2C_GameResult
         * @static
         * @param {msg.GW2C_GameResult} message GW2C_GameResult
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GW2C_GameResult.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.nums = [];
            if (message.nums && message.nums.length) {
                object.nums = [];
                for (var j = 0; j < message.nums.length; ++j)
                    object.nums[j] = message.nums[j];
            }
            return object;
        };

        /**
         * Converts this GW2C_GameResult to JSON.
         * @function toJSON
         * @memberof msg.GW2C_GameResult
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GW2C_GameResult.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GW2C_GameResult;
    })();

    msg.GW2C_SumGet = (function() {

        /**
         * Properties of a GW2C_SumGet.
         * @memberof msg
         * @interface IGW2C_SumGet
         * @property {number|null} [num] GW2C_SumGet num
         */

        /**
         * Constructs a new GW2C_SumGet.
         * @memberof msg
         * @classdesc Represents a GW2C_SumGet.
         * @implements IGW2C_SumGet
         * @constructor
         * @param {msg.IGW2C_SumGet=} [properties] Properties to set
         */
        function GW2C_SumGet(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GW2C_SumGet num.
         * @member {number} num
         * @memberof msg.GW2C_SumGet
         * @instance
         */
        GW2C_SumGet.prototype.num = 0;

        /**
         * Creates a new GW2C_SumGet instance using the specified properties.
         * @function create
         * @memberof msg.GW2C_SumGet
         * @static
         * @param {msg.IGW2C_SumGet=} [properties] Properties to set
         * @returns {msg.GW2C_SumGet} GW2C_SumGet instance
         */
        GW2C_SumGet.create = function create(properties) {
            return new GW2C_SumGet(properties);
        };

        /**
         * Encodes the specified GW2C_SumGet message. Does not implicitly {@link msg.GW2C_SumGet.verify|verify} messages.
         * @function encode
         * @memberof msg.GW2C_SumGet
         * @static
         * @param {msg.IGW2C_SumGet} message GW2C_SumGet message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_SumGet.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.num != null && message.hasOwnProperty("num"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.num);
            return writer;
        };

        /**
         * Encodes the specified GW2C_SumGet message, length delimited. Does not implicitly {@link msg.GW2C_SumGet.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.GW2C_SumGet
         * @static
         * @param {msg.IGW2C_SumGet} message GW2C_SumGet message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_SumGet.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GW2C_SumGet message from the specified reader or buffer.
         * @function decode
         * @memberof msg.GW2C_SumGet
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.GW2C_SumGet} GW2C_SumGet
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_SumGet.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.GW2C_SumGet();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.num = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GW2C_SumGet message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.GW2C_SumGet
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.GW2C_SumGet} GW2C_SumGet
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_SumGet.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GW2C_SumGet message.
         * @function verify
         * @memberof msg.GW2C_SumGet
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GW2C_SumGet.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.num != null && message.hasOwnProperty("num"))
                if (!$util.isInteger(message.num))
                    return "num: integer expected";
            return null;
        };

        /**
         * Creates a GW2C_SumGet message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.GW2C_SumGet
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.GW2C_SumGet} GW2C_SumGet
         */
        GW2C_SumGet.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.GW2C_SumGet)
                return object;
            var message = new $root.msg.GW2C_SumGet();
            if (object.num != null)
                message.num = object.num >>> 0;
            return message;
        };

        /**
         * Creates a plain object from a GW2C_SumGet message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.GW2C_SumGet
         * @static
         * @param {msg.GW2C_SumGet} message GW2C_SumGet
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GW2C_SumGet.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.num = 0;
            if (message.num != null && message.hasOwnProperty("num"))
                object.num = message.num;
            return object;
        };

        /**
         * Converts this GW2C_SumGet to JSON.
         * @function toJSON
         * @memberof msg.GW2C_SumGet
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GW2C_SumGet.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GW2C_SumGet;
    })();

    msg.C2GW_AddDeliveryAddress = (function() {

        /**
         * Properties of a C2GW_AddDeliveryAddress.
         * @memberof msg
         * @interface IC2GW_AddDeliveryAddress
         * @property {msg.IUserAddress|null} [info] C2GW_AddDeliveryAddress info
         */

        /**
         * Constructs a new C2GW_AddDeliveryAddress.
         * @memberof msg
         * @classdesc Represents a C2GW_AddDeliveryAddress.
         * @implements IC2GW_AddDeliveryAddress
         * @constructor
         * @param {msg.IC2GW_AddDeliveryAddress=} [properties] Properties to set
         */
        function C2GW_AddDeliveryAddress(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * C2GW_AddDeliveryAddress info.
         * @member {msg.IUserAddress|null|undefined} info
         * @memberof msg.C2GW_AddDeliveryAddress
         * @instance
         */
        C2GW_AddDeliveryAddress.prototype.info = null;

        /**
         * Creates a new C2GW_AddDeliveryAddress instance using the specified properties.
         * @function create
         * @memberof msg.C2GW_AddDeliveryAddress
         * @static
         * @param {msg.IC2GW_AddDeliveryAddress=} [properties] Properties to set
         * @returns {msg.C2GW_AddDeliveryAddress} C2GW_AddDeliveryAddress instance
         */
        C2GW_AddDeliveryAddress.create = function create(properties) {
            return new C2GW_AddDeliveryAddress(properties);
        };

        /**
         * Encodes the specified C2GW_AddDeliveryAddress message. Does not implicitly {@link msg.C2GW_AddDeliveryAddress.verify|verify} messages.
         * @function encode
         * @memberof msg.C2GW_AddDeliveryAddress
         * @static
         * @param {msg.IC2GW_AddDeliveryAddress} message C2GW_AddDeliveryAddress message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_AddDeliveryAddress.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.info != null && message.hasOwnProperty("info"))
                $root.msg.UserAddress.encode(message.info, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified C2GW_AddDeliveryAddress message, length delimited. Does not implicitly {@link msg.C2GW_AddDeliveryAddress.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.C2GW_AddDeliveryAddress
         * @static
         * @param {msg.IC2GW_AddDeliveryAddress} message C2GW_AddDeliveryAddress message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_AddDeliveryAddress.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a C2GW_AddDeliveryAddress message from the specified reader or buffer.
         * @function decode
         * @memberof msg.C2GW_AddDeliveryAddress
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.C2GW_AddDeliveryAddress} C2GW_AddDeliveryAddress
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_AddDeliveryAddress.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.C2GW_AddDeliveryAddress();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.info = $root.msg.UserAddress.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a C2GW_AddDeliveryAddress message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.C2GW_AddDeliveryAddress
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.C2GW_AddDeliveryAddress} C2GW_AddDeliveryAddress
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_AddDeliveryAddress.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a C2GW_AddDeliveryAddress message.
         * @function verify
         * @memberof msg.C2GW_AddDeliveryAddress
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        C2GW_AddDeliveryAddress.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.info != null && message.hasOwnProperty("info")) {
                var error = $root.msg.UserAddress.verify(message.info);
                if (error)
                    return "info." + error;
            }
            return null;
        };

        /**
         * Creates a C2GW_AddDeliveryAddress message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.C2GW_AddDeliveryAddress
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.C2GW_AddDeliveryAddress} C2GW_AddDeliveryAddress
         */
        C2GW_AddDeliveryAddress.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.C2GW_AddDeliveryAddress)
                return object;
            var message = new $root.msg.C2GW_AddDeliveryAddress();
            if (object.info != null) {
                if (typeof object.info !== "object")
                    throw TypeError(".msg.C2GW_AddDeliveryAddress.info: object expected");
                message.info = $root.msg.UserAddress.fromObject(object.info);
            }
            return message;
        };

        /**
         * Creates a plain object from a C2GW_AddDeliveryAddress message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.C2GW_AddDeliveryAddress
         * @static
         * @param {msg.C2GW_AddDeliveryAddress} message C2GW_AddDeliveryAddress
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        C2GW_AddDeliveryAddress.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.info = null;
            if (message.info != null && message.hasOwnProperty("info"))
                object.info = $root.msg.UserAddress.toObject(message.info, options);
            return object;
        };

        /**
         * Converts this C2GW_AddDeliveryAddress to JSON.
         * @function toJSON
         * @memberof msg.C2GW_AddDeliveryAddress
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        C2GW_AddDeliveryAddress.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return C2GW_AddDeliveryAddress;
    })();

    msg.C2GW_DelDeliveryAddress = (function() {

        /**
         * Properties of a C2GW_DelDeliveryAddress.
         * @memberof msg
         * @interface IC2GW_DelDeliveryAddress
         * @property {number|null} [index] C2GW_DelDeliveryAddress index
         */

        /**
         * Constructs a new C2GW_DelDeliveryAddress.
         * @memberof msg
         * @classdesc Represents a C2GW_DelDeliveryAddress.
         * @implements IC2GW_DelDeliveryAddress
         * @constructor
         * @param {msg.IC2GW_DelDeliveryAddress=} [properties] Properties to set
         */
        function C2GW_DelDeliveryAddress(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * C2GW_DelDeliveryAddress index.
         * @member {number} index
         * @memberof msg.C2GW_DelDeliveryAddress
         * @instance
         */
        C2GW_DelDeliveryAddress.prototype.index = 0;

        /**
         * Creates a new C2GW_DelDeliveryAddress instance using the specified properties.
         * @function create
         * @memberof msg.C2GW_DelDeliveryAddress
         * @static
         * @param {msg.IC2GW_DelDeliveryAddress=} [properties] Properties to set
         * @returns {msg.C2GW_DelDeliveryAddress} C2GW_DelDeliveryAddress instance
         */
        C2GW_DelDeliveryAddress.create = function create(properties) {
            return new C2GW_DelDeliveryAddress(properties);
        };

        /**
         * Encodes the specified C2GW_DelDeliveryAddress message. Does not implicitly {@link msg.C2GW_DelDeliveryAddress.verify|verify} messages.
         * @function encode
         * @memberof msg.C2GW_DelDeliveryAddress
         * @static
         * @param {msg.IC2GW_DelDeliveryAddress} message C2GW_DelDeliveryAddress message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_DelDeliveryAddress.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.index != null && message.hasOwnProperty("index"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.index);
            return writer;
        };

        /**
         * Encodes the specified C2GW_DelDeliveryAddress message, length delimited. Does not implicitly {@link msg.C2GW_DelDeliveryAddress.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.C2GW_DelDeliveryAddress
         * @static
         * @param {msg.IC2GW_DelDeliveryAddress} message C2GW_DelDeliveryAddress message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_DelDeliveryAddress.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a C2GW_DelDeliveryAddress message from the specified reader or buffer.
         * @function decode
         * @memberof msg.C2GW_DelDeliveryAddress
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.C2GW_DelDeliveryAddress} C2GW_DelDeliveryAddress
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_DelDeliveryAddress.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.C2GW_DelDeliveryAddress();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.index = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a C2GW_DelDeliveryAddress message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.C2GW_DelDeliveryAddress
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.C2GW_DelDeliveryAddress} C2GW_DelDeliveryAddress
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_DelDeliveryAddress.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a C2GW_DelDeliveryAddress message.
         * @function verify
         * @memberof msg.C2GW_DelDeliveryAddress
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        C2GW_DelDeliveryAddress.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.index != null && message.hasOwnProperty("index"))
                if (!$util.isInteger(message.index))
                    return "index: integer expected";
            return null;
        };

        /**
         * Creates a C2GW_DelDeliveryAddress message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.C2GW_DelDeliveryAddress
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.C2GW_DelDeliveryAddress} C2GW_DelDeliveryAddress
         */
        C2GW_DelDeliveryAddress.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.C2GW_DelDeliveryAddress)
                return object;
            var message = new $root.msg.C2GW_DelDeliveryAddress();
            if (object.index != null)
                message.index = object.index >>> 0;
            return message;
        };

        /**
         * Creates a plain object from a C2GW_DelDeliveryAddress message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.C2GW_DelDeliveryAddress
         * @static
         * @param {msg.C2GW_DelDeliveryAddress} message C2GW_DelDeliveryAddress
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        C2GW_DelDeliveryAddress.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.index = 0;
            if (message.index != null && message.hasOwnProperty("index"))
                object.index = message.index;
            return object;
        };

        /**
         * Converts this C2GW_DelDeliveryAddress to JSON.
         * @function toJSON
         * @memberof msg.C2GW_DelDeliveryAddress
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        C2GW_DelDeliveryAddress.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return C2GW_DelDeliveryAddress;
    })();

    msg.C2GW_ChangeDeliveryAddress = (function() {

        /**
         * Properties of a C2GW_ChangeDeliveryAddress.
         * @memberof msg
         * @interface IC2GW_ChangeDeliveryAddress
         * @property {number|null} [index] C2GW_ChangeDeliveryAddress index
         * @property {msg.IUserAddress|null} [info] C2GW_ChangeDeliveryAddress info
         */

        /**
         * Constructs a new C2GW_ChangeDeliveryAddress.
         * @memberof msg
         * @classdesc Represents a C2GW_ChangeDeliveryAddress.
         * @implements IC2GW_ChangeDeliveryAddress
         * @constructor
         * @param {msg.IC2GW_ChangeDeliveryAddress=} [properties] Properties to set
         */
        function C2GW_ChangeDeliveryAddress(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * C2GW_ChangeDeliveryAddress index.
         * @member {number} index
         * @memberof msg.C2GW_ChangeDeliveryAddress
         * @instance
         */
        C2GW_ChangeDeliveryAddress.prototype.index = 0;

        /**
         * C2GW_ChangeDeliveryAddress info.
         * @member {msg.IUserAddress|null|undefined} info
         * @memberof msg.C2GW_ChangeDeliveryAddress
         * @instance
         */
        C2GW_ChangeDeliveryAddress.prototype.info = null;

        /**
         * Creates a new C2GW_ChangeDeliveryAddress instance using the specified properties.
         * @function create
         * @memberof msg.C2GW_ChangeDeliveryAddress
         * @static
         * @param {msg.IC2GW_ChangeDeliveryAddress=} [properties] Properties to set
         * @returns {msg.C2GW_ChangeDeliveryAddress} C2GW_ChangeDeliveryAddress instance
         */
        C2GW_ChangeDeliveryAddress.create = function create(properties) {
            return new C2GW_ChangeDeliveryAddress(properties);
        };

        /**
         * Encodes the specified C2GW_ChangeDeliveryAddress message. Does not implicitly {@link msg.C2GW_ChangeDeliveryAddress.verify|verify} messages.
         * @function encode
         * @memberof msg.C2GW_ChangeDeliveryAddress
         * @static
         * @param {msg.IC2GW_ChangeDeliveryAddress} message C2GW_ChangeDeliveryAddress message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_ChangeDeliveryAddress.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.index != null && message.hasOwnProperty("index"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.index);
            if (message.info != null && message.hasOwnProperty("info"))
                $root.msg.UserAddress.encode(message.info, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified C2GW_ChangeDeliveryAddress message, length delimited. Does not implicitly {@link msg.C2GW_ChangeDeliveryAddress.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.C2GW_ChangeDeliveryAddress
         * @static
         * @param {msg.IC2GW_ChangeDeliveryAddress} message C2GW_ChangeDeliveryAddress message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_ChangeDeliveryAddress.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a C2GW_ChangeDeliveryAddress message from the specified reader or buffer.
         * @function decode
         * @memberof msg.C2GW_ChangeDeliveryAddress
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.C2GW_ChangeDeliveryAddress} C2GW_ChangeDeliveryAddress
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_ChangeDeliveryAddress.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.C2GW_ChangeDeliveryAddress();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.index = reader.uint32();
                    break;
                case 2:
                    message.info = $root.msg.UserAddress.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a C2GW_ChangeDeliveryAddress message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.C2GW_ChangeDeliveryAddress
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.C2GW_ChangeDeliveryAddress} C2GW_ChangeDeliveryAddress
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_ChangeDeliveryAddress.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a C2GW_ChangeDeliveryAddress message.
         * @function verify
         * @memberof msg.C2GW_ChangeDeliveryAddress
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        C2GW_ChangeDeliveryAddress.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.index != null && message.hasOwnProperty("index"))
                if (!$util.isInteger(message.index))
                    return "index: integer expected";
            if (message.info != null && message.hasOwnProperty("info")) {
                var error = $root.msg.UserAddress.verify(message.info);
                if (error)
                    return "info." + error;
            }
            return null;
        };

        /**
         * Creates a C2GW_ChangeDeliveryAddress message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.C2GW_ChangeDeliveryAddress
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.C2GW_ChangeDeliveryAddress} C2GW_ChangeDeliveryAddress
         */
        C2GW_ChangeDeliveryAddress.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.C2GW_ChangeDeliveryAddress)
                return object;
            var message = new $root.msg.C2GW_ChangeDeliveryAddress();
            if (object.index != null)
                message.index = object.index >>> 0;
            if (object.info != null) {
                if (typeof object.info !== "object")
                    throw TypeError(".msg.C2GW_ChangeDeliveryAddress.info: object expected");
                message.info = $root.msg.UserAddress.fromObject(object.info);
            }
            return message;
        };

        /**
         * Creates a plain object from a C2GW_ChangeDeliveryAddress message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.C2GW_ChangeDeliveryAddress
         * @static
         * @param {msg.C2GW_ChangeDeliveryAddress} message C2GW_ChangeDeliveryAddress
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        C2GW_ChangeDeliveryAddress.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.index = 0;
                object.info = null;
            }
            if (message.index != null && message.hasOwnProperty("index"))
                object.index = message.index;
            if (message.info != null && message.hasOwnProperty("info"))
                object.info = $root.msg.UserAddress.toObject(message.info, options);
            return object;
        };

        /**
         * Converts this C2GW_ChangeDeliveryAddress to JSON.
         * @function toJSON
         * @memberof msg.C2GW_ChangeDeliveryAddress
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        C2GW_ChangeDeliveryAddress.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return C2GW_ChangeDeliveryAddress;
    })();

    msg.GW2C_SendDeliveryAddressList = (function() {

        /**
         * Properties of a GW2C_SendDeliveryAddressList.
         * @memberof msg
         * @interface IGW2C_SendDeliveryAddressList
         * @property {Array.<msg.IUserAddress>|null} [list] GW2C_SendDeliveryAddressList list
         */

        /**
         * Constructs a new GW2C_SendDeliveryAddressList.
         * @memberof msg
         * @classdesc Represents a GW2C_SendDeliveryAddressList.
         * @implements IGW2C_SendDeliveryAddressList
         * @constructor
         * @param {msg.IGW2C_SendDeliveryAddressList=} [properties] Properties to set
         */
        function GW2C_SendDeliveryAddressList(properties) {
            this.list = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GW2C_SendDeliveryAddressList list.
         * @member {Array.<msg.IUserAddress>} list
         * @memberof msg.GW2C_SendDeliveryAddressList
         * @instance
         */
        GW2C_SendDeliveryAddressList.prototype.list = $util.emptyArray;

        /**
         * Creates a new GW2C_SendDeliveryAddressList instance using the specified properties.
         * @function create
         * @memberof msg.GW2C_SendDeliveryAddressList
         * @static
         * @param {msg.IGW2C_SendDeliveryAddressList=} [properties] Properties to set
         * @returns {msg.GW2C_SendDeliveryAddressList} GW2C_SendDeliveryAddressList instance
         */
        GW2C_SendDeliveryAddressList.create = function create(properties) {
            return new GW2C_SendDeliveryAddressList(properties);
        };

        /**
         * Encodes the specified GW2C_SendDeliveryAddressList message. Does not implicitly {@link msg.GW2C_SendDeliveryAddressList.verify|verify} messages.
         * @function encode
         * @memberof msg.GW2C_SendDeliveryAddressList
         * @static
         * @param {msg.IGW2C_SendDeliveryAddressList} message GW2C_SendDeliveryAddressList message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_SendDeliveryAddressList.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.list != null && message.list.length)
                for (var i = 0; i < message.list.length; ++i)
                    $root.msg.UserAddress.encode(message.list[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified GW2C_SendDeliveryAddressList message, length delimited. Does not implicitly {@link msg.GW2C_SendDeliveryAddressList.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.GW2C_SendDeliveryAddressList
         * @static
         * @param {msg.IGW2C_SendDeliveryAddressList} message GW2C_SendDeliveryAddressList message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_SendDeliveryAddressList.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GW2C_SendDeliveryAddressList message from the specified reader or buffer.
         * @function decode
         * @memberof msg.GW2C_SendDeliveryAddressList
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.GW2C_SendDeliveryAddressList} GW2C_SendDeliveryAddressList
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_SendDeliveryAddressList.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.GW2C_SendDeliveryAddressList();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.list && message.list.length))
                        message.list = [];
                    message.list.push($root.msg.UserAddress.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GW2C_SendDeliveryAddressList message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.GW2C_SendDeliveryAddressList
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.GW2C_SendDeliveryAddressList} GW2C_SendDeliveryAddressList
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_SendDeliveryAddressList.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GW2C_SendDeliveryAddressList message.
         * @function verify
         * @memberof msg.GW2C_SendDeliveryAddressList
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GW2C_SendDeliveryAddressList.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.list != null && message.hasOwnProperty("list")) {
                if (!Array.isArray(message.list))
                    return "list: array expected";
                for (var i = 0; i < message.list.length; ++i) {
                    var error = $root.msg.UserAddress.verify(message.list[i]);
                    if (error)
                        return "list." + error;
                }
            }
            return null;
        };

        /**
         * Creates a GW2C_SendDeliveryAddressList message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.GW2C_SendDeliveryAddressList
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.GW2C_SendDeliveryAddressList} GW2C_SendDeliveryAddressList
         */
        GW2C_SendDeliveryAddressList.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.GW2C_SendDeliveryAddressList)
                return object;
            var message = new $root.msg.GW2C_SendDeliveryAddressList();
            if (object.list) {
                if (!Array.isArray(object.list))
                    throw TypeError(".msg.GW2C_SendDeliveryAddressList.list: array expected");
                message.list = [];
                for (var i = 0; i < object.list.length; ++i) {
                    if (typeof object.list[i] !== "object")
                        throw TypeError(".msg.GW2C_SendDeliveryAddressList.list: object expected");
                    message.list[i] = $root.msg.UserAddress.fromObject(object.list[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a GW2C_SendDeliveryAddressList message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.GW2C_SendDeliveryAddressList
         * @static
         * @param {msg.GW2C_SendDeliveryAddressList} message GW2C_SendDeliveryAddressList
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GW2C_SendDeliveryAddressList.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.list = [];
            if (message.list && message.list.length) {
                object.list = [];
                for (var j = 0; j < message.list.length; ++j)
                    object.list[j] = $root.msg.UserAddress.toObject(message.list[j], options);
            }
            return object;
        };

        /**
         * Converts this GW2C_SendDeliveryAddressList to JSON.
         * @function toJSON
         * @memberof msg.GW2C_SendDeliveryAddressList
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GW2C_SendDeliveryAddressList.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GW2C_SendDeliveryAddressList;
    })();

    msg.C2GW_ReqRechargeMoney = (function() {

        /**
         * Properties of a C2GW_ReqRechargeMoney.
         * @memberof msg
         * @interface IC2GW_ReqRechargeMoney
         * @property {number|null} [amount] C2GW_ReqRechargeMoney amount
         * @property {string|null} [token] C2GW_ReqRechargeMoney token
         * @property {number|null} [type] C2GW_ReqRechargeMoney type
         */

        /**
         * Constructs a new C2GW_ReqRechargeMoney.
         * @memberof msg
         * @classdesc Represents a C2GW_ReqRechargeMoney.
         * @implements IC2GW_ReqRechargeMoney
         * @constructor
         * @param {msg.IC2GW_ReqRechargeMoney=} [properties] Properties to set
         */
        function C2GW_ReqRechargeMoney(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * C2GW_ReqRechargeMoney amount.
         * @member {number} amount
         * @memberof msg.C2GW_ReqRechargeMoney
         * @instance
         */
        C2GW_ReqRechargeMoney.prototype.amount = 0;

        /**
         * C2GW_ReqRechargeMoney token.
         * @member {string} token
         * @memberof msg.C2GW_ReqRechargeMoney
         * @instance
         */
        C2GW_ReqRechargeMoney.prototype.token = "";

        /**
         * C2GW_ReqRechargeMoney type.
         * @member {number} type
         * @memberof msg.C2GW_ReqRechargeMoney
         * @instance
         */
        C2GW_ReqRechargeMoney.prototype.type = 0;

        /**
         * Creates a new C2GW_ReqRechargeMoney instance using the specified properties.
         * @function create
         * @memberof msg.C2GW_ReqRechargeMoney
         * @static
         * @param {msg.IC2GW_ReqRechargeMoney=} [properties] Properties to set
         * @returns {msg.C2GW_ReqRechargeMoney} C2GW_ReqRechargeMoney instance
         */
        C2GW_ReqRechargeMoney.create = function create(properties) {
            return new C2GW_ReqRechargeMoney(properties);
        };

        /**
         * Encodes the specified C2GW_ReqRechargeMoney message. Does not implicitly {@link msg.C2GW_ReqRechargeMoney.verify|verify} messages.
         * @function encode
         * @memberof msg.C2GW_ReqRechargeMoney
         * @static
         * @param {msg.IC2GW_ReqRechargeMoney} message C2GW_ReqRechargeMoney message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_ReqRechargeMoney.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.amount != null && message.hasOwnProperty("amount"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.amount);
            if (message.token != null && message.hasOwnProperty("token"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.token);
            if (message.type != null && message.hasOwnProperty("type"))
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.type);
            return writer;
        };

        /**
         * Encodes the specified C2GW_ReqRechargeMoney message, length delimited. Does not implicitly {@link msg.C2GW_ReqRechargeMoney.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.C2GW_ReqRechargeMoney
         * @static
         * @param {msg.IC2GW_ReqRechargeMoney} message C2GW_ReqRechargeMoney message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_ReqRechargeMoney.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a C2GW_ReqRechargeMoney message from the specified reader or buffer.
         * @function decode
         * @memberof msg.C2GW_ReqRechargeMoney
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.C2GW_ReqRechargeMoney} C2GW_ReqRechargeMoney
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_ReqRechargeMoney.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.C2GW_ReqRechargeMoney();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.amount = reader.uint32();
                    break;
                case 2:
                    message.token = reader.string();
                    break;
                case 3:
                    message.type = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a C2GW_ReqRechargeMoney message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.C2GW_ReqRechargeMoney
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.C2GW_ReqRechargeMoney} C2GW_ReqRechargeMoney
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_ReqRechargeMoney.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a C2GW_ReqRechargeMoney message.
         * @function verify
         * @memberof msg.C2GW_ReqRechargeMoney
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        C2GW_ReqRechargeMoney.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.amount != null && message.hasOwnProperty("amount"))
                if (!$util.isInteger(message.amount))
                    return "amount: integer expected";
            if (message.token != null && message.hasOwnProperty("token"))
                if (!$util.isString(message.token))
                    return "token: string expected";
            if (message.type != null && message.hasOwnProperty("type"))
                if (!$util.isInteger(message.type))
                    return "type: integer expected";
            return null;
        };

        /**
         * Creates a C2GW_ReqRechargeMoney message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.C2GW_ReqRechargeMoney
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.C2GW_ReqRechargeMoney} C2GW_ReqRechargeMoney
         */
        C2GW_ReqRechargeMoney.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.C2GW_ReqRechargeMoney)
                return object;
            var message = new $root.msg.C2GW_ReqRechargeMoney();
            if (object.amount != null)
                message.amount = object.amount >>> 0;
            if (object.token != null)
                message.token = String(object.token);
            if (object.type != null)
                message.type = object.type >>> 0;
            return message;
        };

        /**
         * Creates a plain object from a C2GW_ReqRechargeMoney message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.C2GW_ReqRechargeMoney
         * @static
         * @param {msg.C2GW_ReqRechargeMoney} message C2GW_ReqRechargeMoney
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        C2GW_ReqRechargeMoney.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.amount = 0;
                object.token = "";
                object.type = 0;
            }
            if (message.amount != null && message.hasOwnProperty("amount"))
                object.amount = message.amount;
            if (message.token != null && message.hasOwnProperty("token"))
                object.token = message.token;
            if (message.type != null && message.hasOwnProperty("type"))
                object.type = message.type;
            return object;
        };

        /**
         * Converts this C2GW_ReqRechargeMoney to JSON.
         * @function toJSON
         * @memberof msg.C2GW_ReqRechargeMoney
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        C2GW_ReqRechargeMoney.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return C2GW_ReqRechargeMoney;
    })();

    msg.GW2C_RetRechargeMoney = (function() {

        /**
         * Properties of a GW2C_RetRechargeMoney.
         * @memberof msg
         * @interface IGW2C_RetRechargeMoney
         * @property {string|null} [urlcheckout] GW2C_RetRechargeMoney urlcheckout
         */

        /**
         * Constructs a new GW2C_RetRechargeMoney.
         * @memberof msg
         * @classdesc Represents a GW2C_RetRechargeMoney.
         * @implements IGW2C_RetRechargeMoney
         * @constructor
         * @param {msg.IGW2C_RetRechargeMoney=} [properties] Properties to set
         */
        function GW2C_RetRechargeMoney(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GW2C_RetRechargeMoney urlcheckout.
         * @member {string} urlcheckout
         * @memberof msg.GW2C_RetRechargeMoney
         * @instance
         */
        GW2C_RetRechargeMoney.prototype.urlcheckout = "";

        /**
         * Creates a new GW2C_RetRechargeMoney instance using the specified properties.
         * @function create
         * @memberof msg.GW2C_RetRechargeMoney
         * @static
         * @param {msg.IGW2C_RetRechargeMoney=} [properties] Properties to set
         * @returns {msg.GW2C_RetRechargeMoney} GW2C_RetRechargeMoney instance
         */
        GW2C_RetRechargeMoney.create = function create(properties) {
            return new GW2C_RetRechargeMoney(properties);
        };

        /**
         * Encodes the specified GW2C_RetRechargeMoney message. Does not implicitly {@link msg.GW2C_RetRechargeMoney.verify|verify} messages.
         * @function encode
         * @memberof msg.GW2C_RetRechargeMoney
         * @static
         * @param {msg.IGW2C_RetRechargeMoney} message GW2C_RetRechargeMoney message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_RetRechargeMoney.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.urlcheckout != null && message.hasOwnProperty("urlcheckout"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.urlcheckout);
            return writer;
        };

        /**
         * Encodes the specified GW2C_RetRechargeMoney message, length delimited. Does not implicitly {@link msg.GW2C_RetRechargeMoney.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.GW2C_RetRechargeMoney
         * @static
         * @param {msg.IGW2C_RetRechargeMoney} message GW2C_RetRechargeMoney message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_RetRechargeMoney.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GW2C_RetRechargeMoney message from the specified reader or buffer.
         * @function decode
         * @memberof msg.GW2C_RetRechargeMoney
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.GW2C_RetRechargeMoney} GW2C_RetRechargeMoney
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_RetRechargeMoney.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.GW2C_RetRechargeMoney();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.urlcheckout = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GW2C_RetRechargeMoney message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.GW2C_RetRechargeMoney
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.GW2C_RetRechargeMoney} GW2C_RetRechargeMoney
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_RetRechargeMoney.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GW2C_RetRechargeMoney message.
         * @function verify
         * @memberof msg.GW2C_RetRechargeMoney
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GW2C_RetRechargeMoney.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.urlcheckout != null && message.hasOwnProperty("urlcheckout"))
                if (!$util.isString(message.urlcheckout))
                    return "urlcheckout: string expected";
            return null;
        };

        /**
         * Creates a GW2C_RetRechargeMoney message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.GW2C_RetRechargeMoney
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.GW2C_RetRechargeMoney} GW2C_RetRechargeMoney
         */
        GW2C_RetRechargeMoney.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.GW2C_RetRechargeMoney)
                return object;
            var message = new $root.msg.GW2C_RetRechargeMoney();
            if (object.urlcheckout != null)
                message.urlcheckout = String(object.urlcheckout);
            return message;
        };

        /**
         * Creates a plain object from a GW2C_RetRechargeMoney message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.GW2C_RetRechargeMoney
         * @static
         * @param {msg.GW2C_RetRechargeMoney} message GW2C_RetRechargeMoney
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GW2C_RetRechargeMoney.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.urlcheckout = "";
            if (message.urlcheckout != null && message.hasOwnProperty("urlcheckout"))
                object.urlcheckout = message.urlcheckout;
            return object;
        };

        /**
         * Converts this GW2C_RetRechargeMoney to JSON.
         * @function toJSON
         * @memberof msg.GW2C_RetRechargeMoney
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GW2C_RetRechargeMoney.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GW2C_RetRechargeMoney;
    })();

    msg.C2GW_PlatformRechargeDone = (function() {

        /**
         * Properties of a C2GW_PlatformRechargeDone.
         * @memberof msg
         * @interface IC2GW_PlatformRechargeDone
         */

        /**
         * Constructs a new C2GW_PlatformRechargeDone.
         * @memberof msg
         * @classdesc Represents a C2GW_PlatformRechargeDone.
         * @implements IC2GW_PlatformRechargeDone
         * @constructor
         * @param {msg.IC2GW_PlatformRechargeDone=} [properties] Properties to set
         */
        function C2GW_PlatformRechargeDone(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Creates a new C2GW_PlatformRechargeDone instance using the specified properties.
         * @function create
         * @memberof msg.C2GW_PlatformRechargeDone
         * @static
         * @param {msg.IC2GW_PlatformRechargeDone=} [properties] Properties to set
         * @returns {msg.C2GW_PlatformRechargeDone} C2GW_PlatformRechargeDone instance
         */
        C2GW_PlatformRechargeDone.create = function create(properties) {
            return new C2GW_PlatformRechargeDone(properties);
        };

        /**
         * Encodes the specified C2GW_PlatformRechargeDone message. Does not implicitly {@link msg.C2GW_PlatformRechargeDone.verify|verify} messages.
         * @function encode
         * @memberof msg.C2GW_PlatformRechargeDone
         * @static
         * @param {msg.IC2GW_PlatformRechargeDone} message C2GW_PlatformRechargeDone message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_PlatformRechargeDone.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };

        /**
         * Encodes the specified C2GW_PlatformRechargeDone message, length delimited. Does not implicitly {@link msg.C2GW_PlatformRechargeDone.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.C2GW_PlatformRechargeDone
         * @static
         * @param {msg.IC2GW_PlatformRechargeDone} message C2GW_PlatformRechargeDone message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_PlatformRechargeDone.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a C2GW_PlatformRechargeDone message from the specified reader or buffer.
         * @function decode
         * @memberof msg.C2GW_PlatformRechargeDone
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.C2GW_PlatformRechargeDone} C2GW_PlatformRechargeDone
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_PlatformRechargeDone.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.C2GW_PlatformRechargeDone();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a C2GW_PlatformRechargeDone message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.C2GW_PlatformRechargeDone
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.C2GW_PlatformRechargeDone} C2GW_PlatformRechargeDone
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_PlatformRechargeDone.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a C2GW_PlatformRechargeDone message.
         * @function verify
         * @memberof msg.C2GW_PlatformRechargeDone
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        C2GW_PlatformRechargeDone.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            return null;
        };

        /**
         * Creates a C2GW_PlatformRechargeDone message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.C2GW_PlatformRechargeDone
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.C2GW_PlatformRechargeDone} C2GW_PlatformRechargeDone
         */
        C2GW_PlatformRechargeDone.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.C2GW_PlatformRechargeDone)
                return object;
            return new $root.msg.C2GW_PlatformRechargeDone();
        };

        /**
         * Creates a plain object from a C2GW_PlatformRechargeDone message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.C2GW_PlatformRechargeDone
         * @static
         * @param {msg.C2GW_PlatformRechargeDone} message C2GW_PlatformRechargeDone
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        C2GW_PlatformRechargeDone.toObject = function toObject() {
            return {};
        };

        /**
         * Converts this C2GW_PlatformRechargeDone to JSON.
         * @function toJSON
         * @memberof msg.C2GW_PlatformRechargeDone
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        C2GW_PlatformRechargeDone.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return C2GW_PlatformRechargeDone;
    })();

    msg.GW2C_SendWechatInfo = (function() {

        /**
         * Properties of a GW2C_SendWechatInfo.
         * @memberof msg
         * @interface IGW2C_SendWechatInfo
         * @property {string|null} [openid] GW2C_SendWechatInfo openid
         */

        /**
         * Constructs a new GW2C_SendWechatInfo.
         * @memberof msg
         * @classdesc Represents a GW2C_SendWechatInfo.
         * @implements IGW2C_SendWechatInfo
         * @constructor
         * @param {msg.IGW2C_SendWechatInfo=} [properties] Properties to set
         */
        function GW2C_SendWechatInfo(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GW2C_SendWechatInfo openid.
         * @member {string} openid
         * @memberof msg.GW2C_SendWechatInfo
         * @instance
         */
        GW2C_SendWechatInfo.prototype.openid = "";

        /**
         * Creates a new GW2C_SendWechatInfo instance using the specified properties.
         * @function create
         * @memberof msg.GW2C_SendWechatInfo
         * @static
         * @param {msg.IGW2C_SendWechatInfo=} [properties] Properties to set
         * @returns {msg.GW2C_SendWechatInfo} GW2C_SendWechatInfo instance
         */
        GW2C_SendWechatInfo.create = function create(properties) {
            return new GW2C_SendWechatInfo(properties);
        };

        /**
         * Encodes the specified GW2C_SendWechatInfo message. Does not implicitly {@link msg.GW2C_SendWechatInfo.verify|verify} messages.
         * @function encode
         * @memberof msg.GW2C_SendWechatInfo
         * @static
         * @param {msg.IGW2C_SendWechatInfo} message GW2C_SendWechatInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_SendWechatInfo.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.openid != null && message.hasOwnProperty("openid"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.openid);
            return writer;
        };

        /**
         * Encodes the specified GW2C_SendWechatInfo message, length delimited. Does not implicitly {@link msg.GW2C_SendWechatInfo.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.GW2C_SendWechatInfo
         * @static
         * @param {msg.IGW2C_SendWechatInfo} message GW2C_SendWechatInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_SendWechatInfo.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GW2C_SendWechatInfo message from the specified reader or buffer.
         * @function decode
         * @memberof msg.GW2C_SendWechatInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.GW2C_SendWechatInfo} GW2C_SendWechatInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_SendWechatInfo.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.GW2C_SendWechatInfo();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.openid = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GW2C_SendWechatInfo message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.GW2C_SendWechatInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.GW2C_SendWechatInfo} GW2C_SendWechatInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_SendWechatInfo.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GW2C_SendWechatInfo message.
         * @function verify
         * @memberof msg.GW2C_SendWechatInfo
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GW2C_SendWechatInfo.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.openid != null && message.hasOwnProperty("openid"))
                if (!$util.isString(message.openid))
                    return "openid: string expected";
            return null;
        };

        /**
         * Creates a GW2C_SendWechatInfo message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.GW2C_SendWechatInfo
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.GW2C_SendWechatInfo} GW2C_SendWechatInfo
         */
        GW2C_SendWechatInfo.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.GW2C_SendWechatInfo)
                return object;
            var message = new $root.msg.GW2C_SendWechatInfo();
            if (object.openid != null)
                message.openid = String(object.openid);
            return message;
        };

        /**
         * Creates a plain object from a GW2C_SendWechatInfo message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.GW2C_SendWechatInfo
         * @static
         * @param {msg.GW2C_SendWechatInfo} message GW2C_SendWechatInfo
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GW2C_SendWechatInfo.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.openid = "";
            if (message.openid != null && message.hasOwnProperty("openid"))
                object.openid = message.openid;
            return object;
        };

        /**
         * Converts this GW2C_SendWechatInfo to JSON.
         * @function toJSON
         * @memberof msg.GW2C_SendWechatInfo
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GW2C_SendWechatInfo.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GW2C_SendWechatInfo;
    })();

    msg.C2GW_StartLuckyDraw = (function() {

        /**
         * Properties of a C2GW_StartLuckyDraw.
         * @memberof msg
         * @interface IC2GW_StartLuckyDraw
         * @property {number|Long|null} [userid] C2GW_StartLuckyDraw userid
         */

        /**
         * Constructs a new C2GW_StartLuckyDraw.
         * @memberof msg
         * @classdesc Represents a C2GW_StartLuckyDraw.
         * @implements IC2GW_StartLuckyDraw
         * @constructor
         * @param {msg.IC2GW_StartLuckyDraw=} [properties] Properties to set
         */
        function C2GW_StartLuckyDraw(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * C2GW_StartLuckyDraw userid.
         * @member {number|Long} userid
         * @memberof msg.C2GW_StartLuckyDraw
         * @instance
         */
        C2GW_StartLuckyDraw.prototype.userid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * Creates a new C2GW_StartLuckyDraw instance using the specified properties.
         * @function create
         * @memberof msg.C2GW_StartLuckyDraw
         * @static
         * @param {msg.IC2GW_StartLuckyDraw=} [properties] Properties to set
         * @returns {msg.C2GW_StartLuckyDraw} C2GW_StartLuckyDraw instance
         */
        C2GW_StartLuckyDraw.create = function create(properties) {
            return new C2GW_StartLuckyDraw(properties);
        };

        /**
         * Encodes the specified C2GW_StartLuckyDraw message. Does not implicitly {@link msg.C2GW_StartLuckyDraw.verify|verify} messages.
         * @function encode
         * @memberof msg.C2GW_StartLuckyDraw
         * @static
         * @param {msg.IC2GW_StartLuckyDraw} message C2GW_StartLuckyDraw message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_StartLuckyDraw.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.userid != null && message.hasOwnProperty("userid"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.userid);
            return writer;
        };

        /**
         * Encodes the specified C2GW_StartLuckyDraw message, length delimited. Does not implicitly {@link msg.C2GW_StartLuckyDraw.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.C2GW_StartLuckyDraw
         * @static
         * @param {msg.IC2GW_StartLuckyDraw} message C2GW_StartLuckyDraw message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_StartLuckyDraw.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a C2GW_StartLuckyDraw message from the specified reader or buffer.
         * @function decode
         * @memberof msg.C2GW_StartLuckyDraw
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.C2GW_StartLuckyDraw} C2GW_StartLuckyDraw
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_StartLuckyDraw.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.C2GW_StartLuckyDraw();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.userid = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a C2GW_StartLuckyDraw message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.C2GW_StartLuckyDraw
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.C2GW_StartLuckyDraw} C2GW_StartLuckyDraw
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_StartLuckyDraw.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a C2GW_StartLuckyDraw message.
         * @function verify
         * @memberof msg.C2GW_StartLuckyDraw
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        C2GW_StartLuckyDraw.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.userid != null && message.hasOwnProperty("userid"))
                if (!$util.isInteger(message.userid) && !(message.userid && $util.isInteger(message.userid.low) && $util.isInteger(message.userid.high)))
                    return "userid: integer|Long expected";
            return null;
        };

        /**
         * Creates a C2GW_StartLuckyDraw message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.C2GW_StartLuckyDraw
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.C2GW_StartLuckyDraw} C2GW_StartLuckyDraw
         */
        C2GW_StartLuckyDraw.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.C2GW_StartLuckyDraw)
                return object;
            var message = new $root.msg.C2GW_StartLuckyDraw();
            if (object.userid != null)
                if ($util.Long)
                    (message.userid = $util.Long.fromValue(object.userid)).unsigned = true;
                else if (typeof object.userid === "string")
                    message.userid = parseInt(object.userid, 10);
                else if (typeof object.userid === "number")
                    message.userid = object.userid;
                else if (typeof object.userid === "object")
                    message.userid = new $util.LongBits(object.userid.low >>> 0, object.userid.high >>> 0).toNumber(true);
            return message;
        };

        /**
         * Creates a plain object from a C2GW_StartLuckyDraw message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.C2GW_StartLuckyDraw
         * @static
         * @param {msg.C2GW_StartLuckyDraw} message C2GW_StartLuckyDraw
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        C2GW_StartLuckyDraw.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.userid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.userid = options.longs === String ? "0" : 0;
            if (message.userid != null && message.hasOwnProperty("userid"))
                if (typeof message.userid === "number")
                    object.userid = options.longs === String ? String(message.userid) : message.userid;
                else
                    object.userid = options.longs === String ? $util.Long.prototype.toString.call(message.userid) : options.longs === Number ? new $util.LongBits(message.userid.low >>> 0, message.userid.high >>> 0).toNumber(true) : message.userid;
            return object;
        };

        /**
         * Converts this C2GW_StartLuckyDraw to JSON.
         * @function toJSON
         * @memberof msg.C2GW_StartLuckyDraw
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        C2GW_StartLuckyDraw.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return C2GW_StartLuckyDraw;
    })();

    msg.GW2C_LuckyDrawHit = (function() {

        /**
         * Properties of a GW2C_LuckyDrawHit.
         * @memberof msg
         * @interface IGW2C_LuckyDrawHit
         * @property {number|null} [id] GW2C_LuckyDrawHit id
         */

        /**
         * Constructs a new GW2C_LuckyDrawHit.
         * @memberof msg
         * @classdesc Represents a GW2C_LuckyDrawHit.
         * @implements IGW2C_LuckyDrawHit
         * @constructor
         * @param {msg.IGW2C_LuckyDrawHit=} [properties] Properties to set
         */
        function GW2C_LuckyDrawHit(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GW2C_LuckyDrawHit id.
         * @member {number} id
         * @memberof msg.GW2C_LuckyDrawHit
         * @instance
         */
        GW2C_LuckyDrawHit.prototype.id = 0;

        /**
         * Creates a new GW2C_LuckyDrawHit instance using the specified properties.
         * @function create
         * @memberof msg.GW2C_LuckyDrawHit
         * @static
         * @param {msg.IGW2C_LuckyDrawHit=} [properties] Properties to set
         * @returns {msg.GW2C_LuckyDrawHit} GW2C_LuckyDrawHit instance
         */
        GW2C_LuckyDrawHit.create = function create(properties) {
            return new GW2C_LuckyDrawHit(properties);
        };

        /**
         * Encodes the specified GW2C_LuckyDrawHit message. Does not implicitly {@link msg.GW2C_LuckyDrawHit.verify|verify} messages.
         * @function encode
         * @memberof msg.GW2C_LuckyDrawHit
         * @static
         * @param {msg.IGW2C_LuckyDrawHit} message GW2C_LuckyDrawHit message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_LuckyDrawHit.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.id != null && message.hasOwnProperty("id"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
            return writer;
        };

        /**
         * Encodes the specified GW2C_LuckyDrawHit message, length delimited. Does not implicitly {@link msg.GW2C_LuckyDrawHit.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.GW2C_LuckyDrawHit
         * @static
         * @param {msg.IGW2C_LuckyDrawHit} message GW2C_LuckyDrawHit message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_LuckyDrawHit.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GW2C_LuckyDrawHit message from the specified reader or buffer.
         * @function decode
         * @memberof msg.GW2C_LuckyDrawHit
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.GW2C_LuckyDrawHit} GW2C_LuckyDrawHit
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_LuckyDrawHit.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.GW2C_LuckyDrawHit();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.id = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GW2C_LuckyDrawHit message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.GW2C_LuckyDrawHit
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.GW2C_LuckyDrawHit} GW2C_LuckyDrawHit
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_LuckyDrawHit.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GW2C_LuckyDrawHit message.
         * @function verify
         * @memberof msg.GW2C_LuckyDrawHit
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GW2C_LuckyDrawHit.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.id != null && message.hasOwnProperty("id"))
                if (!$util.isInteger(message.id))
                    return "id: integer expected";
            return null;
        };

        /**
         * Creates a GW2C_LuckyDrawHit message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.GW2C_LuckyDrawHit
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.GW2C_LuckyDrawHit} GW2C_LuckyDrawHit
         */
        GW2C_LuckyDrawHit.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.GW2C_LuckyDrawHit)
                return object;
            var message = new $root.msg.GW2C_LuckyDrawHit();
            if (object.id != null)
                message.id = object.id | 0;
            return message;
        };

        /**
         * Creates a plain object from a GW2C_LuckyDrawHit message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.GW2C_LuckyDrawHit
         * @static
         * @param {msg.GW2C_LuckyDrawHit} message GW2C_LuckyDrawHit
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GW2C_LuckyDrawHit.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.id = 0;
            if (message.id != null && message.hasOwnProperty("id"))
                object.id = message.id;
            return object;
        };

        /**
         * Converts this GW2C_LuckyDrawHit to JSON.
         * @function toJSON
         * @memberof msg.GW2C_LuckyDrawHit
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GW2C_LuckyDrawHit.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GW2C_LuckyDrawHit;
    })();

    msg.GW2C_FreePresentNotify = (function() {

        /**
         * Properties of a GW2C_FreePresentNotify.
         * @memberof msg
         * @interface IGW2C_FreePresentNotify
         * @property {number|null} [money] GW2C_FreePresentNotify money
         */

        /**
         * Constructs a new GW2C_FreePresentNotify.
         * @memberof msg
         * @classdesc Represents a GW2C_FreePresentNotify.
         * @implements IGW2C_FreePresentNotify
         * @constructor
         * @param {msg.IGW2C_FreePresentNotify=} [properties] Properties to set
         */
        function GW2C_FreePresentNotify(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GW2C_FreePresentNotify money.
         * @member {number} money
         * @memberof msg.GW2C_FreePresentNotify
         * @instance
         */
        GW2C_FreePresentNotify.prototype.money = 0;

        /**
         * Creates a new GW2C_FreePresentNotify instance using the specified properties.
         * @function create
         * @memberof msg.GW2C_FreePresentNotify
         * @static
         * @param {msg.IGW2C_FreePresentNotify=} [properties] Properties to set
         * @returns {msg.GW2C_FreePresentNotify} GW2C_FreePresentNotify instance
         */
        GW2C_FreePresentNotify.create = function create(properties) {
            return new GW2C_FreePresentNotify(properties);
        };

        /**
         * Encodes the specified GW2C_FreePresentNotify message. Does not implicitly {@link msg.GW2C_FreePresentNotify.verify|verify} messages.
         * @function encode
         * @memberof msg.GW2C_FreePresentNotify
         * @static
         * @param {msg.IGW2C_FreePresentNotify} message GW2C_FreePresentNotify message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_FreePresentNotify.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.money != null && message.hasOwnProperty("money"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.money);
            return writer;
        };

        /**
         * Encodes the specified GW2C_FreePresentNotify message, length delimited. Does not implicitly {@link msg.GW2C_FreePresentNotify.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.GW2C_FreePresentNotify
         * @static
         * @param {msg.IGW2C_FreePresentNotify} message GW2C_FreePresentNotify message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_FreePresentNotify.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GW2C_FreePresentNotify message from the specified reader or buffer.
         * @function decode
         * @memberof msg.GW2C_FreePresentNotify
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.GW2C_FreePresentNotify} GW2C_FreePresentNotify
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_FreePresentNotify.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.GW2C_FreePresentNotify();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.money = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GW2C_FreePresentNotify message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.GW2C_FreePresentNotify
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.GW2C_FreePresentNotify} GW2C_FreePresentNotify
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_FreePresentNotify.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GW2C_FreePresentNotify message.
         * @function verify
         * @memberof msg.GW2C_FreePresentNotify
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GW2C_FreePresentNotify.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.money != null && message.hasOwnProperty("money"))
                if (!$util.isInteger(message.money))
                    return "money: integer expected";
            return null;
        };

        /**
         * Creates a GW2C_FreePresentNotify message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.GW2C_FreePresentNotify
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.GW2C_FreePresentNotify} GW2C_FreePresentNotify
         */
        GW2C_FreePresentNotify.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.GW2C_FreePresentNotify)
                return object;
            var message = new $root.msg.GW2C_FreePresentNotify();
            if (object.money != null)
                message.money = object.money | 0;
            return message;
        };

        /**
         * Creates a plain object from a GW2C_FreePresentNotify message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.GW2C_FreePresentNotify
         * @static
         * @param {msg.GW2C_FreePresentNotify} message GW2C_FreePresentNotify
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GW2C_FreePresentNotify.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.money = 0;
            if (message.money != null && message.hasOwnProperty("money"))
                object.money = message.money;
            return object;
        };

        /**
         * Converts this GW2C_FreePresentNotify to JSON.
         * @function toJSON
         * @memberof msg.GW2C_FreePresentNotify
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GW2C_FreePresentNotify.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GW2C_FreePresentNotify;
    })();

    msg.GW2C_SendTaskList = (function() {

        /**
         * Properties of a GW2C_SendTaskList.
         * @memberof msg
         * @interface IGW2C_SendTaskList
         * @property {Array.<msg.ITaskData>|null} [tasks] GW2C_SendTaskList tasks
         */

        /**
         * Constructs a new GW2C_SendTaskList.
         * @memberof msg
         * @classdesc Represents a GW2C_SendTaskList.
         * @implements IGW2C_SendTaskList
         * @constructor
         * @param {msg.IGW2C_SendTaskList=} [properties] Properties to set
         */
        function GW2C_SendTaskList(properties) {
            this.tasks = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GW2C_SendTaskList tasks.
         * @member {Array.<msg.ITaskData>} tasks
         * @memberof msg.GW2C_SendTaskList
         * @instance
         */
        GW2C_SendTaskList.prototype.tasks = $util.emptyArray;

        /**
         * Creates a new GW2C_SendTaskList instance using the specified properties.
         * @function create
         * @memberof msg.GW2C_SendTaskList
         * @static
         * @param {msg.IGW2C_SendTaskList=} [properties] Properties to set
         * @returns {msg.GW2C_SendTaskList} GW2C_SendTaskList instance
         */
        GW2C_SendTaskList.create = function create(properties) {
            return new GW2C_SendTaskList(properties);
        };

        /**
         * Encodes the specified GW2C_SendTaskList message. Does not implicitly {@link msg.GW2C_SendTaskList.verify|verify} messages.
         * @function encode
         * @memberof msg.GW2C_SendTaskList
         * @static
         * @param {msg.IGW2C_SendTaskList} message GW2C_SendTaskList message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_SendTaskList.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.tasks != null && message.tasks.length)
                for (var i = 0; i < message.tasks.length; ++i)
                    $root.msg.TaskData.encode(message.tasks[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified GW2C_SendTaskList message, length delimited. Does not implicitly {@link msg.GW2C_SendTaskList.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.GW2C_SendTaskList
         * @static
         * @param {msg.IGW2C_SendTaskList} message GW2C_SendTaskList message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_SendTaskList.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GW2C_SendTaskList message from the specified reader or buffer.
         * @function decode
         * @memberof msg.GW2C_SendTaskList
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.GW2C_SendTaskList} GW2C_SendTaskList
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_SendTaskList.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.GW2C_SendTaskList();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.tasks && message.tasks.length))
                        message.tasks = [];
                    message.tasks.push($root.msg.TaskData.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GW2C_SendTaskList message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.GW2C_SendTaskList
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.GW2C_SendTaskList} GW2C_SendTaskList
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_SendTaskList.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GW2C_SendTaskList message.
         * @function verify
         * @memberof msg.GW2C_SendTaskList
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GW2C_SendTaskList.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.tasks != null && message.hasOwnProperty("tasks")) {
                if (!Array.isArray(message.tasks))
                    return "tasks: array expected";
                for (var i = 0; i < message.tasks.length; ++i) {
                    var error = $root.msg.TaskData.verify(message.tasks[i]);
                    if (error)
                        return "tasks." + error;
                }
            }
            return null;
        };

        /**
         * Creates a GW2C_SendTaskList message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.GW2C_SendTaskList
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.GW2C_SendTaskList} GW2C_SendTaskList
         */
        GW2C_SendTaskList.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.GW2C_SendTaskList)
                return object;
            var message = new $root.msg.GW2C_SendTaskList();
            if (object.tasks) {
                if (!Array.isArray(object.tasks))
                    throw TypeError(".msg.GW2C_SendTaskList.tasks: array expected");
                message.tasks = [];
                for (var i = 0; i < object.tasks.length; ++i) {
                    if (typeof object.tasks[i] !== "object")
                        throw TypeError(".msg.GW2C_SendTaskList.tasks: object expected");
                    message.tasks[i] = $root.msg.TaskData.fromObject(object.tasks[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a GW2C_SendTaskList message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.GW2C_SendTaskList
         * @static
         * @param {msg.GW2C_SendTaskList} message GW2C_SendTaskList
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GW2C_SendTaskList.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.tasks = [];
            if (message.tasks && message.tasks.length) {
                object.tasks = [];
                for (var j = 0; j < message.tasks.length; ++j)
                    object.tasks[j] = $root.msg.TaskData.toObject(message.tasks[j], options);
            }
            return object;
        };

        /**
         * Converts this GW2C_SendTaskList to JSON.
         * @function toJSON
         * @memberof msg.GW2C_SendTaskList
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GW2C_SendTaskList.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GW2C_SendTaskList;
    })();

    return msg;
})();

module.exports = $root;
